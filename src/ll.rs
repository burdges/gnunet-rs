/* automatically generated by rust-bindgen */

pub type __u_char = ::libc::c_uchar;
pub type __u_short = ::libc::c_ushort;
pub type __u_int = ::libc::c_uint;
pub type __u_long = ::libc::c_ulong;
pub type __int8_t = ::libc::c_char;
pub type __uint8_t = ::libc::c_uchar;
pub type __int16_t = ::libc::c_short;
pub type __uint16_t = ::libc::c_ushort;
pub type __int32_t = ::libc::c_int;
pub type __uint32_t = ::libc::c_uint;
pub type __int64_t = ::libc::c_long;
pub type __uint64_t = ::libc::c_ulong;
pub type __quad_t = ::libc::c_long;
pub type __u_quad_t = ::libc::c_ulong;
pub type __dev_t = ::libc::c_ulong;
pub type __uid_t = ::libc::c_uint;
pub type __gid_t = ::libc::c_uint;
pub type __ino_t = ::libc::c_ulong;
pub type __ino64_t = ::libc::c_ulong;
pub type __mode_t = ::libc::c_uint;
pub type __nlink_t = ::libc::c_ulong;
pub type __off_t = ::libc::c_long;
pub type __off64_t = ::libc::c_long;
pub type __pid_t = ::libc::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed1 {
    pub __val: [::libc::c_int; 2usize],
}
impl ::std::default::Default for Struct_Unnamed1 {
    fn default() -> Struct_Unnamed1 { unsafe { ::std::mem::zeroed() } }
}
pub type __fsid_t = Struct_Unnamed1;
pub type __clock_t = ::libc::c_long;
pub type __rlim_t = ::libc::c_ulong;
pub type __rlim64_t = ::libc::c_ulong;
pub type __id_t = ::libc::c_uint;
pub type __time_t = ::libc::c_long;
pub type __useconds_t = ::libc::c_uint;
pub type __suseconds_t = ::libc::c_long;
pub type __daddr_t = ::libc::c_int;
pub type __key_t = ::libc::c_int;
pub type __clockid_t = ::libc::c_int;
pub type __timer_t = *mut ::libc::c_void;
pub type __blksize_t = ::libc::c_long;
pub type __blkcnt_t = ::libc::c_long;
pub type __blkcnt64_t = ::libc::c_long;
pub type __fsblkcnt_t = ::libc::c_ulong;
pub type __fsblkcnt64_t = ::libc::c_ulong;
pub type __fsfilcnt_t = ::libc::c_ulong;
pub type __fsfilcnt64_t = ::libc::c_ulong;
pub type __fsword_t = ::libc::c_long;
pub type __ssize_t = ::libc::c_long;
pub type __syscall_slong_t = ::libc::c_long;
pub type __syscall_ulong_t = ::libc::c_ulong;
pub type __loff_t = __off64_t;
pub type __qaddr_t = *mut __quad_t;
pub type __caddr_t = *mut ::libc::c_char;
pub type __intptr_t = ::libc::c_long;
pub type __socklen_t = ::libc::c_uint;
pub type __sig_atomic_t = ::libc::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed2 {
    pub __val: [::libc::c_ulong; 16usize],
}
impl ::std::default::Default for Struct_Unnamed2 {
    fn default() -> Struct_Unnamed2 { unsafe { ::std::mem::zeroed() } }
}
pub type __sigset_t = Struct_Unnamed2;
pub type sigset_t = __sigset_t;
pub type time_t = __time_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
impl ::std::default::Default for Struct_timespec {
    fn default() -> Struct_timespec { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
impl ::std::default::Default for Struct_timeval {
    fn default() -> Struct_timeval { unsafe { ::std::mem::zeroed() } }
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::libc::c_long;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed3 {
    pub __fds_bits: [__fd_mask; 16usize],
}
impl ::std::default::Default for Struct_Unnamed3 {
    fn default() -> Struct_Unnamed3 { unsafe { ::std::mem::zeroed() } }
}
pub type fd_set = Struct_Unnamed3;
pub type fd_mask = __fd_mask;
pub type int8_t = ::libc::c_char;
pub type int16_t = ::libc::c_short;
pub type int32_t = ::libc::c_int;
pub type int64_t = ::libc::c_long;
pub type uint8_t = ::libc::c_uchar;
pub type uint16_t = ::libc::c_ushort;
pub type uint32_t = ::libc::c_uint;
pub type uint64_t = ::libc::c_ulong;
pub type int_least8_t = ::libc::c_char;
pub type int_least16_t = ::libc::c_short;
pub type int_least32_t = ::libc::c_int;
pub type int_least64_t = ::libc::c_long;
pub type uint_least8_t = ::libc::c_uchar;
pub type uint_least16_t = ::libc::c_ushort;
pub type uint_least32_t = ::libc::c_uint;
pub type uint_least64_t = ::libc::c_ulong;
pub type int_fast8_t = ::libc::c_char;
pub type int_fast16_t = ::libc::c_long;
pub type int_fast32_t = ::libc::c_long;
pub type int_fast64_t = ::libc::c_long;
pub type uint_fast8_t = ::libc::c_uchar;
pub type uint_fast16_t = ::libc::c_ulong;
pub type uint_fast32_t = ::libc::c_ulong;
pub type uint_fast64_t = ::libc::c_ulong;
pub type intptr_t = ::libc::c_long;
pub type uintptr_t = ::libc::c_ulong;
pub type intmax_t = ::libc::c_long;
pub type uintmax_t = ::libc::c_ulong;
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type ssize_t = __ssize_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type clockid_t = __clockid_t;
pub type timer_t = __timer_t;
pub type size_t = ::libc::c_ulong;
pub type ulong = ::libc::c_ulong;
pub type ushort = ::libc::c_ushort;
pub type _uint = ::libc::c_uint;
pub type u_int8_t = ::libc::c_uchar;
pub type u_int16_t = ::libc::c_ushort;
pub type u_int32_t = ::libc::c_uint;
pub type u_int64_t = ::libc::c_ulong;
pub type register_t = ::libc::c_long;
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
pub type pthread_t = ::libc::c_ulong;
#[repr(C)]
#[derive(Copy)]
pub struct Union_pthread_attr_t {
    pub _bindgen_data_: [u64; 7usize],
}
impl Union_pthread_attr_t {
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 56usize] {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_long {
        ::std::mem::transmute(&self._bindgen_data_)
    }
}
impl ::std::default::Default for Union_pthread_attr_t {
    fn default() -> Union_pthread_attr_t { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_attr_t = Union_pthread_attr_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct___pthread_internal_list {
    pub __prev: *mut Struct___pthread_internal_list,
    pub __next: *mut Struct___pthread_internal_list,
}
impl ::std::default::Default for Struct___pthread_internal_list {
    fn default() -> Struct___pthread_internal_list {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type __pthread_list_t = Struct___pthread_internal_list;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed4 {
    pub _bindgen_data_: [u64; 5usize],
}
impl Union_Unnamed4 {
    pub unsafe fn __data(&mut self) -> *mut Struct___pthread_mutex_s {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 40usize] {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_long {
        ::std::mem::transmute(&self._bindgen_data_)
    }
}
impl ::std::default::Default for Union_Unnamed4 {
    fn default() -> Union_Unnamed4 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___pthread_mutex_s {
    pub __lock: ::libc::c_int,
    pub __count: ::libc::c_uint,
    pub __owner: ::libc::c_int,
    pub __nusers: ::libc::c_uint,
    pub __kind: ::libc::c_int,
    pub __spins: ::libc::c_short,
    pub __elision: ::libc::c_short,
    pub __list: __pthread_list_t,
}
impl ::std::default::Default for Struct___pthread_mutex_s {
    fn default() -> Struct___pthread_mutex_s {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type pthread_mutex_t = Union_Unnamed4;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed5 {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_Unnamed5 {
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 4usize] {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_int {
        ::std::mem::transmute(&self._bindgen_data_)
    }
}
impl ::std::default::Default for Union_Unnamed5 {
    fn default() -> Union_Unnamed5 { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_mutexattr_t = Union_Unnamed5;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed6 {
    pub _bindgen_data_: [u64; 6usize],
}
impl Union_Unnamed6 {
    pub unsafe fn __data(&mut self) -> *mut Struct_Unnamed7 {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 48usize] {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_longlong {
        ::std::mem::transmute(&self._bindgen_data_)
    }
}
impl ::std::default::Default for Union_Unnamed6 {
    fn default() -> Union_Unnamed6 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed7 {
    pub __lock: ::libc::c_int,
    pub __futex: ::libc::c_uint,
    pub __total_seq: ::libc::c_ulonglong,
    pub __wakeup_seq: ::libc::c_ulonglong,
    pub __woken_seq: ::libc::c_ulonglong,
    pub __mutex: *mut ::libc::c_void,
    pub __nwaiters: ::libc::c_uint,
    pub __broadcast_seq: ::libc::c_uint,
}
impl ::std::default::Default for Struct_Unnamed7 {
    fn default() -> Struct_Unnamed7 { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_cond_t = Union_Unnamed6;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed8 {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_Unnamed8 {
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 4usize] {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_int {
        ::std::mem::transmute(&self._bindgen_data_)
    }
}
impl ::std::default::Default for Union_Unnamed8 {
    fn default() -> Union_Unnamed8 { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_condattr_t = Union_Unnamed8;
pub type pthread_key_t = ::libc::c_uint;
pub type pthread_once_t = ::libc::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed9 {
    pub _bindgen_data_: [u64; 7usize],
}
impl Union_Unnamed9 {
    pub unsafe fn __data(&mut self) -> *mut Struct_Unnamed10 {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 56usize] {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_long {
        ::std::mem::transmute(&self._bindgen_data_)
    }
}
impl ::std::default::Default for Union_Unnamed9 {
    fn default() -> Union_Unnamed9 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed10 {
    pub __lock: ::libc::c_int,
    pub __nr_readers: ::libc::c_uint,
    pub __readers_wakeup: ::libc::c_uint,
    pub __writer_wakeup: ::libc::c_uint,
    pub __nr_readers_queued: ::libc::c_uint,
    pub __nr_writers_queued: ::libc::c_uint,
    pub __writer: ::libc::c_int,
    pub __shared: ::libc::c_int,
    pub __pad1: ::libc::c_ulong,
    pub __pad2: ::libc::c_ulong,
    pub __flags: ::libc::c_uint,
}
impl ::std::default::Default for Struct_Unnamed10 {
    fn default() -> Struct_Unnamed10 { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_rwlock_t = Union_Unnamed9;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed11 {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union_Unnamed11 {
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 8usize] {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_long {
        ::std::mem::transmute(&self._bindgen_data_)
    }
}
impl ::std::default::Default for Union_Unnamed11 {
    fn default() -> Union_Unnamed11 { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_rwlockattr_t = Union_Unnamed11;
pub type pthread_spinlock_t = ::libc::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed12 {
    pub _bindgen_data_: [u64; 4usize],
}
impl Union_Unnamed12 {
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 32usize] {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_long {
        ::std::mem::transmute(&self._bindgen_data_)
    }
}
impl ::std::default::Default for Union_Unnamed12 {
    fn default() -> Union_Unnamed12 { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_barrier_t = Union_Unnamed12;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed13 {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_Unnamed13 {
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 4usize] {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_int {
        ::std::mem::transmute(&self._bindgen_data_)
    }
}
impl ::std::default::Default for Union_Unnamed13 {
    fn default() -> Union_Unnamed13 { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_barrierattr_t = Union_Unnamed13;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_iovec {
    pub iov_base: *mut ::libc::c_void,
    pub iov_len: size_t,
}
impl ::std::default::Default for Struct_iovec {
    fn default() -> Struct_iovec { unsafe { ::std::mem::zeroed() } }
}
pub type socklen_t = __socklen_t;
pub type Enum___socket_type = ::libc::c_uint;
pub const SOCK_STREAM: ::libc::c_uint = 1;
pub const SOCK_DGRAM: ::libc::c_uint = 2;
pub const SOCK_RAW: ::libc::c_uint = 3;
pub const SOCK_RDM: ::libc::c_uint = 4;
pub const SOCK_SEQPACKET: ::libc::c_uint = 5;
pub const SOCK_DCCP: ::libc::c_uint = 6;
pub const SOCK_PACKET: ::libc::c_uint = 10;
pub const SOCK_CLOEXEC: ::libc::c_uint = 524288;
pub const SOCK_NONBLOCK: ::libc::c_uint = 2048;
pub type sa_family_t = ::libc::c_ushort;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sockaddr {
    pub sa_family: sa_family_t,
    pub sa_data: [::libc::c_char; 14usize],
}
impl ::std::default::Default for Struct_sockaddr {
    fn default() -> Struct_sockaddr { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sockaddr_storage {
    pub ss_family: sa_family_t,
    pub __ss_align: ::libc::c_ulong,
    pub __ss_padding: [::libc::c_char; 112usize],
}
impl ::std::default::Default for Struct_sockaddr_storage {
    fn default() -> Struct_sockaddr_storage {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type Enum_Unnamed14 = ::libc::c_uint;
pub const MSG_OOB: ::libc::c_uint = 1;
pub const MSG_PEEK: ::libc::c_uint = 2;
pub const MSG_DONTROUTE: ::libc::c_uint = 4;
pub const MSG_CTRUNC: ::libc::c_uint = 8;
pub const MSG_PROXY: ::libc::c_uint = 16;
pub const MSG_TRUNC: ::libc::c_uint = 32;
pub const MSG_DONTWAIT: ::libc::c_uint = 64;
pub const MSG_EOR: ::libc::c_uint = 128;
pub const MSG_WAITALL: ::libc::c_uint = 256;
pub const MSG_FIN: ::libc::c_uint = 512;
pub const MSG_SYN: ::libc::c_uint = 1024;
pub const MSG_CONFIRM: ::libc::c_uint = 2048;
pub const MSG_RST: ::libc::c_uint = 4096;
pub const MSG_ERRQUEUE: ::libc::c_uint = 8192;
pub const MSG_NOSIGNAL: ::libc::c_uint = 16384;
pub const MSG_MORE: ::libc::c_uint = 32768;
pub const MSG_WAITFORONE: ::libc::c_uint = 65536;
pub const MSG_FASTOPEN: ::libc::c_uint = 536870912;
pub const MSG_CMSG_CLOEXEC: ::libc::c_uint = 1073741824;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_msghdr {
    pub msg_name: *mut ::libc::c_void,
    pub msg_namelen: socklen_t,
    pub msg_iov: *mut Struct_iovec,
    pub msg_iovlen: size_t,
    pub msg_control: *mut ::libc::c_void,
    pub msg_controllen: size_t,
    pub msg_flags: ::libc::c_int,
}
impl ::std::default::Default for Struct_msghdr {
    fn default() -> Struct_msghdr { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_cmsghdr {
    pub cmsg_len: size_t,
    pub cmsg_level: ::libc::c_int,
    pub cmsg_type: ::libc::c_int,
    pub __cmsg_data: *mut ::libc::c_uchar,
}
impl ::std::default::Default for Struct_cmsghdr {
    fn default() -> Struct_cmsghdr { unsafe { ::std::mem::zeroed() } }
}
pub type Enum_Unnamed15 = ::libc::c_uint;
pub const SCM_RIGHTS: ::libc::c_uint = 1;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_linger {
    pub l_onoff: ::libc::c_int,
    pub l_linger: ::libc::c_int,
}
impl ::std::default::Default for Struct_linger {
    fn default() -> Struct_linger { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_osockaddr {
    pub sa_family: ::libc::c_ushort,
    pub sa_data: [::libc::c_uchar; 14usize],
}
impl ::std::default::Default for Struct_osockaddr {
    fn default() -> Struct_osockaddr { unsafe { ::std::mem::zeroed() } }
}
pub type Enum_Unnamed16 = ::libc::c_uint;
pub const SHUT_RD: ::libc::c_uint = 0;
pub const SHUT_WR: ::libc::c_uint = 1;
pub const SHUT_RDWR: ::libc::c_uint = 2;
pub type in_addr_t = uint32_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_in_addr {
    pub s_addr: in_addr_t,
}
impl ::std::default::Default for Struct_in_addr {
    fn default() -> Struct_in_addr { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ip_opts {
    pub ip_dst: Struct_in_addr,
    pub ip_opts: [::libc::c_char; 40usize],
}
impl ::std::default::Default for Struct_ip_opts {
    fn default() -> Struct_ip_opts { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ip_mreqn {
    pub imr_multiaddr: Struct_in_addr,
    pub imr_address: Struct_in_addr,
    pub imr_ifindex: ::libc::c_int,
}
impl ::std::default::Default for Struct_ip_mreqn {
    fn default() -> Struct_ip_mreqn { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_in_pktinfo {
    pub ipi_ifindex: ::libc::c_int,
    pub ipi_spec_dst: Struct_in_addr,
    pub ipi_addr: Struct_in_addr,
}
impl ::std::default::Default for Struct_in_pktinfo {
    fn default() -> Struct_in_pktinfo { unsafe { ::std::mem::zeroed() } }
}
pub type Enum_Unnamed17 = ::libc::c_uint;
pub const IPPROTO_IP: ::libc::c_uint = 0;
pub const IPPROTO_ICMP: ::libc::c_uint = 1;
pub const IPPROTO_IGMP: ::libc::c_uint = 2;
pub const IPPROTO_IPIP: ::libc::c_uint = 4;
pub const IPPROTO_TCP: ::libc::c_uint = 6;
pub const IPPROTO_EGP: ::libc::c_uint = 8;
pub const IPPROTO_PUP: ::libc::c_uint = 12;
pub const IPPROTO_UDP: ::libc::c_uint = 17;
pub const IPPROTO_IDP: ::libc::c_uint = 22;
pub const IPPROTO_TP: ::libc::c_uint = 29;
pub const IPPROTO_DCCP: ::libc::c_uint = 33;
pub const IPPROTO_IPV6: ::libc::c_uint = 41;
pub const IPPROTO_RSVP: ::libc::c_uint = 46;
pub const IPPROTO_GRE: ::libc::c_uint = 47;
pub const IPPROTO_ESP: ::libc::c_uint = 50;
pub const IPPROTO_AH: ::libc::c_uint = 51;
pub const IPPROTO_MTP: ::libc::c_uint = 92;
pub const IPPROTO_BEETPH: ::libc::c_uint = 94;
pub const IPPROTO_ENCAP: ::libc::c_uint = 98;
pub const IPPROTO_PIM: ::libc::c_uint = 103;
pub const IPPROTO_COMP: ::libc::c_uint = 108;
pub const IPPROTO_SCTP: ::libc::c_uint = 132;
pub const IPPROTO_UDPLITE: ::libc::c_uint = 136;
pub const IPPROTO_RAW: ::libc::c_uint = 255;
pub const IPPROTO_MAX: ::libc::c_uint = 256;
pub type Enum_Unnamed18 = ::libc::c_uint;
pub const IPPROTO_HOPOPTS: ::libc::c_uint = 0;
pub const IPPROTO_ROUTING: ::libc::c_uint = 43;
pub const IPPROTO_FRAGMENT: ::libc::c_uint = 44;
pub const IPPROTO_ICMPV6: ::libc::c_uint = 58;
pub const IPPROTO_NONE: ::libc::c_uint = 59;
pub const IPPROTO_DSTOPTS: ::libc::c_uint = 60;
pub const IPPROTO_MH: ::libc::c_uint = 135;
pub type in_port_t = uint16_t;
pub type Enum_Unnamed19 = ::libc::c_uint;
pub const IPPORT_ECHO: ::libc::c_uint = 7;
pub const IPPORT_DISCARD: ::libc::c_uint = 9;
pub const IPPORT_SYSTAT: ::libc::c_uint = 11;
pub const IPPORT_DAYTIME: ::libc::c_uint = 13;
pub const IPPORT_NETSTAT: ::libc::c_uint = 15;
pub const IPPORT_FTP: ::libc::c_uint = 21;
pub const IPPORT_TELNET: ::libc::c_uint = 23;
pub const IPPORT_SMTP: ::libc::c_uint = 25;
pub const IPPORT_TIMESERVER: ::libc::c_uint = 37;
pub const IPPORT_NAMESERVER: ::libc::c_uint = 42;
pub const IPPORT_WHOIS: ::libc::c_uint = 43;
pub const IPPORT_MTP: ::libc::c_uint = 57;
pub const IPPORT_TFTP: ::libc::c_uint = 69;
pub const IPPORT_RJE: ::libc::c_uint = 77;
pub const IPPORT_FINGER: ::libc::c_uint = 79;
pub const IPPORT_TTYLINK: ::libc::c_uint = 87;
pub const IPPORT_SUPDUP: ::libc::c_uint = 95;
pub const IPPORT_EXECSERVER: ::libc::c_uint = 512;
pub const IPPORT_LOGINSERVER: ::libc::c_uint = 513;
pub const IPPORT_CMDSERVER: ::libc::c_uint = 514;
pub const IPPORT_EFSSERVER: ::libc::c_uint = 520;
pub const IPPORT_BIFFUDP: ::libc::c_uint = 512;
pub const IPPORT_WHOSERVER: ::libc::c_uint = 513;
pub const IPPORT_ROUTESERVER: ::libc::c_uint = 520;
pub const IPPORT_RESERVED: ::libc::c_uint = 1024;
pub const IPPORT_USERRESERVED: ::libc::c_uint = 5000;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_in6_addr {
    pub __in6_u: Union_Unnamed20,
}
impl ::std::default::Default for Struct_in6_addr {
    fn default() -> Struct_in6_addr { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed20 {
    pub _bindgen_data_: [u32; 4usize],
}
impl Union_Unnamed20 {
    pub unsafe fn __u6_addr8(&mut self) -> *mut [uint8_t; 16usize] {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn __u6_addr16(&mut self) -> *mut [uint16_t; 8usize] {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn __u6_addr32(&mut self) -> *mut [uint32_t; 4usize] {
        ::std::mem::transmute(&self._bindgen_data_)
    }
}
impl ::std::default::Default for Union_Unnamed20 {
    fn default() -> Union_Unnamed20 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sockaddr_in {
    pub sin_family: sa_family_t,
    pub sin_port: in_port_t,
    pub sin_addr: Struct_in_addr,
    pub sin_zero: [::libc::c_uchar; 8usize],
}
impl ::std::default::Default for Struct_sockaddr_in {
    fn default() -> Struct_sockaddr_in { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sockaddr_in6 {
    pub sin6_family: sa_family_t,
    pub sin6_port: in_port_t,
    pub sin6_flowinfo: uint32_t,
    pub sin6_addr: Struct_in6_addr,
    pub sin6_scope_id: uint32_t,
}
impl ::std::default::Default for Struct_sockaddr_in6 {
    fn default() -> Struct_sockaddr_in6 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ip_mreq {
    pub imr_multiaddr: Struct_in_addr,
    pub imr_interface: Struct_in_addr,
}
impl ::std::default::Default for Struct_ip_mreq {
    fn default() -> Struct_ip_mreq { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ip_mreq_source {
    pub imr_multiaddr: Struct_in_addr,
    pub imr_interface: Struct_in_addr,
    pub imr_sourceaddr: Struct_in_addr,
}
impl ::std::default::Default for Struct_ip_mreq_source {
    fn default() -> Struct_ip_mreq_source { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ipv6_mreq {
    pub ipv6mr_multiaddr: Struct_in6_addr,
    pub ipv6mr_interface: ::libc::c_uint,
}
impl ::std::default::Default for Struct_ipv6_mreq {
    fn default() -> Struct_ipv6_mreq { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_group_req {
    pub gr_interface: uint32_t,
    pub gr_group: Struct_sockaddr_storage,
}
impl ::std::default::Default for Struct_group_req {
    fn default() -> Struct_group_req { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_group_source_req {
    pub gsr_interface: uint32_t,
    pub gsr_group: Struct_sockaddr_storage,
    pub gsr_source: Struct_sockaddr_storage,
}
impl ::std::default::Default for Struct_group_source_req {
    fn default() -> Struct_group_source_req {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ip_msfilter {
    pub imsf_multiaddr: Struct_in_addr,
    pub imsf_interface: Struct_in_addr,
    pub imsf_fmode: uint32_t,
    pub imsf_numsrc: uint32_t,
    pub imsf_slist: [Struct_in_addr; 1usize],
}
impl ::std::default::Default for Struct_ip_msfilter {
    fn default() -> Struct_ip_msfilter { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_group_filter {
    pub gf_interface: uint32_t,
    pub gf_group: Struct_sockaddr_storage,
    pub gf_fmode: uint32_t,
    pub gf_numsrc: uint32_t,
    pub gf_slist: [Struct_sockaddr_storage; 1usize],
}
impl ::std::default::Default for Struct_group_filter {
    fn default() -> Struct_group_filter { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rpcent {
    pub r_name: *mut ::libc::c_char,
    pub r_aliases: *mut *mut ::libc::c_char,
    pub r_number: ::libc::c_int,
}
impl ::std::default::Default for Struct_rpcent {
    fn default() -> Struct_rpcent { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_netent {
    pub n_name: *mut ::libc::c_char,
    pub n_aliases: *mut *mut ::libc::c_char,
    pub n_addrtype: ::libc::c_int,
    pub n_net: uint32_t,
}
impl ::std::default::Default for Struct_netent {
    fn default() -> Struct_netent { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_hostent {
    pub h_name: *mut ::libc::c_char,
    pub h_aliases: *mut *mut ::libc::c_char,
    pub h_addrtype: ::libc::c_int,
    pub h_length: ::libc::c_int,
    pub h_addr_list: *mut *mut ::libc::c_char,
}
impl ::std::default::Default for Struct_hostent {
    fn default() -> Struct_hostent { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_servent {
    pub s_name: *mut ::libc::c_char,
    pub s_aliases: *mut *mut ::libc::c_char,
    pub s_port: ::libc::c_int,
    pub s_proto: *mut ::libc::c_char,
}
impl ::std::default::Default for Struct_servent {
    fn default() -> Struct_servent { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_protoent {
    pub p_name: *mut ::libc::c_char,
    pub p_aliases: *mut *mut ::libc::c_char,
    pub p_proto: ::libc::c_int,
}
impl ::std::default::Default for Struct_protoent {
    fn default() -> Struct_protoent { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_addrinfo {
    pub ai_flags: ::libc::c_int,
    pub ai_family: ::libc::c_int,
    pub ai_socktype: ::libc::c_int,
    pub ai_protocol: ::libc::c_int,
    pub ai_addrlen: socklen_t,
    pub ai_addr: *mut Struct_sockaddr,
    pub ai_canonname: *mut ::libc::c_char,
    pub ai_next: *mut Struct_addrinfo,
}
impl ::std::default::Default for Struct_addrinfo {
    fn default() -> Struct_addrinfo { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sockaddr_un {
    pub sun_family: sa_family_t,
    pub sun_path: [::libc::c_char; 108usize],
}
impl ::std::default::Default for Struct_sockaddr_un {
    fn default() -> Struct_sockaddr_un { unsafe { ::std::mem::zeroed() } }
}
pub enum Struct___locale_data { }
#[repr(C)]
#[derive(Copy)]
pub struct Struct___locale_struct {
    pub __locales: [*mut Struct___locale_data; 13usize],
    pub __ctype_b: *const ::libc::c_ushort,
    pub __ctype_tolower: *const ::libc::c_int,
    pub __ctype_toupper: *const ::libc::c_int,
    pub __names: [*const ::libc::c_char; 13usize],
}
impl ::std::default::Default for Struct___locale_struct {
    fn default() -> Struct___locale_struct { unsafe { ::std::mem::zeroed() } }
}
pub type __locale_t = *mut Struct___locale_struct;
pub type locale_t = __locale_t;
pub type tcp_seq = u_int32_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_tcphdr {
    pub _bindgen_data_1_: [u32; 5usize],
}
impl Struct_tcphdr {
    pub unsafe fn th_sport(&mut self) -> *mut u_int16_t {
        ::std::mem::transmute(&self._bindgen_data_1_)
    }
    pub unsafe fn th_dport(&mut self) -> *mut u_int16_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(2isize))
    }
    pub unsafe fn th_seq(&mut self) -> *mut tcp_seq {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(4isize))
    }
    pub unsafe fn th_ack(&mut self) -> *mut tcp_seq {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(8isize))
    }
    pub unsafe fn th_flags(&mut self) -> *mut u_int8_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(14isize))
    }
    pub unsafe fn th_win(&mut self) -> *mut u_int16_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(15isize))
    }
    pub unsafe fn th_sum(&mut self) -> *mut u_int16_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(17isize))
    }
    pub unsafe fn th_urp(&mut self) -> *mut u_int16_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(19isize))
    }
    pub unsafe fn source(&mut self) -> *mut u_int16_t {
        ::std::mem::transmute(&self._bindgen_data_1_)
    }
    pub unsafe fn dest(&mut self) -> *mut u_int16_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(2isize))
    }
    pub unsafe fn seq(&mut self) -> *mut u_int32_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(4isize))
    }
    pub unsafe fn ack_seq(&mut self) -> *mut u_int32_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(8isize))
    }
    pub unsafe fn window(&mut self) -> *mut u_int16_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(30isize))
    }
    pub unsafe fn check(&mut self) -> *mut u_int16_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(32isize))
    }
    pub unsafe fn urg_ptr(&mut self) -> *mut u_int16_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(34isize))
    }
}
impl ::std::default::Default for Struct_tcphdr {
    fn default() -> Struct_tcphdr { unsafe { ::std::mem::zeroed() } }
}
pub type Enum_Unnamed21 = ::libc::c_uint;
pub const TCP_ESTABLISHED: ::libc::c_uint = 1;
pub const TCP_SYN_SENT: ::libc::c_uint = 2;
pub const TCP_SYN_RECV: ::libc::c_uint = 3;
pub const TCP_FIN_WAIT1: ::libc::c_uint = 4;
pub const TCP_FIN_WAIT2: ::libc::c_uint = 5;
pub const TCP_TIME_WAIT: ::libc::c_uint = 6;
pub const TCP_CLOSE: ::libc::c_uint = 7;
pub const TCP_CLOSE_WAIT: ::libc::c_uint = 8;
pub const TCP_LAST_ACK: ::libc::c_uint = 9;
pub const TCP_LISTEN: ::libc::c_uint = 10;
pub const TCP_CLOSING: ::libc::c_uint = 11;
pub type Enum_tcp_ca_state = ::libc::c_uint;
pub const TCP_CA_Open: ::libc::c_uint = 0;
pub const TCP_CA_Disorder: ::libc::c_uint = 1;
pub const TCP_CA_CWR: ::libc::c_uint = 2;
pub const TCP_CA_Recovery: ::libc::c_uint = 3;
pub const TCP_CA_Loss: ::libc::c_uint = 4;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_tcp_info {
    pub tcpi_state: u_int8_t,
    pub tcpi_ca_state: u_int8_t,
    pub tcpi_retransmits: u_int8_t,
    pub tcpi_probes: u_int8_t,
    pub tcpi_backoff: u_int8_t,
    pub tcpi_options: u_int8_t,
    pub _bindgen_bitfield_1_: u_int8_t,
    pub _bindgen_bitfield_2_: u_int8_t,
    pub tcpi_rto: u_int32_t,
    pub tcpi_ato: u_int32_t,
    pub tcpi_snd_mss: u_int32_t,
    pub tcpi_rcv_mss: u_int32_t,
    pub tcpi_unacked: u_int32_t,
    pub tcpi_sacked: u_int32_t,
    pub tcpi_lost: u_int32_t,
    pub tcpi_retrans: u_int32_t,
    pub tcpi_fackets: u_int32_t,
    pub tcpi_last_data_sent: u_int32_t,
    pub tcpi_last_ack_sent: u_int32_t,
    pub tcpi_last_data_recv: u_int32_t,
    pub tcpi_last_ack_recv: u_int32_t,
    pub tcpi_pmtu: u_int32_t,
    pub tcpi_rcv_ssthresh: u_int32_t,
    pub tcpi_rtt: u_int32_t,
    pub tcpi_rttvar: u_int32_t,
    pub tcpi_snd_ssthresh: u_int32_t,
    pub tcpi_snd_cwnd: u_int32_t,
    pub tcpi_advmss: u_int32_t,
    pub tcpi_reordering: u_int32_t,
    pub tcpi_rcv_rtt: u_int32_t,
    pub tcpi_rcv_space: u_int32_t,
    pub tcpi_total_retrans: u_int32_t,
}
impl ::std::default::Default for Struct_tcp_info {
    fn default() -> Struct_tcp_info { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_tcp_md5sig {
    pub tcpm_addr: Struct_sockaddr_storage,
    pub __tcpm_pad1: u_int16_t,
    pub tcpm_keylen: u_int16_t,
    pub __tcpm_pad2: u_int32_t,
    pub tcpm_key: [u_int8_t; 80usize],
}
impl ::std::default::Default for Struct_tcp_md5sig {
    fn default() -> Struct_tcp_md5sig { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_tcp_repair_opt {
    pub opt_code: u_int32_t,
    pub opt_val: u_int32_t,
}
impl ::std::default::Default for Struct_tcp_repair_opt {
    fn default() -> Struct_tcp_repair_opt { unsafe { ::std::mem::zeroed() } }
}
pub type Enum_Unnamed22 = ::libc::c_uint;
pub const TCP_NO_QUEUE: ::libc::c_uint = 0;
pub const TCP_RECV_QUEUE: ::libc::c_uint = 1;
pub const TCP_SEND_QUEUE: ::libc::c_uint = 2;
pub const TCP_QUEUES_NR: ::libc::c_uint = 3;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_tcp_cookie_transactions {
    pub tcpct_flags: u_int16_t,
    pub __tcpct_pad1: u_int8_t,
    pub tcpct_cookie_desired: u_int8_t,
    pub tcpct_s_data_desired: u_int16_t,
    pub tcpct_used: u_int16_t,
    pub tcpct_value: [u_int8_t; 536usize],
}
impl ::std::default::Default for Struct_tcp_cookie_transactions {
    fn default() -> Struct_tcp_cookie_transactions {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_passwd {
    pub pw_name: *mut ::libc::c_char,
    pub pw_passwd: *mut ::libc::c_char,
    pub pw_uid: __uid_t,
    pub pw_gid: __gid_t,
    pub pw_gecos: *mut ::libc::c_char,
    pub pw_dir: *mut ::libc::c_char,
    pub pw_shell: *mut ::libc::c_char,
}
impl ::std::default::Default for Struct_passwd {
    fn default() -> Struct_passwd { unsafe { ::std::mem::zeroed() } }
}
pub type FILE = Struct__IO_FILE;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_winsize {
    pub ws_row: ::libc::c_ushort,
    pub ws_col: ::libc::c_ushort,
    pub ws_xpixel: ::libc::c_ushort,
    pub ws_ypixel: ::libc::c_ushort,
}
impl ::std::default::Default for Struct_winsize {
    fn default() -> Struct_winsize { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_termio {
    pub c_iflag: ::libc::c_ushort,
    pub c_oflag: ::libc::c_ushort,
    pub c_cflag: ::libc::c_ushort,
    pub c_lflag: ::libc::c_ushort,
    pub c_line: ::libc::c_uchar,
    pub c_cc: [::libc::c_uchar; 8usize],
}
impl ::std::default::Default for Struct_termio {
    fn default() -> Struct_termio { unsafe { ::std::mem::zeroed() } }
}
pub type sig_atomic_t = __sig_atomic_t;
#[repr(C)]
#[derive(Copy)]
pub struct Union_sigval {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union_sigval {
    pub unsafe fn sival_int(&mut self) -> *mut ::libc::c_int {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn sival_ptr(&mut self) -> *mut *mut ::libc::c_void {
        ::std::mem::transmute(&self._bindgen_data_)
    }
}
impl ::std::default::Default for Union_sigval {
    fn default() -> Union_sigval { unsafe { ::std::mem::zeroed() } }
}
pub type sigval_t = Union_sigval;
pub type __sigchld_clock_t = __clock_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed23 {
    pub si_signo: ::libc::c_int,
    pub si_errno: ::libc::c_int,
    pub si_code: ::libc::c_int,
    pub _sifields: Union_Unnamed24,
}
impl ::std::default::Default for Struct_Unnamed23 {
    fn default() -> Struct_Unnamed23 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed24 {
    pub _bindgen_data_: [u64; 14usize],
}
impl Union_Unnamed24 {
    pub unsafe fn _pad(&mut self) -> *mut [::libc::c_int; 28usize] {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn _kill(&mut self) -> *mut Struct_Unnamed25 {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn _timer(&mut self) -> *mut Struct_Unnamed26 {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn _rt(&mut self) -> *mut Struct_Unnamed27 {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn _sigchld(&mut self) -> *mut Struct_Unnamed28 {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn _sigfault(&mut self) -> *mut Struct_Unnamed29 {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn _sigpoll(&mut self) -> *mut Struct_Unnamed30 {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn _sigsys(&mut self) -> *mut Struct_Unnamed31 {
        ::std::mem::transmute(&self._bindgen_data_)
    }
}
impl ::std::default::Default for Union_Unnamed24 {
    fn default() -> Union_Unnamed24 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed25 {
    pub si_pid: __pid_t,
    pub si_uid: __uid_t,
}
impl ::std::default::Default for Struct_Unnamed25 {
    fn default() -> Struct_Unnamed25 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed26 {
    pub si_tid: ::libc::c_int,
    pub si_overrun: ::libc::c_int,
    pub si_sigval: sigval_t,
}
impl ::std::default::Default for Struct_Unnamed26 {
    fn default() -> Struct_Unnamed26 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed27 {
    pub si_pid: __pid_t,
    pub si_uid: __uid_t,
    pub si_sigval: sigval_t,
}
impl ::std::default::Default for Struct_Unnamed27 {
    fn default() -> Struct_Unnamed27 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed28 {
    pub si_pid: __pid_t,
    pub si_uid: __uid_t,
    pub si_status: ::libc::c_int,
    pub si_utime: __sigchld_clock_t,
    pub si_stime: __sigchld_clock_t,
}
impl ::std::default::Default for Struct_Unnamed28 {
    fn default() -> Struct_Unnamed28 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed29 {
    pub si_addr: *mut ::libc::c_void,
    pub si_addr_lsb: ::libc::c_short,
}
impl ::std::default::Default for Struct_Unnamed29 {
    fn default() -> Struct_Unnamed29 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed30 {
    pub si_band: ::libc::c_long,
    pub si_fd: ::libc::c_int,
}
impl ::std::default::Default for Struct_Unnamed30 {
    fn default() -> Struct_Unnamed30 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed31 {
    pub _call_addr: *mut ::libc::c_void,
    pub _syscall: ::libc::c_int,
    pub _arch: ::libc::c_uint,
}
impl ::std::default::Default for Struct_Unnamed31 {
    fn default() -> Struct_Unnamed31 { unsafe { ::std::mem::zeroed() } }
}
pub type siginfo_t = Struct_Unnamed23;
pub type Enum_Unnamed32 = ::libc::c_int;
pub const SI_ASYNCNL: ::libc::c_int = -60;
pub const SI_TKILL: ::libc::c_int = -6;
pub const SI_SIGIO: ::libc::c_int = -5;
pub const SI_ASYNCIO: ::libc::c_int = -4;
pub const SI_MESGQ: ::libc::c_int = -3;
pub const SI_TIMER: ::libc::c_int = -2;
pub const SI_QUEUE: ::libc::c_int = -1;
pub const SI_USER: ::libc::c_int = 0;
pub const SI_KERNEL: ::libc::c_int = 128;
pub type Enum_Unnamed33 = ::libc::c_uint;
pub const ILL_ILLOPC: ::libc::c_uint = 1;
pub const ILL_ILLOPN: ::libc::c_uint = 2;
pub const ILL_ILLADR: ::libc::c_uint = 3;
pub const ILL_ILLTRP: ::libc::c_uint = 4;
pub const ILL_PRVOPC: ::libc::c_uint = 5;
pub const ILL_PRVREG: ::libc::c_uint = 6;
pub const ILL_COPROC: ::libc::c_uint = 7;
pub const ILL_BADSTK: ::libc::c_uint = 8;
pub type Enum_Unnamed34 = ::libc::c_uint;
pub const FPE_INTDIV: ::libc::c_uint = 1;
pub const FPE_INTOVF: ::libc::c_uint = 2;
pub const FPE_FLTDIV: ::libc::c_uint = 3;
pub const FPE_FLTOVF: ::libc::c_uint = 4;
pub const FPE_FLTUND: ::libc::c_uint = 5;
pub const FPE_FLTRES: ::libc::c_uint = 6;
pub const FPE_FLTINV: ::libc::c_uint = 7;
pub const FPE_FLTSUB: ::libc::c_uint = 8;
pub type Enum_Unnamed35 = ::libc::c_uint;
pub const SEGV_MAPERR: ::libc::c_uint = 1;
pub const SEGV_ACCERR: ::libc::c_uint = 2;
pub type Enum_Unnamed36 = ::libc::c_uint;
pub const BUS_ADRALN: ::libc::c_uint = 1;
pub const BUS_ADRERR: ::libc::c_uint = 2;
pub const BUS_OBJERR: ::libc::c_uint = 3;
pub const BUS_MCEERR_AR: ::libc::c_uint = 4;
pub const BUS_MCEERR_AO: ::libc::c_uint = 5;
pub type Enum_Unnamed37 = ::libc::c_uint;
pub const TRAP_BRKPT: ::libc::c_uint = 1;
pub const TRAP_TRACE: ::libc::c_uint = 2;
pub type Enum_Unnamed38 = ::libc::c_uint;
pub const CLD_EXITED: ::libc::c_uint = 1;
pub const CLD_KILLED: ::libc::c_uint = 2;
pub const CLD_DUMPED: ::libc::c_uint = 3;
pub const CLD_TRAPPED: ::libc::c_uint = 4;
pub const CLD_STOPPED: ::libc::c_uint = 5;
pub const CLD_CONTINUED: ::libc::c_uint = 6;
pub type Enum_Unnamed39 = ::libc::c_uint;
pub const POLL_IN: ::libc::c_uint = 1;
pub const POLL_OUT: ::libc::c_uint = 2;
pub const POLL_MSG: ::libc::c_uint = 3;
pub const POLL_ERR: ::libc::c_uint = 4;
pub const POLL_PRI: ::libc::c_uint = 5;
pub const POLL_HUP: ::libc::c_uint = 6;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sigevent {
    pub sigev_value: sigval_t,
    pub sigev_signo: ::libc::c_int,
    pub sigev_notify: ::libc::c_int,
    pub _sigev_un: Union_Unnamed40,
}
impl ::std::default::Default for Struct_sigevent {
    fn default() -> Struct_sigevent { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed40 {
    pub _bindgen_data_: [u64; 6usize],
}
impl Union_Unnamed40 {
    pub unsafe fn _pad(&mut self) -> *mut [::libc::c_int; 12usize] {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn _tid(&mut self) -> *mut __pid_t {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn _sigev_thread(&mut self) -> *mut Struct_Unnamed41 {
        ::std::mem::transmute(&self._bindgen_data_)
    }
}
impl ::std::default::Default for Union_Unnamed40 {
    fn default() -> Union_Unnamed40 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed41 {
    pub _function: ::std::option::Option<extern "C" fn(arg1: sigval_t) -> ()>,
    pub _attribute: *mut pthread_attr_t,
}
impl ::std::default::Default for Struct_Unnamed41 {
    fn default() -> Struct_Unnamed41 { unsafe { ::std::mem::zeroed() } }
}
pub type sigevent_t = Struct_sigevent;
pub type Enum_Unnamed42 = ::libc::c_uint;
pub const SIGEV_SIGNAL: ::libc::c_uint = 0;
pub const SIGEV_NONE: ::libc::c_uint = 1;
pub const SIGEV_THREAD: ::libc::c_uint = 2;
pub const SIGEV_THREAD_ID: ::libc::c_uint = 4;
pub type __sighandler_t =
    ::std::option::Option<extern "C" fn(arg1: ::libc::c_int) -> ()>;
pub type sig_t = __sighandler_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sigaction {
    pub __sigaction_handler: Union_Unnamed43,
    pub sa_mask: __sigset_t,
    pub sa_flags: ::libc::c_int,
    pub sa_restorer: ::std::option::Option<extern "C" fn() -> ()>,
}
impl ::std::default::Default for Struct_sigaction {
    fn default() -> Struct_sigaction { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed43 {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union_Unnamed43 {
    pub unsafe fn sa_handler(&mut self) -> *mut __sighandler_t {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn sa_sigaction(&mut self)
     ->
         *mut ::std::option::Option<extern "C" fn
                                        (arg1: ::libc::c_int,
                                         arg2: *mut siginfo_t,
                                         arg3: *mut ::libc::c_void) -> ()> {
        ::std::mem::transmute(&self._bindgen_data_)
    }
}
impl ::std::default::Default for Union_Unnamed43 {
    fn default() -> Union_Unnamed43 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sigvec {
    pub sv_handler: __sighandler_t,
    pub sv_mask: ::libc::c_int,
    pub sv_flags: ::libc::c_int,
}
impl ::std::default::Default for Struct_sigvec {
    fn default() -> Struct_sigvec { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__fpx_sw_bytes {
    pub magic1: __uint32_t,
    pub extended_size: __uint32_t,
    pub xstate_bv: __uint64_t,
    pub xstate_size: __uint32_t,
    pub padding: [__uint32_t; 7usize],
}
impl ::std::default::Default for Struct__fpx_sw_bytes {
    fn default() -> Struct__fpx_sw_bytes { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__fpreg {
    pub significand: [::libc::c_ushort; 4usize],
    pub exponent: ::libc::c_ushort,
}
impl ::std::default::Default for Struct__fpreg {
    fn default() -> Struct__fpreg { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__fpxreg {
    pub significand: [::libc::c_ushort; 4usize],
    pub exponent: ::libc::c_ushort,
    pub padding: [::libc::c_ushort; 3usize],
}
impl ::std::default::Default for Struct__fpxreg {
    fn default() -> Struct__fpxreg { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__xmmreg {
    pub element: [__uint32_t; 4usize],
}
impl ::std::default::Default for Struct__xmmreg {
    fn default() -> Struct__xmmreg { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__fpstate {
    pub cwd: __uint16_t,
    pub swd: __uint16_t,
    pub ftw: __uint16_t,
    pub fop: __uint16_t,
    pub rip: __uint64_t,
    pub rdp: __uint64_t,
    pub mxcsr: __uint32_t,
    pub mxcr_mask: __uint32_t,
    pub _st: [Struct__fpxreg; 8usize],
    pub _xmm: [Struct__xmmreg; 16usize],
    pub padding: [__uint32_t; 24usize],
}
impl ::std::default::Default for Struct__fpstate {
    fn default() -> Struct__fpstate { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sigcontext {
    pub r8: __uint64_t,
    pub r9: __uint64_t,
    pub r10: __uint64_t,
    pub r11: __uint64_t,
    pub r12: __uint64_t,
    pub r13: __uint64_t,
    pub r14: __uint64_t,
    pub r15: __uint64_t,
    pub rdi: __uint64_t,
    pub rsi: __uint64_t,
    pub rbp: __uint64_t,
    pub rbx: __uint64_t,
    pub rdx: __uint64_t,
    pub rax: __uint64_t,
    pub rcx: __uint64_t,
    pub rsp: __uint64_t,
    pub rip: __uint64_t,
    pub eflags: __uint64_t,
    pub cs: ::libc::c_ushort,
    pub gs: ::libc::c_ushort,
    pub fs: ::libc::c_ushort,
    pub __pad0: ::libc::c_ushort,
    pub err: __uint64_t,
    pub trapno: __uint64_t,
    pub oldmask: __uint64_t,
    pub cr2: __uint64_t,
    pub _bindgen_data_1_: [u64; 1usize],
    pub __reserved1: [__uint64_t; 8usize],
}
impl Struct_sigcontext {
    pub unsafe fn fpstate(&mut self) -> *mut *mut Struct__fpstate {
        ::std::mem::transmute(&self._bindgen_data_1_)
    }
    pub unsafe fn __fpstate_word(&mut self) -> *mut __uint64_t {
        ::std::mem::transmute(&self._bindgen_data_1_)
    }
}
impl ::std::default::Default for Struct_sigcontext {
    fn default() -> Struct_sigcontext { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__xsave_hdr {
    pub xstate_bv: __uint64_t,
    pub reserved1: [__uint64_t; 2usize],
    pub reserved2: [__uint64_t; 5usize],
}
impl ::std::default::Default for Struct__xsave_hdr {
    fn default() -> Struct__xsave_hdr { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__ymmh_state {
    pub ymmh_space: [__uint32_t; 64usize],
}
impl ::std::default::Default for Struct__ymmh_state {
    fn default() -> Struct__ymmh_state { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__xstate {
    pub fpstate: Struct__fpstate,
    pub xstate_hdr: Struct__xsave_hdr,
    pub ymmh: Struct__ymmh_state,
}
impl ::std::default::Default for Struct__xstate {
    fn default() -> Struct__xstate { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sigstack {
    pub ss_sp: *mut ::libc::c_void,
    pub ss_onstack: ::libc::c_int,
}
impl ::std::default::Default for Struct_sigstack {
    fn default() -> Struct_sigstack { unsafe { ::std::mem::zeroed() } }
}
pub type Enum_Unnamed44 = ::libc::c_uint;
pub const SS_ONSTACK: ::libc::c_uint = 1;
pub const SS_DISABLE: ::libc::c_uint = 2;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sigaltstack {
    pub ss_sp: *mut ::libc::c_void,
    pub ss_flags: ::libc::c_int,
    pub ss_size: size_t,
}
impl ::std::default::Default for Struct_sigaltstack {
    fn default() -> Struct_sigaltstack { unsafe { ::std::mem::zeroed() } }
}
pub type stack_t = Struct_sigaltstack;
pub type greg_t = ::libc::c_longlong;
pub type gregset_t = [greg_t; 23usize];
#[repr(C)]
#[derive(Copy)]
pub struct Struct__libc_fpxreg {
    pub significand: [::libc::c_ushort; 4usize],
    pub exponent: ::libc::c_ushort,
    pub padding: [::libc::c_ushort; 3usize],
}
impl ::std::default::Default for Struct__libc_fpxreg {
    fn default() -> Struct__libc_fpxreg { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__libc_xmmreg {
    pub element: [__uint32_t; 4usize],
}
impl ::std::default::Default for Struct__libc_xmmreg {
    fn default() -> Struct__libc_xmmreg { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__libc_fpstate {
    pub cwd: __uint16_t,
    pub swd: __uint16_t,
    pub ftw: __uint16_t,
    pub fop: __uint16_t,
    pub rip: __uint64_t,
    pub rdp: __uint64_t,
    pub mxcsr: __uint32_t,
    pub mxcr_mask: __uint32_t,
    pub _st: [Struct__libc_fpxreg; 8usize],
    pub _xmm: [Struct__libc_xmmreg; 16usize],
    pub padding: [__uint32_t; 24usize],
}
impl ::std::default::Default for Struct__libc_fpstate {
    fn default() -> Struct__libc_fpstate { unsafe { ::std::mem::zeroed() } }
}
pub type fpregset_t = *mut Struct__libc_fpstate;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed45 {
    pub gregs: gregset_t,
    pub fpregs: fpregset_t,
    pub __reserved1: [::libc::c_ulonglong; 8usize],
}
impl ::std::default::Default for Struct_Unnamed45 {
    fn default() -> Struct_Unnamed45 { unsafe { ::std::mem::zeroed() } }
}
pub type mcontext_t = Struct_Unnamed45;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ucontext {
    pub uc_flags: ::libc::c_ulong,
    pub uc_link: *mut Struct_ucontext,
    pub uc_stack: stack_t,
    pub uc_mcontext: mcontext_t,
    pub uc_sigmask: __sigset_t,
    pub __fpregs_mem: Struct__libc_fpstate,
}
impl ::std::default::Default for Struct_ucontext {
    fn default() -> Struct_ucontext { unsafe { ::std::mem::zeroed() } }
}
pub type ucontext_t = Struct_ucontext;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed46 {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union_Unnamed46 {
    pub unsafe fn __uptr(&mut self) -> *mut *mut Union_wait {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn __iptr(&mut self) -> *mut *mut ::libc::c_int {
        ::std::mem::transmute(&self._bindgen_data_)
    }
}
impl ::std::default::Default for Union_Unnamed46 {
    fn default() -> Union_Unnamed46 { unsafe { ::std::mem::zeroed() } }
}
pub type __WAIT_STATUS = Union_Unnamed46;
#[repr(C)]
#[derive(Copy)]
pub struct Union_wait {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_wait {
    pub unsafe fn w_status(&mut self) -> *mut ::libc::c_int {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn __wait_terminated(&mut self) -> *mut Struct_Unnamed47 {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn __wait_stopped(&mut self) -> *mut Struct_Unnamed48 {
        ::std::mem::transmute(&self._bindgen_data_)
    }
}
impl ::std::default::Default for Union_wait {
    fn default() -> Union_wait { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed47 {
    pub _bindgen_bitfield_1_: ::libc::c_uint,
}
impl ::std::default::Default for Struct_Unnamed47 {
    fn default() -> Struct_Unnamed47 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed48 {
    pub _bindgen_bitfield_1_: ::libc::c_uint,
}
impl ::std::default::Default for Struct_Unnamed48 {
    fn default() -> Struct_Unnamed48 { unsafe { ::std::mem::zeroed() } }
}
pub type Enum_Unnamed49 = ::libc::c_uint;
pub const P_ALL: ::libc::c_uint = 0;
pub const P_PID: ::libc::c_uint = 1;
pub const P_PGID: ::libc::c_uint = 2;
pub type idtype_t = Enum_Unnamed49;
pub enum Struct_rusage { }
#[repr(C)]
#[derive(Copy)]
pub struct Struct_group {
    pub gr_name: *mut ::libc::c_char,
    pub gr_passwd: *mut ::libc::c_char,
    pub gr_gid: __gid_t,
    pub gr_mem: *mut *mut ::libc::c_char,
}
impl ::std::default::Default for Struct_group {
    fn default() -> Struct_group { unsafe { ::std::mem::zeroed() } }
}
pub type __FILE = Struct__IO_FILE;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed50 {
    pub __count: ::libc::c_int,
    pub __value: Union_Unnamed51,
}
impl ::std::default::Default for Struct_Unnamed50 {
    fn default() -> Struct_Unnamed50 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed51 {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_Unnamed51 {
    pub unsafe fn __wch(&mut self) -> *mut ::libc::c_uint {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn __wchb(&mut self) -> *mut [::libc::c_char; 4usize] {
        ::std::mem::transmute(&self._bindgen_data_)
    }
}
impl ::std::default::Default for Union_Unnamed51 {
    fn default() -> Union_Unnamed51 { unsafe { ::std::mem::zeroed() } }
}
pub type __mbstate_t = Struct_Unnamed50;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed52 {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
impl ::std::default::Default for Struct_Unnamed52 {
    fn default() -> Struct_Unnamed52 { unsafe { ::std::mem::zeroed() } }
}
pub type _G_fpos_t = Struct_Unnamed52;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed53 {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
impl ::std::default::Default for Struct_Unnamed53 {
    fn default() -> Struct_Unnamed53 { unsafe { ::std::mem::zeroed() } }
}
pub type _G_fpos64_t = Struct_Unnamed53;
pub type va_list = __gnuc_va_list;
pub type __gnuc_va_list = __builtin_va_list;
pub enum Struct__IO_jump_t { }
pub type _IO_lock_t = ::libc::c_void;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__IO_marker {
    pub _next: *mut Struct__IO_marker,
    pub _sbuf: *mut Struct__IO_FILE,
    pub _pos: ::libc::c_int,
}
impl ::std::default::Default for Struct__IO_marker {
    fn default() -> Struct__IO_marker { unsafe { ::std::mem::zeroed() } }
}
pub type Enum___codecvt_result = ::libc::c_uint;
pub const __codecvt_ok: ::libc::c_uint = 0;
pub const __codecvt_partial: ::libc::c_uint = 1;
pub const __codecvt_error: ::libc::c_uint = 2;
pub const __codecvt_noconv: ::libc::c_uint = 3;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__IO_FILE {
    pub _flags: ::libc::c_int,
    pub _IO_read_ptr: *mut ::libc::c_char,
    pub _IO_read_end: *mut ::libc::c_char,
    pub _IO_read_base: *mut ::libc::c_char,
    pub _IO_write_base: *mut ::libc::c_char,
    pub _IO_write_ptr: *mut ::libc::c_char,
    pub _IO_write_end: *mut ::libc::c_char,
    pub _IO_buf_base: *mut ::libc::c_char,
    pub _IO_buf_end: *mut ::libc::c_char,
    pub _IO_save_base: *mut ::libc::c_char,
    pub _IO_backup_base: *mut ::libc::c_char,
    pub _IO_save_end: *mut ::libc::c_char,
    pub _markers: *mut Struct__IO_marker,
    pub _chain: *mut Struct__IO_FILE,
    pub _fileno: ::libc::c_int,
    pub _flags2: ::libc::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::libc::c_ushort,
    pub _vtable_offset: ::libc::c_char,
    pub _shortbuf: [::libc::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub __pad1: *mut ::libc::c_void,
    pub __pad2: *mut ::libc::c_void,
    pub __pad3: *mut ::libc::c_void,
    pub __pad4: *mut ::libc::c_void,
    pub __pad5: size_t,
    pub _mode: ::libc::c_int,
    pub _unused2: [::libc::c_char; 20usize],
}
impl ::std::default::Default for Struct__IO_FILE {
    fn default() -> Struct__IO_FILE { unsafe { ::std::mem::zeroed() } }
}
pub type _IO_FILE = Struct__IO_FILE;
pub enum Struct__IO_FILE_plus { }
pub type __io_read_fn =
    extern "C" fn
        (__cookie: *mut ::libc::c_void, __buf: *mut ::libc::c_char,
         __nbytes: size_t) -> __ssize_t;
pub type __io_write_fn =
    extern "C" fn
        (__cookie: *mut ::libc::c_void, __buf: *const ::libc::c_char,
         __n: size_t) -> __ssize_t;
pub type __io_seek_fn =
    extern "C" fn
        (__cookie: *mut ::libc::c_void, __pos: *mut __off64_t,
         __w: ::libc::c_int) -> ::libc::c_int;
pub type __io_close_fn =
    extern "C" fn(__cookie: *mut ::libc::c_void) -> ::libc::c_int;
pub type fpos_t = _G_fpos_t;
pub type wchar_t = ::libc::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed54 {
    pub quot: ::libc::c_int,
    pub rem: ::libc::c_int,
}
impl ::std::default::Default for Struct_Unnamed54 {
    fn default() -> Struct_Unnamed54 { unsafe { ::std::mem::zeroed() } }
}
pub type div_t = Struct_Unnamed54;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed55 {
    pub quot: ::libc::c_long,
    pub rem: ::libc::c_long,
}
impl ::std::default::Default for Struct_Unnamed55 {
    fn default() -> Struct_Unnamed55 { unsafe { ::std::mem::zeroed() } }
}
pub type ldiv_t = Struct_Unnamed55;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed56 {
    pub quot: ::libc::c_longlong,
    pub rem: ::libc::c_longlong,
}
impl ::std::default::Default for Struct_Unnamed56 {
    fn default() -> Struct_Unnamed56 { unsafe { ::std::mem::zeroed() } }
}
pub type lldiv_t = Struct_Unnamed56;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_random_data {
    pub fptr: *mut int32_t,
    pub rptr: *mut int32_t,
    pub state: *mut int32_t,
    pub rand_type: ::libc::c_int,
    pub rand_deg: ::libc::c_int,
    pub rand_sep: ::libc::c_int,
    pub end_ptr: *mut int32_t,
}
impl ::std::default::Default for Struct_random_data {
    fn default() -> Struct_random_data { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_drand48_data {
    pub __x: [::libc::c_ushort; 3usize],
    pub __old_x: [::libc::c_ushort; 3usize],
    pub __c: ::libc::c_ushort,
    pub __init: ::libc::c_ushort,
    pub __a: ::libc::c_ulonglong,
}
impl ::std::default::Default for Struct_drand48_data {
    fn default() -> Struct_drand48_data { unsafe { ::std::mem::zeroed() } }
}
pub type __compar_fn_t =
    ::std::option::Option<extern "C" fn
                              (arg1: *const ::libc::c_void,
                               arg2: *const ::libc::c_void) -> ::libc::c_int>;
pub type useconds_t = __useconds_t;
pub type Enum_Unnamed57 = ::libc::c_uint;
pub const _PC_LINK_MAX: ::libc::c_uint = 0;
pub const _PC_MAX_CANON: ::libc::c_uint = 1;
pub const _PC_MAX_INPUT: ::libc::c_uint = 2;
pub const _PC_NAME_MAX: ::libc::c_uint = 3;
pub const _PC_PATH_MAX: ::libc::c_uint = 4;
pub const _PC_PIPE_BUF: ::libc::c_uint = 5;
pub const _PC_CHOWN_RESTRICTED: ::libc::c_uint = 6;
pub const _PC_NO_TRUNC: ::libc::c_uint = 7;
pub const _PC_VDISABLE: ::libc::c_uint = 8;
pub const _PC_SYNC_IO: ::libc::c_uint = 9;
pub const _PC_ASYNC_IO: ::libc::c_uint = 10;
pub const _PC_PRIO_IO: ::libc::c_uint = 11;
pub const _PC_SOCK_MAXBUF: ::libc::c_uint = 12;
pub const _PC_FILESIZEBITS: ::libc::c_uint = 13;
pub const _PC_REC_INCR_XFER_SIZE: ::libc::c_uint = 14;
pub const _PC_REC_MAX_XFER_SIZE: ::libc::c_uint = 15;
pub const _PC_REC_MIN_XFER_SIZE: ::libc::c_uint = 16;
pub const _PC_REC_XFER_ALIGN: ::libc::c_uint = 17;
pub const _PC_ALLOC_SIZE_MIN: ::libc::c_uint = 18;
pub const _PC_SYMLINK_MAX: ::libc::c_uint = 19;
pub const _PC_2_SYMLINKS: ::libc::c_uint = 20;
pub type Enum_Unnamed58 = ::libc::c_uint;
pub const _SC_ARG_MAX: ::libc::c_uint = 0;
pub const _SC_CHILD_MAX: ::libc::c_uint = 1;
pub const _SC_CLK_TCK: ::libc::c_uint = 2;
pub const _SC_NGROUPS_MAX: ::libc::c_uint = 3;
pub const _SC_OPEN_MAX: ::libc::c_uint = 4;
pub const _SC_STREAM_MAX: ::libc::c_uint = 5;
pub const _SC_TZNAME_MAX: ::libc::c_uint = 6;
pub const _SC_JOB_CONTROL: ::libc::c_uint = 7;
pub const _SC_SAVED_IDS: ::libc::c_uint = 8;
pub const _SC_REALTIME_SIGNALS: ::libc::c_uint = 9;
pub const _SC_PRIORITY_SCHEDULING: ::libc::c_uint = 10;
pub const _SC_TIMERS: ::libc::c_uint = 11;
pub const _SC_ASYNCHRONOUS_IO: ::libc::c_uint = 12;
pub const _SC_PRIORITIZED_IO: ::libc::c_uint = 13;
pub const _SC_SYNCHRONIZED_IO: ::libc::c_uint = 14;
pub const _SC_FSYNC: ::libc::c_uint = 15;
pub const _SC_MAPPED_FILES: ::libc::c_uint = 16;
pub const _SC_MEMLOCK: ::libc::c_uint = 17;
pub const _SC_MEMLOCK_RANGE: ::libc::c_uint = 18;
pub const _SC_MEMORY_PROTECTION: ::libc::c_uint = 19;
pub const _SC_MESSAGE_PASSING: ::libc::c_uint = 20;
pub const _SC_SEMAPHORES: ::libc::c_uint = 21;
pub const _SC_SHARED_MEMORY_OBJECTS: ::libc::c_uint = 22;
pub const _SC_AIO_LISTIO_MAX: ::libc::c_uint = 23;
pub const _SC_AIO_MAX: ::libc::c_uint = 24;
pub const _SC_AIO_PRIO_DELTA_MAX: ::libc::c_uint = 25;
pub const _SC_DELAYTIMER_MAX: ::libc::c_uint = 26;
pub const _SC_MQ_OPEN_MAX: ::libc::c_uint = 27;
pub const _SC_MQ_PRIO_MAX: ::libc::c_uint = 28;
pub const _SC_VERSION: ::libc::c_uint = 29;
pub const _SC_PAGESIZE: ::libc::c_uint = 30;
pub const _SC_RTSIG_MAX: ::libc::c_uint = 31;
pub const _SC_SEM_NSEMS_MAX: ::libc::c_uint = 32;
pub const _SC_SEM_VALUE_MAX: ::libc::c_uint = 33;
pub const _SC_SIGQUEUE_MAX: ::libc::c_uint = 34;
pub const _SC_TIMER_MAX: ::libc::c_uint = 35;
pub const _SC_BC_BASE_MAX: ::libc::c_uint = 36;
pub const _SC_BC_DIM_MAX: ::libc::c_uint = 37;
pub const _SC_BC_SCALE_MAX: ::libc::c_uint = 38;
pub const _SC_BC_STRING_MAX: ::libc::c_uint = 39;
pub const _SC_COLL_WEIGHTS_MAX: ::libc::c_uint = 40;
pub const _SC_EQUIV_CLASS_MAX: ::libc::c_uint = 41;
pub const _SC_EXPR_NEST_MAX: ::libc::c_uint = 42;
pub const _SC_LINE_MAX: ::libc::c_uint = 43;
pub const _SC_RE_DUP_MAX: ::libc::c_uint = 44;
pub const _SC_CHARCLASS_NAME_MAX: ::libc::c_uint = 45;
pub const _SC_2_VERSION: ::libc::c_uint = 46;
pub const _SC_2_C_BIND: ::libc::c_uint = 47;
pub const _SC_2_C_DEV: ::libc::c_uint = 48;
pub const _SC_2_FORT_DEV: ::libc::c_uint = 49;
pub const _SC_2_FORT_RUN: ::libc::c_uint = 50;
pub const _SC_2_SW_DEV: ::libc::c_uint = 51;
pub const _SC_2_LOCALEDEF: ::libc::c_uint = 52;
pub const _SC_PII: ::libc::c_uint = 53;
pub const _SC_PII_XTI: ::libc::c_uint = 54;
pub const _SC_PII_SOCKET: ::libc::c_uint = 55;
pub const _SC_PII_INTERNET: ::libc::c_uint = 56;
pub const _SC_PII_OSI: ::libc::c_uint = 57;
pub const _SC_POLL: ::libc::c_uint = 58;
pub const _SC_SELECT: ::libc::c_uint = 59;
pub const _SC_UIO_MAXIOV: ::libc::c_uint = 60;
pub const _SC_IOV_MAX: ::libc::c_uint = 60;
pub const _SC_PII_INTERNET_STREAM: ::libc::c_uint = 61;
pub const _SC_PII_INTERNET_DGRAM: ::libc::c_uint = 62;
pub const _SC_PII_OSI_COTS: ::libc::c_uint = 63;
pub const _SC_PII_OSI_CLTS: ::libc::c_uint = 64;
pub const _SC_PII_OSI_M: ::libc::c_uint = 65;
pub const _SC_T_IOV_MAX: ::libc::c_uint = 66;
pub const _SC_THREADS: ::libc::c_uint = 67;
pub const _SC_THREAD_SAFE_FUNCTIONS: ::libc::c_uint = 68;
pub const _SC_GETGR_R_SIZE_MAX: ::libc::c_uint = 69;
pub const _SC_GETPW_R_SIZE_MAX: ::libc::c_uint = 70;
pub const _SC_LOGIN_NAME_MAX: ::libc::c_uint = 71;
pub const _SC_TTY_NAME_MAX: ::libc::c_uint = 72;
pub const _SC_THREAD_DESTRUCTOR_ITERATIONS: ::libc::c_uint = 73;
pub const _SC_THREAD_KEYS_MAX: ::libc::c_uint = 74;
pub const _SC_THREAD_STACK_MIN: ::libc::c_uint = 75;
pub const _SC_THREAD_THREADS_MAX: ::libc::c_uint = 76;
pub const _SC_THREAD_ATTR_STACKADDR: ::libc::c_uint = 77;
pub const _SC_THREAD_ATTR_STACKSIZE: ::libc::c_uint = 78;
pub const _SC_THREAD_PRIORITY_SCHEDULING: ::libc::c_uint = 79;
pub const _SC_THREAD_PRIO_INHERIT: ::libc::c_uint = 80;
pub const _SC_THREAD_PRIO_PROTECT: ::libc::c_uint = 81;
pub const _SC_THREAD_PROCESS_SHARED: ::libc::c_uint = 82;
pub const _SC_NPROCESSORS_CONF: ::libc::c_uint = 83;
pub const _SC_NPROCESSORS_ONLN: ::libc::c_uint = 84;
pub const _SC_PHYS_PAGES: ::libc::c_uint = 85;
pub const _SC_AVPHYS_PAGES: ::libc::c_uint = 86;
pub const _SC_ATEXIT_MAX: ::libc::c_uint = 87;
pub const _SC_PASS_MAX: ::libc::c_uint = 88;
pub const _SC_XOPEN_VERSION: ::libc::c_uint = 89;
pub const _SC_XOPEN_XCU_VERSION: ::libc::c_uint = 90;
pub const _SC_XOPEN_UNIX: ::libc::c_uint = 91;
pub const _SC_XOPEN_CRYPT: ::libc::c_uint = 92;
pub const _SC_XOPEN_ENH_I18N: ::libc::c_uint = 93;
pub const _SC_XOPEN_SHM: ::libc::c_uint = 94;
pub const _SC_2_CHAR_TERM: ::libc::c_uint = 95;
pub const _SC_2_C_VERSION: ::libc::c_uint = 96;
pub const _SC_2_UPE: ::libc::c_uint = 97;
pub const _SC_XOPEN_XPG2: ::libc::c_uint = 98;
pub const _SC_XOPEN_XPG3: ::libc::c_uint = 99;
pub const _SC_XOPEN_XPG4: ::libc::c_uint = 100;
pub const _SC_CHAR_BIT: ::libc::c_uint = 101;
pub const _SC_CHAR_MAX: ::libc::c_uint = 102;
pub const _SC_CHAR_MIN: ::libc::c_uint = 103;
pub const _SC_INT_MAX: ::libc::c_uint = 104;
pub const _SC_INT_MIN: ::libc::c_uint = 105;
pub const _SC_LONG_BIT: ::libc::c_uint = 106;
pub const _SC_WORD_BIT: ::libc::c_uint = 107;
pub const _SC_MB_LEN_MAX: ::libc::c_uint = 108;
pub const _SC_NZERO: ::libc::c_uint = 109;
pub const _SC_SSIZE_MAX: ::libc::c_uint = 110;
pub const _SC_SCHAR_MAX: ::libc::c_uint = 111;
pub const _SC_SCHAR_MIN: ::libc::c_uint = 112;
pub const _SC_SHRT_MAX: ::libc::c_uint = 113;
pub const _SC_SHRT_MIN: ::libc::c_uint = 114;
pub const _SC_UCHAR_MAX: ::libc::c_uint = 115;
pub const _SC_UINT_MAX: ::libc::c_uint = 116;
pub const _SC_ULONG_MAX: ::libc::c_uint = 117;
pub const _SC_USHRT_MAX: ::libc::c_uint = 118;
pub const _SC_NL_ARGMAX: ::libc::c_uint = 119;
pub const _SC_NL_LANGMAX: ::libc::c_uint = 120;
pub const _SC_NL_MSGMAX: ::libc::c_uint = 121;
pub const _SC_NL_NMAX: ::libc::c_uint = 122;
pub const _SC_NL_SETMAX: ::libc::c_uint = 123;
pub const _SC_NL_TEXTMAX: ::libc::c_uint = 124;
pub const _SC_XBS5_ILP32_OFF32: ::libc::c_uint = 125;
pub const _SC_XBS5_ILP32_OFFBIG: ::libc::c_uint = 126;
pub const _SC_XBS5_LP64_OFF64: ::libc::c_uint = 127;
pub const _SC_XBS5_LPBIG_OFFBIG: ::libc::c_uint = 128;
pub const _SC_XOPEN_LEGACY: ::libc::c_uint = 129;
pub const _SC_XOPEN_REALTIME: ::libc::c_uint = 130;
pub const _SC_XOPEN_REALTIME_THREADS: ::libc::c_uint = 131;
pub const _SC_ADVISORY_INFO: ::libc::c_uint = 132;
pub const _SC_BARRIERS: ::libc::c_uint = 133;
pub const _SC_BASE: ::libc::c_uint = 134;
pub const _SC_C_LANG_SUPPORT: ::libc::c_uint = 135;
pub const _SC_C_LANG_SUPPORT_R: ::libc::c_uint = 136;
pub const _SC_CLOCK_SELECTION: ::libc::c_uint = 137;
pub const _SC_CPUTIME: ::libc::c_uint = 138;
pub const _SC_THREAD_CPUTIME: ::libc::c_uint = 139;
pub const _SC_DEVICE_IO: ::libc::c_uint = 140;
pub const _SC_DEVICE_SPECIFIC: ::libc::c_uint = 141;
pub const _SC_DEVICE_SPECIFIC_R: ::libc::c_uint = 142;
pub const _SC_FD_MGMT: ::libc::c_uint = 143;
pub const _SC_FIFO: ::libc::c_uint = 144;
pub const _SC_PIPE: ::libc::c_uint = 145;
pub const _SC_FILE_ATTRIBUTES: ::libc::c_uint = 146;
pub const _SC_FILE_LOCKING: ::libc::c_uint = 147;
pub const _SC_FILE_SYSTEM: ::libc::c_uint = 148;
pub const _SC_MONOTONIC_CLOCK: ::libc::c_uint = 149;
pub const _SC_MULTI_PROCESS: ::libc::c_uint = 150;
pub const _SC_SINGLE_PROCESS: ::libc::c_uint = 151;
pub const _SC_NETWORKING: ::libc::c_uint = 152;
pub const _SC_READER_WRITER_LOCKS: ::libc::c_uint = 153;
pub const _SC_SPIN_LOCKS: ::libc::c_uint = 154;
pub const _SC_REGEXP: ::libc::c_uint = 155;
pub const _SC_REGEX_VERSION: ::libc::c_uint = 156;
pub const _SC_SHELL: ::libc::c_uint = 157;
pub const _SC_SIGNALS: ::libc::c_uint = 158;
pub const _SC_SPAWN: ::libc::c_uint = 159;
pub const _SC_SPORADIC_SERVER: ::libc::c_uint = 160;
pub const _SC_THREAD_SPORADIC_SERVER: ::libc::c_uint = 161;
pub const _SC_SYSTEM_DATABASE: ::libc::c_uint = 162;
pub const _SC_SYSTEM_DATABASE_R: ::libc::c_uint = 163;
pub const _SC_TIMEOUTS: ::libc::c_uint = 164;
pub const _SC_TYPED_MEMORY_OBJECTS: ::libc::c_uint = 165;
pub const _SC_USER_GROUPS: ::libc::c_uint = 166;
pub const _SC_USER_GROUPS_R: ::libc::c_uint = 167;
pub const _SC_2_PBS: ::libc::c_uint = 168;
pub const _SC_2_PBS_ACCOUNTING: ::libc::c_uint = 169;
pub const _SC_2_PBS_LOCATE: ::libc::c_uint = 170;
pub const _SC_2_PBS_MESSAGE: ::libc::c_uint = 171;
pub const _SC_2_PBS_TRACK: ::libc::c_uint = 172;
pub const _SC_SYMLOOP_MAX: ::libc::c_uint = 173;
pub const _SC_STREAMS: ::libc::c_uint = 174;
pub const _SC_2_PBS_CHECKPOINT: ::libc::c_uint = 175;
pub const _SC_V6_ILP32_OFF32: ::libc::c_uint = 176;
pub const _SC_V6_ILP32_OFFBIG: ::libc::c_uint = 177;
pub const _SC_V6_LP64_OFF64: ::libc::c_uint = 178;
pub const _SC_V6_LPBIG_OFFBIG: ::libc::c_uint = 179;
pub const _SC_HOST_NAME_MAX: ::libc::c_uint = 180;
pub const _SC_TRACE: ::libc::c_uint = 181;
pub const _SC_TRACE_EVENT_FILTER: ::libc::c_uint = 182;
pub const _SC_TRACE_INHERIT: ::libc::c_uint = 183;
pub const _SC_TRACE_LOG: ::libc::c_uint = 184;
pub const _SC_LEVEL1_ICACHE_SIZE: ::libc::c_uint = 185;
pub const _SC_LEVEL1_ICACHE_ASSOC: ::libc::c_uint = 186;
pub const _SC_LEVEL1_ICACHE_LINESIZE: ::libc::c_uint = 187;
pub const _SC_LEVEL1_DCACHE_SIZE: ::libc::c_uint = 188;
pub const _SC_LEVEL1_DCACHE_ASSOC: ::libc::c_uint = 189;
pub const _SC_LEVEL1_DCACHE_LINESIZE: ::libc::c_uint = 190;
pub const _SC_LEVEL2_CACHE_SIZE: ::libc::c_uint = 191;
pub const _SC_LEVEL2_CACHE_ASSOC: ::libc::c_uint = 192;
pub const _SC_LEVEL2_CACHE_LINESIZE: ::libc::c_uint = 193;
pub const _SC_LEVEL3_CACHE_SIZE: ::libc::c_uint = 194;
pub const _SC_LEVEL3_CACHE_ASSOC: ::libc::c_uint = 195;
pub const _SC_LEVEL3_CACHE_LINESIZE: ::libc::c_uint = 196;
pub const _SC_LEVEL4_CACHE_SIZE: ::libc::c_uint = 197;
pub const _SC_LEVEL4_CACHE_ASSOC: ::libc::c_uint = 198;
pub const _SC_LEVEL4_CACHE_LINESIZE: ::libc::c_uint = 199;
pub const _SC_IPV6: ::libc::c_uint = 235;
pub const _SC_RAW_SOCKETS: ::libc::c_uint = 236;
pub const _SC_V7_ILP32_OFF32: ::libc::c_uint = 237;
pub const _SC_V7_ILP32_OFFBIG: ::libc::c_uint = 238;
pub const _SC_V7_LP64_OFF64: ::libc::c_uint = 239;
pub const _SC_V7_LPBIG_OFFBIG: ::libc::c_uint = 240;
pub const _SC_SS_REPL_MAX: ::libc::c_uint = 241;
pub const _SC_TRACE_EVENT_NAME_MAX: ::libc::c_uint = 242;
pub const _SC_TRACE_NAME_MAX: ::libc::c_uint = 243;
pub const _SC_TRACE_SYS_MAX: ::libc::c_uint = 244;
pub const _SC_TRACE_USER_EVENT_MAX: ::libc::c_uint = 245;
pub const _SC_XOPEN_STREAMS: ::libc::c_uint = 246;
pub const _SC_THREAD_ROBUST_PRIO_INHERIT: ::libc::c_uint = 247;
pub const _SC_THREAD_ROBUST_PRIO_PROTECT: ::libc::c_uint = 248;
pub type Enum_Unnamed59 = ::libc::c_uint;
pub const _CS_PATH: ::libc::c_uint = 0;
pub const _CS_V6_WIDTH_RESTRICTED_ENVS: ::libc::c_uint = 1;
pub const _CS_GNU_LIBC_VERSION: ::libc::c_uint = 2;
pub const _CS_GNU_LIBPTHREAD_VERSION: ::libc::c_uint = 3;
pub const _CS_V5_WIDTH_RESTRICTED_ENVS: ::libc::c_uint = 4;
pub const _CS_V7_WIDTH_RESTRICTED_ENVS: ::libc::c_uint = 5;
pub const _CS_LFS_CFLAGS: ::libc::c_uint = 1000;
pub const _CS_LFS_LDFLAGS: ::libc::c_uint = 1001;
pub const _CS_LFS_LIBS: ::libc::c_uint = 1002;
pub const _CS_LFS_LINTFLAGS: ::libc::c_uint = 1003;
pub const _CS_LFS64_CFLAGS: ::libc::c_uint = 1004;
pub const _CS_LFS64_LDFLAGS: ::libc::c_uint = 1005;
pub const _CS_LFS64_LIBS: ::libc::c_uint = 1006;
pub const _CS_LFS64_LINTFLAGS: ::libc::c_uint = 1007;
pub const _CS_XBS5_ILP32_OFF32_CFLAGS: ::libc::c_uint = 1100;
pub const _CS_XBS5_ILP32_OFF32_LDFLAGS: ::libc::c_uint = 1101;
pub const _CS_XBS5_ILP32_OFF32_LIBS: ::libc::c_uint = 1102;
pub const _CS_XBS5_ILP32_OFF32_LINTFLAGS: ::libc::c_uint = 1103;
pub const _CS_XBS5_ILP32_OFFBIG_CFLAGS: ::libc::c_uint = 1104;
pub const _CS_XBS5_ILP32_OFFBIG_LDFLAGS: ::libc::c_uint = 1105;
pub const _CS_XBS5_ILP32_OFFBIG_LIBS: ::libc::c_uint = 1106;
pub const _CS_XBS5_ILP32_OFFBIG_LINTFLAGS: ::libc::c_uint = 1107;
pub const _CS_XBS5_LP64_OFF64_CFLAGS: ::libc::c_uint = 1108;
pub const _CS_XBS5_LP64_OFF64_LDFLAGS: ::libc::c_uint = 1109;
pub const _CS_XBS5_LP64_OFF64_LIBS: ::libc::c_uint = 1110;
pub const _CS_XBS5_LP64_OFF64_LINTFLAGS: ::libc::c_uint = 1111;
pub const _CS_XBS5_LPBIG_OFFBIG_CFLAGS: ::libc::c_uint = 1112;
pub const _CS_XBS5_LPBIG_OFFBIG_LDFLAGS: ::libc::c_uint = 1113;
pub const _CS_XBS5_LPBIG_OFFBIG_LIBS: ::libc::c_uint = 1114;
pub const _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS: ::libc::c_uint = 1115;
pub const _CS_POSIX_V6_ILP32_OFF32_CFLAGS: ::libc::c_uint = 1116;
pub const _CS_POSIX_V6_ILP32_OFF32_LDFLAGS: ::libc::c_uint = 1117;
pub const _CS_POSIX_V6_ILP32_OFF32_LIBS: ::libc::c_uint = 1118;
pub const _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS: ::libc::c_uint = 1119;
pub const _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS: ::libc::c_uint = 1120;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS: ::libc::c_uint = 1121;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LIBS: ::libc::c_uint = 1122;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS: ::libc::c_uint = 1123;
pub const _CS_POSIX_V6_LP64_OFF64_CFLAGS: ::libc::c_uint = 1124;
pub const _CS_POSIX_V6_LP64_OFF64_LDFLAGS: ::libc::c_uint = 1125;
pub const _CS_POSIX_V6_LP64_OFF64_LIBS: ::libc::c_uint = 1126;
pub const _CS_POSIX_V6_LP64_OFF64_LINTFLAGS: ::libc::c_uint = 1127;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS: ::libc::c_uint = 1128;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS: ::libc::c_uint = 1129;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LIBS: ::libc::c_uint = 1130;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS: ::libc::c_uint = 1131;
pub const _CS_POSIX_V7_ILP32_OFF32_CFLAGS: ::libc::c_uint = 1132;
pub const _CS_POSIX_V7_ILP32_OFF32_LDFLAGS: ::libc::c_uint = 1133;
pub const _CS_POSIX_V7_ILP32_OFF32_LIBS: ::libc::c_uint = 1134;
pub const _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS: ::libc::c_uint = 1135;
pub const _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS: ::libc::c_uint = 1136;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS: ::libc::c_uint = 1137;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LIBS: ::libc::c_uint = 1138;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS: ::libc::c_uint = 1139;
pub const _CS_POSIX_V7_LP64_OFF64_CFLAGS: ::libc::c_uint = 1140;
pub const _CS_POSIX_V7_LP64_OFF64_LDFLAGS: ::libc::c_uint = 1141;
pub const _CS_POSIX_V7_LP64_OFF64_LIBS: ::libc::c_uint = 1142;
pub const _CS_POSIX_V7_LP64_OFF64_LINTFLAGS: ::libc::c_uint = 1143;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS: ::libc::c_uint = 1144;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS: ::libc::c_uint = 1145;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LIBS: ::libc::c_uint = 1146;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS: ::libc::c_uint = 1147;
pub const _CS_V6_ENV: ::libc::c_uint = 1148;
pub const _CS_V7_ENV: ::libc::c_uint = 1149;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_stat {
    pub st_dev: __dev_t,
    pub st_ino: __ino_t,
    pub st_nlink: __nlink_t,
    pub st_mode: __mode_t,
    pub st_uid: __uid_t,
    pub st_gid: __gid_t,
    pub __pad0: ::libc::c_int,
    pub st_rdev: __dev_t,
    pub st_size: __off_t,
    pub st_blksize: __blksize_t,
    pub st_blocks: __blkcnt_t,
    pub st_atim: Struct_timespec,
    pub st_mtim: Struct_timespec,
    pub st_ctim: Struct_timespec,
    pub __glibc_reserved: [__syscall_slong_t; 3usize],
}
impl ::std::default::Default for Struct_stat {
    fn default() -> Struct_stat { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_dirent {
    pub d_ino: __ino_t,
    pub d_off: __off_t,
    pub d_reclen: ::libc::c_ushort,
    pub d_type: ::libc::c_uchar,
    pub d_name: [::libc::c_char; 256usize],
}
impl ::std::default::Default for Struct_dirent {
    fn default() -> Struct_dirent { unsafe { ::std::mem::zeroed() } }
}
pub type Enum_Unnamed60 = ::libc::c_uint;
pub const DT_UNKNOWN: ::libc::c_uint = 0;
pub const DT_FIFO: ::libc::c_uint = 1;
pub const DT_CHR: ::libc::c_uint = 2;
pub const DT_DIR: ::libc::c_uint = 4;
pub const DT_BLK: ::libc::c_uint = 6;
pub const DT_REG: ::libc::c_uint = 8;
pub const DT_LNK: ::libc::c_uint = 10;
pub const DT_SOCK: ::libc::c_uint = 12;
pub const DT_WHT: ::libc::c_uint = 14;
pub enum Struct___dirstream { }
pub type DIR = Struct___dirstream;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_flock {
    pub l_type: ::libc::c_short,
    pub l_whence: ::libc::c_short,
    pub l_start: __off_t,
    pub l_len: __off_t,
    pub l_pid: __pid_t,
}
impl ::std::default::Default for Struct_flock {
    fn default() -> Struct_flock { unsafe { ::std::mem::zeroed() } }
}
pub type float_t = ::libc::c_float;
pub type double_t = ::libc::c_double;
pub type Enum_Unnamed61 = ::libc::c_uint;
pub const FP_NAN: ::libc::c_uint = 0;
pub const FP_INFINITE: ::libc::c_uint = 1;
pub const FP_ZERO: ::libc::c_uint = 2;
pub const FP_SUBNORMAL: ::libc::c_uint = 3;
pub const FP_NORMAL: ::libc::c_uint = 4;
pub type Enum_Unnamed62 = ::libc::c_int;
pub const _IEEE_: ::libc::c_int = -1;
pub const _SVID_: ::libc::c_int = 0;
pub const _XOPEN_: ::libc::c_int = 1;
pub const _POSIX_: ::libc::c_int = 2;
pub const _ISOC_: ::libc::c_int = 3;
pub type _LIB_VERSION_TYPE = Enum_Unnamed62;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_exception {
    pub _type: ::libc::c_int,
    pub name: *mut ::libc::c_char,
    pub arg1: ::libc::c_double,
    pub arg2: ::libc::c_double,
    pub retval: ::libc::c_double,
}
impl ::std::default::Default for Struct_exception {
    fn default() -> Struct_exception { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_tm {
    pub tm_sec: ::libc::c_int,
    pub tm_min: ::libc::c_int,
    pub tm_hour: ::libc::c_int,
    pub tm_mday: ::libc::c_int,
    pub tm_mon: ::libc::c_int,
    pub tm_year: ::libc::c_int,
    pub tm_wday: ::libc::c_int,
    pub tm_yday: ::libc::c_int,
    pub tm_isdst: ::libc::c_int,
    pub tm_gmtoff: ::libc::c_long,
    pub tm_zone: *const ::libc::c_char,
}
impl ::std::default::Default for Struct_tm {
    fn default() -> Struct_tm { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_itimerspec {
    pub it_interval: Struct_timespec,
    pub it_value: Struct_timespec,
}
impl ::std::default::Default for Struct_itimerspec {
    fn default() -> Struct_itimerspec { unsafe { ::std::mem::zeroed() } }
}
pub type Enum_Unnamed63 = ::libc::c_uint;
pub const _ISupper: ::libc::c_uint = 256;
pub const _ISlower: ::libc::c_uint = 512;
pub const _ISalpha: ::libc::c_uint = 1024;
pub const _ISdigit: ::libc::c_uint = 2048;
pub const _ISxdigit: ::libc::c_uint = 4096;
pub const _ISspace: ::libc::c_uint = 8192;
pub const _ISprint: ::libc::c_uint = 16384;
pub const _ISgraph: ::libc::c_uint = 32768;
pub const _ISblank: ::libc::c_uint = 1;
pub const _IScntrl: ::libc::c_uint = 2;
pub const _ISpunct: ::libc::c_uint = 4;
pub const _ISalnum: ::libc::c_uint = 8;
pub type ptrdiff_t = ::libc::c_long;
pub enum Struct_qelem { }
#[repr(C)]
#[derive(Copy)]
pub struct Struct_PLIBC_SEARCH_QELEM {
    pub q_forw: *mut Struct_qelem,
    pub q_back: *mut Struct_qelem,
    pub q_data: [::libc::c_char; 1usize],
}
impl ::std::default::Default for Struct_PLIBC_SEARCH_QELEM {
    fn default() -> Struct_PLIBC_SEARCH_QELEM {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type PLIBC_SEARCH__compar_fn_t =
    ::std::option::Option<extern "C" fn
                              (arg1: *const ::libc::c_void,
                               arg2: *const ::libc::c_void) -> ::libc::c_int>;
pub type _win_comparison_fn_t = PLIBC_SEARCH__compar_fn_t;
pub type Enum_Unnamed64 = ::libc::c_uint;
pub const PLIBC_SEARCH_FIND: ::libc::c_uint = 0;
pub const PLIBC_SEARCH_ENTER: ::libc::c_uint = 1;
pub type PLIBC_SEARCH_ACTION = Enum_Unnamed64;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_PLIBC_SEARCH_entry {
    pub key: *mut ::libc::c_char,
    pub data: *mut ::libc::c_void,
}
impl ::std::default::Default for Struct_PLIBC_SEARCH_entry {
    fn default() -> Struct_PLIBC_SEARCH_entry {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type PLIBC_SEARCH_ENTRY = Struct_PLIBC_SEARCH_entry;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__PLIBC_SEARCH_ENTRY {
    pub used: ::libc::c_uint,
    pub entry: PLIBC_SEARCH_ENTRY,
}
impl ::std::default::Default for Struct__PLIBC_SEARCH_ENTRY {
    fn default() -> Struct__PLIBC_SEARCH_ENTRY {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type _PLIBC_SEARCH_ENTRY = Struct__PLIBC_SEARCH_ENTRY;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_PLIBC_SEARCH_hsearch_data {
    pub table: *mut Struct__PLIBC_SEARCH_ENTRY,
    pub size: ::libc::c_uint,
    pub filled: ::libc::c_uint,
}
impl ::std::default::Default for Struct_PLIBC_SEARCH_hsearch_data {
    fn default() -> Struct_PLIBC_SEARCH_hsearch_data {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type Enum_Unnamed65 = ::libc::c_uint;
pub const PLIBC_SEARCH_preorder: ::libc::c_uint = 0;
pub const PLIBC_SEARCH_postorder: ::libc::c_uint = 1;
pub const PLIBC_SEARCH_endorder: ::libc::c_uint = 2;
pub const PLIBC_SEARCH_leaf: ::libc::c_uint = 3;
pub type PLIBC_SEARCH_VISIT = Enum_Unnamed65;
pub type PLIBC_SEARCH__action_fn_t =
    ::std::option::Option<extern "C" fn
                              (__nodep: *const ::libc::c_void,
                               __value: PLIBC_SEARCH_VISIT,
                               __level: ::libc::c_int) -> ()>;
pub type PLIBC_SEARCH__free_fn_t =
    ::std::option::Option<extern "C" fn(__nodep: *mut ::libc::c_void) -> ()>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_lconv {
    pub decimal_point: *mut ::libc::c_char,
    pub thousands_sep: *mut ::libc::c_char,
    pub grouping: *mut ::libc::c_char,
    pub int_curr_symbol: *mut ::libc::c_char,
    pub currency_symbol: *mut ::libc::c_char,
    pub mon_decimal_point: *mut ::libc::c_char,
    pub mon_thousands_sep: *mut ::libc::c_char,
    pub mon_grouping: *mut ::libc::c_char,
    pub positive_sign: *mut ::libc::c_char,
    pub negative_sign: *mut ::libc::c_char,
    pub int_frac_digits: ::libc::c_char,
    pub frac_digits: ::libc::c_char,
    pub p_cs_precedes: ::libc::c_char,
    pub p_sep_by_space: ::libc::c_char,
    pub n_cs_precedes: ::libc::c_char,
    pub n_sep_by_space: ::libc::c_char,
    pub p_sign_posn: ::libc::c_char,
    pub n_sign_posn: ::libc::c_char,
    pub int_p_cs_precedes: ::libc::c_char,
    pub int_p_sep_by_space: ::libc::c_char,
    pub int_n_cs_precedes: ::libc::c_char,
    pub int_n_sep_by_space: ::libc::c_char,
    pub int_p_sign_posn: ::libc::c_char,
    pub int_n_sign_posn: ::libc::c_char,
}
impl ::std::default::Default for Struct_lconv {
    fn default() -> Struct_lconv { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_GNUNET_MessageHeader {
    pub size: uint16_t,
    pub _type: uint16_t,
}
impl ::std::default::Default for Struct_GNUNET_MessageHeader {
    fn default() -> Struct_GNUNET_MessageHeader {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type GNUNET_FileNameCallback =
    ::std::option::Option<extern "C" fn
                              (cls: *mut ::libc::c_void,
                               filename: *const ::libc::c_char)
                              -> ::libc::c_int>;
pub type GNUNET_ContinuationCallback =
    ::std::option::Option<extern "C" fn(cls: *mut ::libc::c_void) -> ()>;
pub type Enum_GNUNET_ErrorType = ::libc::c_int;
pub const GNUNET_ERROR_TYPE_UNSPECIFIED: ::libc::c_int = -1;
pub const GNUNET_ERROR_TYPE_NONE: ::libc::c_int = 0;
pub const GNUNET_ERROR_TYPE_ERROR: ::libc::c_int = 1;
pub const GNUNET_ERROR_TYPE_WARNING: ::libc::c_int = 2;
pub const GNUNET_ERROR_TYPE_INFO: ::libc::c_int = 4;
pub const GNUNET_ERROR_TYPE_DEBUG: ::libc::c_int = 8;
pub const GNUNET_ERROR_TYPE_INVALID: ::libc::c_int = 16;
pub const GNUNET_ERROR_TYPE_BULK: ::libc::c_int = 32;
pub type GNUNET_Logger =
    ::std::option::Option<extern "C" fn
                              (cls: *mut ::libc::c_void,
                               kind: Enum_GNUNET_ErrorType,
                               component: *const ::libc::c_char,
                               date: *const ::libc::c_char,
                               message: *const ::libc::c_char) -> ()>;
pub enum Struct_GNUNET_SCHEDULER_Task { }
pub type Enum_GNUNET_SCHEDULER_Reason = ::libc::c_uint;
pub const GNUNET_SCHEDULER_REASON_NONE: ::libc::c_uint = 0;
pub const GNUNET_SCHEDULER_REASON_STARTUP: ::libc::c_uint = 1;
pub const GNUNET_SCHEDULER_REASON_SHUTDOWN: ::libc::c_uint = 2;
pub const GNUNET_SCHEDULER_REASON_TIMEOUT: ::libc::c_uint = 4;
pub const GNUNET_SCHEDULER_REASON_READ_READY: ::libc::c_uint = 8;
pub const GNUNET_SCHEDULER_REASON_WRITE_READY: ::libc::c_uint = 16;
pub const GNUNET_SCHEDULER_REASON_PREREQ_DONE: ::libc::c_uint = 32;
pub type Enum_GNUNET_SCHEDULER_Priority = ::libc::c_uint;
pub const GNUNET_SCHEDULER_PRIORITY_KEEP: ::libc::c_uint = 0;
pub const GNUNET_SCHEDULER_PRIORITY_IDLE: ::libc::c_uint = 1;
pub const GNUNET_SCHEDULER_PRIORITY_BACKGROUND: ::libc::c_uint = 2;
pub const GNUNET_SCHEDULER_PRIORITY_DEFAULT: ::libc::c_uint = 3;
pub const GNUNET_SCHEDULER_PRIORITY_HIGH: ::libc::c_uint = 4;
pub const GNUNET_SCHEDULER_PRIORITY_UI: ::libc::c_uint = 5;
pub const GNUNET_SCHEDULER_PRIORITY_URGENT: ::libc::c_uint = 6;
pub const GNUNET_SCHEDULER_PRIORITY_SHUTDOWN: ::libc::c_uint = 7;
pub const GNUNET_SCHEDULER_PRIORITY_COUNT: ::libc::c_uint = 8;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_GNUNET_TIME_Absolute {
    pub abs_value_us: uint64_t,
}
impl ::std::default::Default for Struct_GNUNET_TIME_Absolute {
    fn default() -> Struct_GNUNET_TIME_Absolute {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_GNUNET_TIME_Relative {
    pub rel_value_us: uint64_t,
}
impl ::std::default::Default for Struct_GNUNET_TIME_Relative {
    fn default() -> Struct_GNUNET_TIME_Relative {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_GNUNET_TIME_RelativeNBO {
    pub rel_value_us__: uint64_t,
}
impl ::std::default::Default for Struct_GNUNET_TIME_RelativeNBO {
    fn default() -> Struct_GNUNET_TIME_RelativeNBO {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_GNUNET_TIME_AbsoluteNBO {
    pub abs_value_us__: uint64_t,
}
impl ::std::default::Default for Struct_GNUNET_TIME_AbsoluteNBO {
    fn default() -> Struct_GNUNET_TIME_AbsoluteNBO {
        unsafe { ::std::mem::zeroed() }
    }
}
pub enum Struct_GNUNET_NETWORK_Handle { }
#[repr(C)]
#[derive(Copy)]
pub struct Struct_GNUNET_NETWORK_FDSet {
    pub nsds: ::libc::c_int,
    pub sds: fd_set,
}
impl ::std::default::Default for Struct_GNUNET_NETWORK_FDSet {
    fn default() -> Struct_GNUNET_NETWORK_FDSet {
        unsafe { ::std::mem::zeroed() }
    }
}
pub enum Struct_GNUNET_DISK_PipeHandle { }
pub type Enum_GNUNET_FILE_Type = ::libc::c_uint;
pub const GNUNET_DISK_HANLDE_TYPE_FILE: ::libc::c_uint = 0;
pub const GNUNET_DISK_HANLDE_TYPE_PIPE: ::libc::c_uint = 1;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_GNUNET_DISK_FileHandle {
    pub fd: ::libc::c_int,
}
impl ::std::default::Default for Struct_GNUNET_DISK_FileHandle {
    fn default() -> Struct_GNUNET_DISK_FileHandle {
        unsafe { ::std::mem::zeroed() }
    }
}
pub enum Struct_GNUNET_CONFIGURATION_Handle { }
pub type GNUNET_CONFIGURATION_Iterator =
    ::std::option::Option<extern "C" fn
                              (cls: *mut ::libc::c_void,
                               section: *const ::libc::c_char,
                               option: *const ::libc::c_char,
                               value: *const ::libc::c_char) -> ()>;
pub type GNUNET_CONFIGURATION_Section_Iterator =
    ::std::option::Option<extern "C" fn
                              (cls: *mut ::libc::c_void,
                               section: *const ::libc::c_char) -> ()>;
pub type Enum_GNUNET_DISK_OpenFlags = ::libc::c_uint;
pub const GNUNET_DISK_OPEN_READ: ::libc::c_uint = 1;
pub const GNUNET_DISK_OPEN_WRITE: ::libc::c_uint = 2;
pub const GNUNET_DISK_OPEN_READWRITE: ::libc::c_uint = 3;
pub const GNUNET_DISK_OPEN_FAILIFEXISTS: ::libc::c_uint = 4;
pub const GNUNET_DISK_OPEN_TRUNCATE: ::libc::c_uint = 8;
pub const GNUNET_DISK_OPEN_CREATE: ::libc::c_uint = 16;
pub const GNUNET_DISK_OPEN_APPEND: ::libc::c_uint = 32;
pub type Enum_GNUNET_DISK_MapType = ::libc::c_uint;
pub const GNUNET_DISK_MAP_TYPE_READ: ::libc::c_uint = 1;
pub const GNUNET_DISK_MAP_TYPE_WRITE: ::libc::c_uint = 2;
pub const GNUNET_DISK_MAP_TYPE_READWRITE: ::libc::c_uint = 3;
pub type Enum_GNUNET_DISK_AccessPermissions = ::libc::c_uint;
pub const GNUNET_DISK_PERM_NONE: ::libc::c_uint = 0;
pub const GNUNET_DISK_PERM_USER_READ: ::libc::c_uint = 1;
pub const GNUNET_DISK_PERM_USER_WRITE: ::libc::c_uint = 2;
pub const GNUNET_DISK_PERM_USER_EXEC: ::libc::c_uint = 4;
pub const GNUNET_DISK_PERM_GROUP_READ: ::libc::c_uint = 8;
pub const GNUNET_DISK_PERM_GROUP_WRITE: ::libc::c_uint = 16;
pub const GNUNET_DISK_PERM_GROUP_EXEC: ::libc::c_uint = 32;
pub const GNUNET_DISK_PERM_OTHER_READ: ::libc::c_uint = 64;
pub const GNUNET_DISK_PERM_OTHER_WRITE: ::libc::c_uint = 128;
pub const GNUNET_DISK_PERM_OTHER_EXEC: ::libc::c_uint = 256;
pub type Enum_GNUNET_DISK_Seek = ::libc::c_uint;
pub const GNUNET_DISK_SEEK_SET: ::libc::c_uint = 0;
pub const GNUNET_DISK_SEEK_CUR: ::libc::c_uint = 1;
pub const GNUNET_DISK_SEEK_END: ::libc::c_uint = 2;
pub type Enum_GNUNET_DISK_PipeEnd = ::libc::c_uint;
pub const GNUNET_DISK_PIPE_END_READ: ::libc::c_uint = 0;
pub const GNUNET_DISK_PIPE_END_WRITE: ::libc::c_uint = 1;
pub enum Struct_GNUNET_DISK_DirectoryIterator { }
pub type GNUNET_DISK_DirectoryIteratorCallback =
    ::std::option::Option<extern "C" fn
                              (cls: *mut ::libc::c_void,
                               di: *mut Struct_GNUNET_DISK_DirectoryIterator,
                               filename: *const ::libc::c_char,
                               dirname: *const ::libc::c_char) -> ()>;
pub enum Struct_GNUNET_DISK_MapHandle { }
#[repr(C)]
#[derive(Copy)]
pub struct Struct_GNUNET_SCHEDULER_TaskContext {
    pub reason: Enum_GNUNET_SCHEDULER_Reason,
    pub read_ready: *const Struct_GNUNET_NETWORK_FDSet,
    pub write_ready: *const Struct_GNUNET_NETWORK_FDSet,
}
impl ::std::default::Default for Struct_GNUNET_SCHEDULER_TaskContext {
    fn default() -> Struct_GNUNET_SCHEDULER_TaskContext {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type GNUNET_SCHEDULER_TaskCallback =
    ::std::option::Option<extern "C" fn
                              (cls: *mut ::libc::c_void,
                               tc: *const Struct_GNUNET_SCHEDULER_TaskContext)
                              -> ()>;
pub type GNUNET_SCHEDULER_select =
    ::std::option::Option<extern "C" fn
                              (cls: *mut ::libc::c_void,
                               rfds: *mut Struct_GNUNET_NETWORK_FDSet,
                               wfds: *mut Struct_GNUNET_NETWORK_FDSet,
                               efds: *mut Struct_GNUNET_NETWORK_FDSet,
                               timeout: Struct_GNUNET_TIME_Relative)
                              -> ::libc::c_int>;
pub type Enum_Unnamed66 = ::libc::c_uint;
pub const GPG_ERR_SOURCE_UNKNOWN: ::libc::c_uint = 0;
pub const GPG_ERR_SOURCE_GCRYPT: ::libc::c_uint = 1;
pub const GPG_ERR_SOURCE_GPG: ::libc::c_uint = 2;
pub const GPG_ERR_SOURCE_GPGSM: ::libc::c_uint = 3;
pub const GPG_ERR_SOURCE_GPGAGENT: ::libc::c_uint = 4;
pub const GPG_ERR_SOURCE_PINENTRY: ::libc::c_uint = 5;
pub const GPG_ERR_SOURCE_SCD: ::libc::c_uint = 6;
pub const GPG_ERR_SOURCE_GPGME: ::libc::c_uint = 7;
pub const GPG_ERR_SOURCE_KEYBOX: ::libc::c_uint = 8;
pub const GPG_ERR_SOURCE_KSBA: ::libc::c_uint = 9;
pub const GPG_ERR_SOURCE_DIRMNGR: ::libc::c_uint = 10;
pub const GPG_ERR_SOURCE_GSTI: ::libc::c_uint = 11;
pub const GPG_ERR_SOURCE_GPA: ::libc::c_uint = 12;
pub const GPG_ERR_SOURCE_KLEO: ::libc::c_uint = 13;
pub const GPG_ERR_SOURCE_G13: ::libc::c_uint = 14;
pub const GPG_ERR_SOURCE_ASSUAN: ::libc::c_uint = 15;
pub const GPG_ERR_SOURCE_ANY: ::libc::c_uint = 31;
pub const GPG_ERR_SOURCE_USER_1: ::libc::c_uint = 32;
pub const GPG_ERR_SOURCE_USER_2: ::libc::c_uint = 33;
pub const GPG_ERR_SOURCE_USER_3: ::libc::c_uint = 34;
pub const GPG_ERR_SOURCE_USER_4: ::libc::c_uint = 35;
pub const GPG_ERR_SOURCE_DIM: ::libc::c_uint = 128;
pub type gpg_err_source_t = Enum_Unnamed66;
pub type Enum_Unnamed67 = ::libc::c_uint;
pub const GPG_ERR_NO_ERROR: ::libc::c_uint = 0;
pub const GPG_ERR_GENERAL: ::libc::c_uint = 1;
pub const GPG_ERR_UNKNOWN_PACKET: ::libc::c_uint = 2;
pub const GPG_ERR_UNKNOWN_VERSION: ::libc::c_uint = 3;
pub const GPG_ERR_PUBKEY_ALGO: ::libc::c_uint = 4;
pub const GPG_ERR_DIGEST_ALGO: ::libc::c_uint = 5;
pub const GPG_ERR_BAD_PUBKEY: ::libc::c_uint = 6;
pub const GPG_ERR_BAD_SECKEY: ::libc::c_uint = 7;
pub const GPG_ERR_BAD_SIGNATURE: ::libc::c_uint = 8;
pub const GPG_ERR_NO_PUBKEY: ::libc::c_uint = 9;
pub const GPG_ERR_CHECKSUM: ::libc::c_uint = 10;
pub const GPG_ERR_BAD_PASSPHRASE: ::libc::c_uint = 11;
pub const GPG_ERR_CIPHER_ALGO: ::libc::c_uint = 12;
pub const GPG_ERR_KEYRING_OPEN: ::libc::c_uint = 13;
pub const GPG_ERR_INV_PACKET: ::libc::c_uint = 14;
pub const GPG_ERR_INV_ARMOR: ::libc::c_uint = 15;
pub const GPG_ERR_NO_USER_ID: ::libc::c_uint = 16;
pub const GPG_ERR_NO_SECKEY: ::libc::c_uint = 17;
pub const GPG_ERR_WRONG_SECKEY: ::libc::c_uint = 18;
pub const GPG_ERR_BAD_KEY: ::libc::c_uint = 19;
pub const GPG_ERR_COMPR_ALGO: ::libc::c_uint = 20;
pub const GPG_ERR_NO_PRIME: ::libc::c_uint = 21;
pub const GPG_ERR_NO_ENCODING_METHOD: ::libc::c_uint = 22;
pub const GPG_ERR_NO_ENCRYPTION_SCHEME: ::libc::c_uint = 23;
pub const GPG_ERR_NO_SIGNATURE_SCHEME: ::libc::c_uint = 24;
pub const GPG_ERR_INV_ATTR: ::libc::c_uint = 25;
pub const GPG_ERR_NO_VALUE: ::libc::c_uint = 26;
pub const GPG_ERR_NOT_FOUND: ::libc::c_uint = 27;
pub const GPG_ERR_VALUE_NOT_FOUND: ::libc::c_uint = 28;
pub const GPG_ERR_SYNTAX: ::libc::c_uint = 29;
pub const GPG_ERR_BAD_MPI: ::libc::c_uint = 30;
pub const GPG_ERR_INV_PASSPHRASE: ::libc::c_uint = 31;
pub const GPG_ERR_SIG_CLASS: ::libc::c_uint = 32;
pub const GPG_ERR_RESOURCE_LIMIT: ::libc::c_uint = 33;
pub const GPG_ERR_INV_KEYRING: ::libc::c_uint = 34;
pub const GPG_ERR_TRUSTDB: ::libc::c_uint = 35;
pub const GPG_ERR_BAD_CERT: ::libc::c_uint = 36;
pub const GPG_ERR_INV_USER_ID: ::libc::c_uint = 37;
pub const GPG_ERR_UNEXPECTED: ::libc::c_uint = 38;
pub const GPG_ERR_TIME_CONFLICT: ::libc::c_uint = 39;
pub const GPG_ERR_KEYSERVER: ::libc::c_uint = 40;
pub const GPG_ERR_WRONG_PUBKEY_ALGO: ::libc::c_uint = 41;
pub const GPG_ERR_TRIBUTE_TO_D_A: ::libc::c_uint = 42;
pub const GPG_ERR_WEAK_KEY: ::libc::c_uint = 43;
pub const GPG_ERR_INV_KEYLEN: ::libc::c_uint = 44;
pub const GPG_ERR_INV_ARG: ::libc::c_uint = 45;
pub const GPG_ERR_BAD_URI: ::libc::c_uint = 46;
pub const GPG_ERR_INV_URI: ::libc::c_uint = 47;
pub const GPG_ERR_NETWORK: ::libc::c_uint = 48;
pub const GPG_ERR_UNKNOWN_HOST: ::libc::c_uint = 49;
pub const GPG_ERR_SELFTEST_FAILED: ::libc::c_uint = 50;
pub const GPG_ERR_NOT_ENCRYPTED: ::libc::c_uint = 51;
pub const GPG_ERR_NOT_PROCESSED: ::libc::c_uint = 52;
pub const GPG_ERR_UNUSABLE_PUBKEY: ::libc::c_uint = 53;
pub const GPG_ERR_UNUSABLE_SECKEY: ::libc::c_uint = 54;
pub const GPG_ERR_INV_VALUE: ::libc::c_uint = 55;
pub const GPG_ERR_BAD_CERT_CHAIN: ::libc::c_uint = 56;
pub const GPG_ERR_MISSING_CERT: ::libc::c_uint = 57;
pub const GPG_ERR_NO_DATA: ::libc::c_uint = 58;
pub const GPG_ERR_BUG: ::libc::c_uint = 59;
pub const GPG_ERR_NOT_SUPPORTED: ::libc::c_uint = 60;
pub const GPG_ERR_INV_OP: ::libc::c_uint = 61;
pub const GPG_ERR_TIMEOUT: ::libc::c_uint = 62;
pub const GPG_ERR_INTERNAL: ::libc::c_uint = 63;
pub const GPG_ERR_EOF_GCRYPT: ::libc::c_uint = 64;
pub const GPG_ERR_INV_OBJ: ::libc::c_uint = 65;
pub const GPG_ERR_TOO_SHORT: ::libc::c_uint = 66;
pub const GPG_ERR_TOO_LARGE: ::libc::c_uint = 67;
pub const GPG_ERR_NO_OBJ: ::libc::c_uint = 68;
pub const GPG_ERR_NOT_IMPLEMENTED: ::libc::c_uint = 69;
pub const GPG_ERR_CONFLICT: ::libc::c_uint = 70;
pub const GPG_ERR_INV_CIPHER_MODE: ::libc::c_uint = 71;
pub const GPG_ERR_INV_FLAG: ::libc::c_uint = 72;
pub const GPG_ERR_INV_HANDLE: ::libc::c_uint = 73;
pub const GPG_ERR_TRUNCATED: ::libc::c_uint = 74;
pub const GPG_ERR_INCOMPLETE_LINE: ::libc::c_uint = 75;
pub const GPG_ERR_INV_RESPONSE: ::libc::c_uint = 76;
pub const GPG_ERR_NO_AGENT: ::libc::c_uint = 77;
pub const GPG_ERR_AGENT: ::libc::c_uint = 78;
pub const GPG_ERR_INV_DATA: ::libc::c_uint = 79;
pub const GPG_ERR_ASSUAN_SERVER_FAULT: ::libc::c_uint = 80;
pub const GPG_ERR_ASSUAN: ::libc::c_uint = 81;
pub const GPG_ERR_INV_SESSION_KEY: ::libc::c_uint = 82;
pub const GPG_ERR_INV_SEXP: ::libc::c_uint = 83;
pub const GPG_ERR_UNSUPPORTED_ALGORITHM: ::libc::c_uint = 84;
pub const GPG_ERR_NO_PIN_ENTRY: ::libc::c_uint = 85;
pub const GPG_ERR_PIN_ENTRY: ::libc::c_uint = 86;
pub const GPG_ERR_BAD_PIN: ::libc::c_uint = 87;
pub const GPG_ERR_INV_NAME: ::libc::c_uint = 88;
pub const GPG_ERR_BAD_DATA: ::libc::c_uint = 89;
pub const GPG_ERR_INV_PARAMETER: ::libc::c_uint = 90;
pub const GPG_ERR_WRONG_CARD: ::libc::c_uint = 91;
pub const GPG_ERR_NO_DIRMNGR: ::libc::c_uint = 92;
pub const GPG_ERR_DIRMNGR: ::libc::c_uint = 93;
pub const GPG_ERR_CERT_REVOKED: ::libc::c_uint = 94;
pub const GPG_ERR_NO_CRL_KNOWN: ::libc::c_uint = 95;
pub const GPG_ERR_CRL_TOO_OLD: ::libc::c_uint = 96;
pub const GPG_ERR_LINE_TOO_LONG: ::libc::c_uint = 97;
pub const GPG_ERR_NOT_TRUSTED: ::libc::c_uint = 98;
pub const GPG_ERR_CANCELED: ::libc::c_uint = 99;
pub const GPG_ERR_BAD_CA_CERT: ::libc::c_uint = 100;
pub const GPG_ERR_CERT_EXPIRED: ::libc::c_uint = 101;
pub const GPG_ERR_CERT_TOO_YOUNG: ::libc::c_uint = 102;
pub const GPG_ERR_UNSUPPORTED_CERT: ::libc::c_uint = 103;
pub const GPG_ERR_UNKNOWN_SEXP: ::libc::c_uint = 104;
pub const GPG_ERR_UNSUPPORTED_PROTECTION: ::libc::c_uint = 105;
pub const GPG_ERR_CORRUPTED_PROTECTION: ::libc::c_uint = 106;
pub const GPG_ERR_AMBIGUOUS_NAME: ::libc::c_uint = 107;
pub const GPG_ERR_CARD: ::libc::c_uint = 108;
pub const GPG_ERR_CARD_RESET: ::libc::c_uint = 109;
pub const GPG_ERR_CARD_REMOVED: ::libc::c_uint = 110;
pub const GPG_ERR_INV_CARD: ::libc::c_uint = 111;
pub const GPG_ERR_CARD_NOT_PRESENT: ::libc::c_uint = 112;
pub const GPG_ERR_NO_PKCS15_APP: ::libc::c_uint = 113;
pub const GPG_ERR_NOT_CONFIRMED: ::libc::c_uint = 114;
pub const GPG_ERR_CONFIGURATION: ::libc::c_uint = 115;
pub const GPG_ERR_NO_POLICY_MATCH: ::libc::c_uint = 116;
pub const GPG_ERR_INV_INDEX: ::libc::c_uint = 117;
pub const GPG_ERR_INV_ID: ::libc::c_uint = 118;
pub const GPG_ERR_NO_SCDAEMON: ::libc::c_uint = 119;
pub const GPG_ERR_SCDAEMON: ::libc::c_uint = 120;
pub const GPG_ERR_UNSUPPORTED_PROTOCOL: ::libc::c_uint = 121;
pub const GPG_ERR_BAD_PIN_METHOD: ::libc::c_uint = 122;
pub const GPG_ERR_CARD_NOT_INITIALIZED: ::libc::c_uint = 123;
pub const GPG_ERR_UNSUPPORTED_OPERATION: ::libc::c_uint = 124;
pub const GPG_ERR_WRONG_KEY_USAGE: ::libc::c_uint = 125;
pub const GPG_ERR_NOTHING_FOUND: ::libc::c_uint = 126;
pub const GPG_ERR_WRONG_BLOB_TYPE: ::libc::c_uint = 127;
pub const GPG_ERR_MISSING_VALUE: ::libc::c_uint = 128;
pub const GPG_ERR_HARDWARE: ::libc::c_uint = 129;
pub const GPG_ERR_PIN_BLOCKED: ::libc::c_uint = 130;
pub const GPG_ERR_USE_CONDITIONS: ::libc::c_uint = 131;
pub const GPG_ERR_PIN_NOT_SYNCED: ::libc::c_uint = 132;
pub const GPG_ERR_INV_CRL: ::libc::c_uint = 133;
pub const GPG_ERR_BAD_BER: ::libc::c_uint = 134;
pub const GPG_ERR_INV_BER: ::libc::c_uint = 135;
pub const GPG_ERR_ELEMENT_NOT_FOUND: ::libc::c_uint = 136;
pub const GPG_ERR_IDENTIFIER_NOT_FOUND: ::libc::c_uint = 137;
pub const GPG_ERR_INV_TAG: ::libc::c_uint = 138;
pub const GPG_ERR_INV_LENGTH: ::libc::c_uint = 139;
pub const GPG_ERR_INV_KEYINFO: ::libc::c_uint = 140;
pub const GPG_ERR_UNEXPECTED_TAG: ::libc::c_uint = 141;
pub const GPG_ERR_NOT_DER_ENCODED: ::libc::c_uint = 142;
pub const GPG_ERR_NO_CMS_OBJ: ::libc::c_uint = 143;
pub const GPG_ERR_INV_CMS_OBJ: ::libc::c_uint = 144;
pub const GPG_ERR_UNKNOWN_CMS_OBJ: ::libc::c_uint = 145;
pub const GPG_ERR_UNSUPPORTED_CMS_OBJ: ::libc::c_uint = 146;
pub const GPG_ERR_UNSUPPORTED_ENCODING: ::libc::c_uint = 147;
pub const GPG_ERR_UNSUPPORTED_CMS_VERSION: ::libc::c_uint = 148;
pub const GPG_ERR_UNKNOWN_ALGORITHM: ::libc::c_uint = 149;
pub const GPG_ERR_INV_ENGINE: ::libc::c_uint = 150;
pub const GPG_ERR_PUBKEY_NOT_TRUSTED: ::libc::c_uint = 151;
pub const GPG_ERR_DECRYPT_FAILED: ::libc::c_uint = 152;
pub const GPG_ERR_KEY_EXPIRED: ::libc::c_uint = 153;
pub const GPG_ERR_SIG_EXPIRED: ::libc::c_uint = 154;
pub const GPG_ERR_ENCODING_PROBLEM: ::libc::c_uint = 155;
pub const GPG_ERR_INV_STATE: ::libc::c_uint = 156;
pub const GPG_ERR_DUP_VALUE: ::libc::c_uint = 157;
pub const GPG_ERR_MISSING_ACTION: ::libc::c_uint = 158;
pub const GPG_ERR_MODULE_NOT_FOUND: ::libc::c_uint = 159;
pub const GPG_ERR_INV_OID_STRING: ::libc::c_uint = 160;
pub const GPG_ERR_INV_TIME: ::libc::c_uint = 161;
pub const GPG_ERR_INV_CRL_OBJ: ::libc::c_uint = 162;
pub const GPG_ERR_UNSUPPORTED_CRL_VERSION: ::libc::c_uint = 163;
pub const GPG_ERR_INV_CERT_OBJ: ::libc::c_uint = 164;
pub const GPG_ERR_UNKNOWN_NAME: ::libc::c_uint = 165;
pub const GPG_ERR_LOCALE_PROBLEM: ::libc::c_uint = 166;
pub const GPG_ERR_NOT_LOCKED: ::libc::c_uint = 167;
pub const GPG_ERR_PROTOCOL_VIOLATION: ::libc::c_uint = 168;
pub const GPG_ERR_INV_MAC: ::libc::c_uint = 169;
pub const GPG_ERR_INV_REQUEST: ::libc::c_uint = 170;
pub const GPG_ERR_UNKNOWN_EXTN: ::libc::c_uint = 171;
pub const GPG_ERR_UNKNOWN_CRIT_EXTN: ::libc::c_uint = 172;
pub const GPG_ERR_LOCKED: ::libc::c_uint = 173;
pub const GPG_ERR_UNKNOWN_OPTION: ::libc::c_uint = 174;
pub const GPG_ERR_UNKNOWN_COMMAND: ::libc::c_uint = 175;
pub const GPG_ERR_NOT_OPERATIONAL: ::libc::c_uint = 176;
pub const GPG_ERR_NO_PASSPHRASE: ::libc::c_uint = 177;
pub const GPG_ERR_NO_PIN: ::libc::c_uint = 178;
pub const GPG_ERR_NOT_ENABLED: ::libc::c_uint = 179;
pub const GPG_ERR_NO_ENGINE: ::libc::c_uint = 180;
pub const GPG_ERR_MISSING_KEY: ::libc::c_uint = 181;
pub const GPG_ERR_TOO_MANY: ::libc::c_uint = 182;
pub const GPG_ERR_LIMIT_REACHED: ::libc::c_uint = 183;
pub const GPG_ERR_NOT_INITIALIZED: ::libc::c_uint = 184;
pub const GPG_ERR_MISSING_ISSUER_CERT: ::libc::c_uint = 185;
pub const GPG_ERR_NO_KEYSERVER: ::libc::c_uint = 186;
pub const GPG_ERR_INV_CURVE: ::libc::c_uint = 187;
pub const GPG_ERR_UNKNOWN_CURVE: ::libc::c_uint = 188;
pub const GPG_ERR_DUP_KEY: ::libc::c_uint = 189;
pub const GPG_ERR_AMBIGUOUS: ::libc::c_uint = 190;
pub const GPG_ERR_NO_CRYPT_CTX: ::libc::c_uint = 191;
pub const GPG_ERR_WRONG_CRYPT_CTX: ::libc::c_uint = 192;
pub const GPG_ERR_BAD_CRYPT_CTX: ::libc::c_uint = 193;
pub const GPG_ERR_CRYPT_CTX_CONFLICT: ::libc::c_uint = 194;
pub const GPG_ERR_BROKEN_PUBKEY: ::libc::c_uint = 195;
pub const GPG_ERR_BROKEN_SECKEY: ::libc::c_uint = 196;
pub const GPG_ERR_MAC_ALGO: ::libc::c_uint = 197;
pub const GPG_ERR_FULLY_CANCELED: ::libc::c_uint = 198;
pub const GPG_ERR_UNFINISHED: ::libc::c_uint = 199;
pub const GPG_ERR_BUFFER_TOO_SHORT: ::libc::c_uint = 200;
pub const GPG_ERR_SEXP_INV_LEN_SPEC: ::libc::c_uint = 201;
pub const GPG_ERR_SEXP_STRING_TOO_LONG: ::libc::c_uint = 202;
pub const GPG_ERR_SEXP_UNMATCHED_PAREN: ::libc::c_uint = 203;
pub const GPG_ERR_SEXP_NOT_CANONICAL: ::libc::c_uint = 204;
pub const GPG_ERR_SEXP_BAD_CHARACTER: ::libc::c_uint = 205;
pub const GPG_ERR_SEXP_BAD_QUOTATION: ::libc::c_uint = 206;
pub const GPG_ERR_SEXP_ZERO_PREFIX: ::libc::c_uint = 207;
pub const GPG_ERR_SEXP_NESTED_DH: ::libc::c_uint = 208;
pub const GPG_ERR_SEXP_UNMATCHED_DH: ::libc::c_uint = 209;
pub const GPG_ERR_SEXP_UNEXPECTED_PUNC: ::libc::c_uint = 210;
pub const GPG_ERR_SEXP_BAD_HEX_CHAR: ::libc::c_uint = 211;
pub const GPG_ERR_SEXP_ODD_HEX_NUMBERS: ::libc::c_uint = 212;
pub const GPG_ERR_SEXP_BAD_OCT_CHAR: ::libc::c_uint = 213;
pub const GPG_ERR_KEY_DISABLED: ::libc::c_uint = 252;
pub const GPG_ERR_KEY_ON_CARD: ::libc::c_uint = 253;
pub const GPG_ERR_INV_LOCK_OBJ: ::libc::c_uint = 254;
pub const GPG_ERR_ASS_GENERAL: ::libc::c_uint = 257;
pub const GPG_ERR_ASS_ACCEPT_FAILED: ::libc::c_uint = 258;
pub const GPG_ERR_ASS_CONNECT_FAILED: ::libc::c_uint = 259;
pub const GPG_ERR_ASS_INV_RESPONSE: ::libc::c_uint = 260;
pub const GPG_ERR_ASS_INV_VALUE: ::libc::c_uint = 261;
pub const GPG_ERR_ASS_INCOMPLETE_LINE: ::libc::c_uint = 262;
pub const GPG_ERR_ASS_LINE_TOO_LONG: ::libc::c_uint = 263;
pub const GPG_ERR_ASS_NESTED_COMMANDS: ::libc::c_uint = 264;
pub const GPG_ERR_ASS_NO_DATA_CB: ::libc::c_uint = 265;
pub const GPG_ERR_ASS_NO_INQUIRE_CB: ::libc::c_uint = 266;
pub const GPG_ERR_ASS_NOT_A_SERVER: ::libc::c_uint = 267;
pub const GPG_ERR_ASS_NOT_A_CLIENT: ::libc::c_uint = 268;
pub const GPG_ERR_ASS_SERVER_START: ::libc::c_uint = 269;
pub const GPG_ERR_ASS_READ_ERROR: ::libc::c_uint = 270;
pub const GPG_ERR_ASS_WRITE_ERROR: ::libc::c_uint = 271;
pub const GPG_ERR_ASS_TOO_MUCH_DATA: ::libc::c_uint = 273;
pub const GPG_ERR_ASS_UNEXPECTED_CMD: ::libc::c_uint = 274;
pub const GPG_ERR_ASS_UNKNOWN_CMD: ::libc::c_uint = 275;
pub const GPG_ERR_ASS_SYNTAX: ::libc::c_uint = 276;
pub const GPG_ERR_ASS_CANCELED: ::libc::c_uint = 277;
pub const GPG_ERR_ASS_NO_INPUT: ::libc::c_uint = 278;
pub const GPG_ERR_ASS_NO_OUTPUT: ::libc::c_uint = 279;
pub const GPG_ERR_ASS_PARAMETER: ::libc::c_uint = 280;
pub const GPG_ERR_ASS_UNKNOWN_INQUIRE: ::libc::c_uint = 281;
pub const GPG_ERR_USER_1: ::libc::c_uint = 1024;
pub const GPG_ERR_USER_2: ::libc::c_uint = 1025;
pub const GPG_ERR_USER_3: ::libc::c_uint = 1026;
pub const GPG_ERR_USER_4: ::libc::c_uint = 1027;
pub const GPG_ERR_USER_5: ::libc::c_uint = 1028;
pub const GPG_ERR_USER_6: ::libc::c_uint = 1029;
pub const GPG_ERR_USER_7: ::libc::c_uint = 1030;
pub const GPG_ERR_USER_8: ::libc::c_uint = 1031;
pub const GPG_ERR_USER_9: ::libc::c_uint = 1032;
pub const GPG_ERR_USER_10: ::libc::c_uint = 1033;
pub const GPG_ERR_USER_11: ::libc::c_uint = 1034;
pub const GPG_ERR_USER_12: ::libc::c_uint = 1035;
pub const GPG_ERR_USER_13: ::libc::c_uint = 1036;
pub const GPG_ERR_USER_14: ::libc::c_uint = 1037;
pub const GPG_ERR_USER_15: ::libc::c_uint = 1038;
pub const GPG_ERR_USER_16: ::libc::c_uint = 1039;
pub const GPG_ERR_MISSING_ERRNO: ::libc::c_uint = 16381;
pub const GPG_ERR_UNKNOWN_ERRNO: ::libc::c_uint = 16382;
pub const GPG_ERR_EOF: ::libc::c_uint = 16383;
pub const GPG_ERR_E2BIG: ::libc::c_uint = 32768;
pub const GPG_ERR_EACCES: ::libc::c_uint = 32769;
pub const GPG_ERR_EADDRINUSE: ::libc::c_uint = 32770;
pub const GPG_ERR_EADDRNOTAVAIL: ::libc::c_uint = 32771;
pub const GPG_ERR_EADV: ::libc::c_uint = 32772;
pub const GPG_ERR_EAFNOSUPPORT: ::libc::c_uint = 32773;
pub const GPG_ERR_EAGAIN: ::libc::c_uint = 32774;
pub const GPG_ERR_EALREADY: ::libc::c_uint = 32775;
pub const GPG_ERR_EAUTH: ::libc::c_uint = 32776;
pub const GPG_ERR_EBACKGROUND: ::libc::c_uint = 32777;
pub const GPG_ERR_EBADE: ::libc::c_uint = 32778;
pub const GPG_ERR_EBADF: ::libc::c_uint = 32779;
pub const GPG_ERR_EBADFD: ::libc::c_uint = 32780;
pub const GPG_ERR_EBADMSG: ::libc::c_uint = 32781;
pub const GPG_ERR_EBADR: ::libc::c_uint = 32782;
pub const GPG_ERR_EBADRPC: ::libc::c_uint = 32783;
pub const GPG_ERR_EBADRQC: ::libc::c_uint = 32784;
pub const GPG_ERR_EBADSLT: ::libc::c_uint = 32785;
pub const GPG_ERR_EBFONT: ::libc::c_uint = 32786;
pub const GPG_ERR_EBUSY: ::libc::c_uint = 32787;
pub const GPG_ERR_ECANCELED: ::libc::c_uint = 32788;
pub const GPG_ERR_ECHILD: ::libc::c_uint = 32789;
pub const GPG_ERR_ECHRNG: ::libc::c_uint = 32790;
pub const GPG_ERR_ECOMM: ::libc::c_uint = 32791;
pub const GPG_ERR_ECONNABORTED: ::libc::c_uint = 32792;
pub const GPG_ERR_ECONNREFUSED: ::libc::c_uint = 32793;
pub const GPG_ERR_ECONNRESET: ::libc::c_uint = 32794;
pub const GPG_ERR_ED: ::libc::c_uint = 32795;
pub const GPG_ERR_EDEADLK: ::libc::c_uint = 32796;
pub const GPG_ERR_EDEADLOCK: ::libc::c_uint = 32797;
pub const GPG_ERR_EDESTADDRREQ: ::libc::c_uint = 32798;
pub const GPG_ERR_EDIED: ::libc::c_uint = 32799;
pub const GPG_ERR_EDOM: ::libc::c_uint = 32800;
pub const GPG_ERR_EDOTDOT: ::libc::c_uint = 32801;
pub const GPG_ERR_EDQUOT: ::libc::c_uint = 32802;
pub const GPG_ERR_EEXIST: ::libc::c_uint = 32803;
pub const GPG_ERR_EFAULT: ::libc::c_uint = 32804;
pub const GPG_ERR_EFBIG: ::libc::c_uint = 32805;
pub const GPG_ERR_EFTYPE: ::libc::c_uint = 32806;
pub const GPG_ERR_EGRATUITOUS: ::libc::c_uint = 32807;
pub const GPG_ERR_EGREGIOUS: ::libc::c_uint = 32808;
pub const GPG_ERR_EHOSTDOWN: ::libc::c_uint = 32809;
pub const GPG_ERR_EHOSTUNREACH: ::libc::c_uint = 32810;
pub const GPG_ERR_EIDRM: ::libc::c_uint = 32811;
pub const GPG_ERR_EIEIO: ::libc::c_uint = 32812;
pub const GPG_ERR_EILSEQ: ::libc::c_uint = 32813;
pub const GPG_ERR_EINPROGRESS: ::libc::c_uint = 32814;
pub const GPG_ERR_EINTR: ::libc::c_uint = 32815;
pub const GPG_ERR_EINVAL: ::libc::c_uint = 32816;
pub const GPG_ERR_EIO: ::libc::c_uint = 32817;
pub const GPG_ERR_EISCONN: ::libc::c_uint = 32818;
pub const GPG_ERR_EISDIR: ::libc::c_uint = 32819;
pub const GPG_ERR_EISNAM: ::libc::c_uint = 32820;
pub const GPG_ERR_EL2HLT: ::libc::c_uint = 32821;
pub const GPG_ERR_EL2NSYNC: ::libc::c_uint = 32822;
pub const GPG_ERR_EL3HLT: ::libc::c_uint = 32823;
pub const GPG_ERR_EL3RST: ::libc::c_uint = 32824;
pub const GPG_ERR_ELIBACC: ::libc::c_uint = 32825;
pub const GPG_ERR_ELIBBAD: ::libc::c_uint = 32826;
pub const GPG_ERR_ELIBEXEC: ::libc::c_uint = 32827;
pub const GPG_ERR_ELIBMAX: ::libc::c_uint = 32828;
pub const GPG_ERR_ELIBSCN: ::libc::c_uint = 32829;
pub const GPG_ERR_ELNRNG: ::libc::c_uint = 32830;
pub const GPG_ERR_ELOOP: ::libc::c_uint = 32831;
pub const GPG_ERR_EMEDIUMTYPE: ::libc::c_uint = 32832;
pub const GPG_ERR_EMFILE: ::libc::c_uint = 32833;
pub const GPG_ERR_EMLINK: ::libc::c_uint = 32834;
pub const GPG_ERR_EMSGSIZE: ::libc::c_uint = 32835;
pub const GPG_ERR_EMULTIHOP: ::libc::c_uint = 32836;
pub const GPG_ERR_ENAMETOOLONG: ::libc::c_uint = 32837;
pub const GPG_ERR_ENAVAIL: ::libc::c_uint = 32838;
pub const GPG_ERR_ENEEDAUTH: ::libc::c_uint = 32839;
pub const GPG_ERR_ENETDOWN: ::libc::c_uint = 32840;
pub const GPG_ERR_ENETRESET: ::libc::c_uint = 32841;
pub const GPG_ERR_ENETUNREACH: ::libc::c_uint = 32842;
pub const GPG_ERR_ENFILE: ::libc::c_uint = 32843;
pub const GPG_ERR_ENOANO: ::libc::c_uint = 32844;
pub const GPG_ERR_ENOBUFS: ::libc::c_uint = 32845;
pub const GPG_ERR_ENOCSI: ::libc::c_uint = 32846;
pub const GPG_ERR_ENODATA: ::libc::c_uint = 32847;
pub const GPG_ERR_ENODEV: ::libc::c_uint = 32848;
pub const GPG_ERR_ENOENT: ::libc::c_uint = 32849;
pub const GPG_ERR_ENOEXEC: ::libc::c_uint = 32850;
pub const GPG_ERR_ENOLCK: ::libc::c_uint = 32851;
pub const GPG_ERR_ENOLINK: ::libc::c_uint = 32852;
pub const GPG_ERR_ENOMEDIUM: ::libc::c_uint = 32853;
pub const GPG_ERR_ENOMEM: ::libc::c_uint = 32854;
pub const GPG_ERR_ENOMSG: ::libc::c_uint = 32855;
pub const GPG_ERR_ENONET: ::libc::c_uint = 32856;
pub const GPG_ERR_ENOPKG: ::libc::c_uint = 32857;
pub const GPG_ERR_ENOPROTOOPT: ::libc::c_uint = 32858;
pub const GPG_ERR_ENOSPC: ::libc::c_uint = 32859;
pub const GPG_ERR_ENOSR: ::libc::c_uint = 32860;
pub const GPG_ERR_ENOSTR: ::libc::c_uint = 32861;
pub const GPG_ERR_ENOSYS: ::libc::c_uint = 32862;
pub const GPG_ERR_ENOTBLK: ::libc::c_uint = 32863;
pub const GPG_ERR_ENOTCONN: ::libc::c_uint = 32864;
pub const GPG_ERR_ENOTDIR: ::libc::c_uint = 32865;
pub const GPG_ERR_ENOTEMPTY: ::libc::c_uint = 32866;
pub const GPG_ERR_ENOTNAM: ::libc::c_uint = 32867;
pub const GPG_ERR_ENOTSOCK: ::libc::c_uint = 32868;
pub const GPG_ERR_ENOTSUP: ::libc::c_uint = 32869;
pub const GPG_ERR_ENOTTY: ::libc::c_uint = 32870;
pub const GPG_ERR_ENOTUNIQ: ::libc::c_uint = 32871;
pub const GPG_ERR_ENXIO: ::libc::c_uint = 32872;
pub const GPG_ERR_EOPNOTSUPP: ::libc::c_uint = 32873;
pub const GPG_ERR_EOVERFLOW: ::libc::c_uint = 32874;
pub const GPG_ERR_EPERM: ::libc::c_uint = 32875;
pub const GPG_ERR_EPFNOSUPPORT: ::libc::c_uint = 32876;
pub const GPG_ERR_EPIPE: ::libc::c_uint = 32877;
pub const GPG_ERR_EPROCLIM: ::libc::c_uint = 32878;
pub const GPG_ERR_EPROCUNAVAIL: ::libc::c_uint = 32879;
pub const GPG_ERR_EPROGMISMATCH: ::libc::c_uint = 32880;
pub const GPG_ERR_EPROGUNAVAIL: ::libc::c_uint = 32881;
pub const GPG_ERR_EPROTO: ::libc::c_uint = 32882;
pub const GPG_ERR_EPROTONOSUPPORT: ::libc::c_uint = 32883;
pub const GPG_ERR_EPROTOTYPE: ::libc::c_uint = 32884;
pub const GPG_ERR_ERANGE: ::libc::c_uint = 32885;
pub const GPG_ERR_EREMCHG: ::libc::c_uint = 32886;
pub const GPG_ERR_EREMOTE: ::libc::c_uint = 32887;
pub const GPG_ERR_EREMOTEIO: ::libc::c_uint = 32888;
pub const GPG_ERR_ERESTART: ::libc::c_uint = 32889;
pub const GPG_ERR_EROFS: ::libc::c_uint = 32890;
pub const GPG_ERR_ERPCMISMATCH: ::libc::c_uint = 32891;
pub const GPG_ERR_ESHUTDOWN: ::libc::c_uint = 32892;
pub const GPG_ERR_ESOCKTNOSUPPORT: ::libc::c_uint = 32893;
pub const GPG_ERR_ESPIPE: ::libc::c_uint = 32894;
pub const GPG_ERR_ESRCH: ::libc::c_uint = 32895;
pub const GPG_ERR_ESRMNT: ::libc::c_uint = 32896;
pub const GPG_ERR_ESTALE: ::libc::c_uint = 32897;
pub const GPG_ERR_ESTRPIPE: ::libc::c_uint = 32898;
pub const GPG_ERR_ETIME: ::libc::c_uint = 32899;
pub const GPG_ERR_ETIMEDOUT: ::libc::c_uint = 32900;
pub const GPG_ERR_ETOOMANYREFS: ::libc::c_uint = 32901;
pub const GPG_ERR_ETXTBSY: ::libc::c_uint = 32902;
pub const GPG_ERR_EUCLEAN: ::libc::c_uint = 32903;
pub const GPG_ERR_EUNATCH: ::libc::c_uint = 32904;
pub const GPG_ERR_EUSERS: ::libc::c_uint = 32905;
pub const GPG_ERR_EWOULDBLOCK: ::libc::c_uint = 32906;
pub const GPG_ERR_EXDEV: ::libc::c_uint = 32907;
pub const GPG_ERR_EXFULL: ::libc::c_uint = 32908;
pub const GPG_ERR_CODE_DIM: ::libc::c_uint = 65536;
pub type gpg_err_code_t = Enum_Unnamed67;
pub type gpg_error_t = ::libc::c_uint;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed68 {
    pub _vers: ::libc::c_long,
    pub u: Union_Unnamed69,
}
impl ::std::default::Default for Struct_Unnamed68 {
    fn default() -> Struct_Unnamed68 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed69 {
    pub _bindgen_data_: [u64; 5usize],
}
impl Union_Unnamed69 {
    pub unsafe fn _priv(&mut self) -> *mut [::libc::c_char; 40usize] {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn _x_align(&mut self) -> *mut ::libc::c_long {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn _xp_align(&mut self) -> *mut *mut ::libc::c_long {
        ::std::mem::transmute(&self._bindgen_data_)
    }
}
impl ::std::default::Default for Union_Unnamed69 {
    fn default() -> Union_Unnamed69 { unsafe { ::std::mem::zeroed() } }
}
pub type gpgrt_lock_t = Struct_Unnamed68;
pub enum Struct__gpgrt_stream_internal { }
#[repr(C)]
#[derive(Copy)]
pub struct Struct__gpgrt__stream {
    pub flags: Struct_Unnamed70,
    pub buffer: *mut ::libc::c_uchar,
    pub buffer_size: size_t,
    pub data_len: size_t,
    pub data_offset: size_t,
    pub data_flushed: size_t,
    pub unread_buffer: *mut ::libc::c_uchar,
    pub unread_buffer_size: size_t,
    pub unread_data_len: size_t,
    pub intern: *mut Struct__gpgrt_stream_internal,
}
impl ::std::default::Default for Struct__gpgrt__stream {
    fn default() -> Struct__gpgrt__stream { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed70 {
    pub _bindgen_bitfield_1_: ::libc::c_uint,
}
impl ::std::default::Default for Struct_Unnamed70 {
    fn default() -> Struct_Unnamed70 { unsafe { ::std::mem::zeroed() } }
}
pub type gpgrt_stream_t = *mut Struct__gpgrt__stream;
pub type gpgrt_cookie_read_function_t =
    ::std::option::Option<extern "C" fn
                              (cookie: *mut ::libc::c_void,
                               buffer: *mut ::libc::c_void, size: size_t)
                              -> ssize_t>;
pub type gpgrt_cookie_write_function_t =
    ::std::option::Option<extern "C" fn
                              (cookie: *mut ::libc::c_void,
                               buffer: *const ::libc::c_void, size: size_t)
                              -> ssize_t>;
pub type gpgrt_cookie_seek_function_t =
    ::std::option::Option<extern "C" fn
                              (cookie: *mut ::libc::c_void, pos: *mut off_t,
                               whence: ::libc::c_int) -> ::libc::c_int>;
pub type gpgrt_cookie_close_function_t =
    ::std::option::Option<extern "C" fn(cookie: *mut ::libc::c_void)
                              -> ::libc::c_int>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__gpgrt_cookie_io_functions {
    pub func_read: gpgrt_cookie_read_function_t,
    pub func_write: gpgrt_cookie_write_function_t,
    pub func_seek: gpgrt_cookie_seek_function_t,
    pub func_close: gpgrt_cookie_close_function_t,
}
impl ::std::default::Default for Struct__gpgrt_cookie_io_functions {
    fn default() -> Struct__gpgrt_cookie_io_functions {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type gpgrt_cookie_io_functions_t = Struct__gpgrt_cookie_io_functions;
pub type Enum_gpgrt_syshd_types = ::libc::c_uint;
pub const GPGRT_SYSHD_NONE: ::libc::c_uint = 0;
pub const GPGRT_SYSHD_FD: ::libc::c_uint = 1;
pub const GPGRT_SYSHD_SOCK: ::libc::c_uint = 2;
pub const GPGRT_SYSHD_RVID: ::libc::c_uint = 3;
pub const GPGRT_SYSHD_HANDLE: ::libc::c_uint = 4;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__gpgrt_syshd {
    pub _type: Enum_gpgrt_syshd_types,
    pub u: Union_Unnamed71,
}
impl ::std::default::Default for Struct__gpgrt_syshd {
    fn default() -> Struct__gpgrt_syshd { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed71 {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union_Unnamed71 {
    pub unsafe fn fd(&mut self) -> *mut ::libc::c_int {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn sock(&mut self) -> *mut ::libc::c_int {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn rvid(&mut self) -> *mut ::libc::c_int {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn handle(&mut self) -> *mut *mut ::libc::c_void {
        ::std::mem::transmute(&self._bindgen_data_)
    }
}
impl ::std::default::Default for Union_Unnamed71 {
    fn default() -> Union_Unnamed71 { unsafe { ::std::mem::zeroed() } }
}
pub type gpgrt_syshd_t = Struct__gpgrt_syshd;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_timezone {
    pub tz_minuteswest: ::libc::c_int,
    pub tz_dsttime: ::libc::c_int,
}
impl ::std::default::Default for Struct_timezone {
    fn default() -> Struct_timezone { unsafe { ::std::mem::zeroed() } }
}
pub type __timezone_ptr_t = *mut Struct_timezone;
pub type Enum___itimer_which = ::libc::c_uint;
pub const ITIMER_REAL: ::libc::c_uint = 0;
pub const ITIMER_VIRTUAL: ::libc::c_uint = 1;
pub const ITIMER_PROF: ::libc::c_uint = 2;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_itimerval {
    pub it_interval: Struct_timeval,
    pub it_value: Struct_timeval,
}
impl ::std::default::Default for Struct_itimerval {
    fn default() -> Struct_itimerval { unsafe { ::std::mem::zeroed() } }
}
pub type __itimer_which_t = ::libc::c_int;
pub type gcry_socklen_t = socklen_t;
pub type gcry_error_t = gpg_error_t;
pub type gcry_err_code_t = gpg_err_code_t;
pub type gcry_err_source_t = gpg_err_source_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_gcry_thread_cbs {
    pub option: ::libc::c_uint,
}
impl ::std::default::Default for Struct_gcry_thread_cbs {
    fn default() -> Struct_gcry_thread_cbs { unsafe { ::std::mem::zeroed() } }
}
pub enum Struct_gcry_context { }
pub type gcry_ctx_t = *mut Struct_gcry_context;
pub enum Struct_gcry_mpi { }
pub type gcry_mpi_t = *mut Struct_gcry_mpi;
pub enum Struct_gcry_mpi_point { }
pub type gcry_mpi_point_t = *mut Struct_gcry_mpi_point;
pub type GCRY_MPI = *mut Struct_gcry_mpi;
pub type GcryMPI = *mut Struct_gcry_mpi;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed72 {
    pub size: size_t,
    pub off: size_t,
    pub len: size_t,
    pub data: *mut ::libc::c_void,
}
impl ::std::default::Default for Struct_Unnamed72 {
    fn default() -> Struct_Unnamed72 { unsafe { ::std::mem::zeroed() } }
}
pub type gcry_buffer_t = Struct_Unnamed72;
pub type Enum_gcry_ctl_cmds = ::libc::c_uint;
pub const GCRYCTL_CFB_SYNC: ::libc::c_uint = 3;
pub const GCRYCTL_RESET: ::libc::c_uint = 4;
pub const GCRYCTL_FINALIZE: ::libc::c_uint = 5;
pub const GCRYCTL_GET_KEYLEN: ::libc::c_uint = 6;
pub const GCRYCTL_GET_BLKLEN: ::libc::c_uint = 7;
pub const GCRYCTL_TEST_ALGO: ::libc::c_uint = 8;
pub const GCRYCTL_IS_SECURE: ::libc::c_uint = 9;
pub const GCRYCTL_GET_ASNOID: ::libc::c_uint = 10;
pub const GCRYCTL_ENABLE_ALGO: ::libc::c_uint = 11;
pub const GCRYCTL_DISABLE_ALGO: ::libc::c_uint = 12;
pub const GCRYCTL_DUMP_RANDOM_STATS: ::libc::c_uint = 13;
pub const GCRYCTL_DUMP_SECMEM_STATS: ::libc::c_uint = 14;
pub const GCRYCTL_GET_ALGO_NPKEY: ::libc::c_uint = 15;
pub const GCRYCTL_GET_ALGO_NSKEY: ::libc::c_uint = 16;
pub const GCRYCTL_GET_ALGO_NSIGN: ::libc::c_uint = 17;
pub const GCRYCTL_GET_ALGO_NENCR: ::libc::c_uint = 18;
pub const GCRYCTL_SET_VERBOSITY: ::libc::c_uint = 19;
pub const GCRYCTL_SET_DEBUG_FLAGS: ::libc::c_uint = 20;
pub const GCRYCTL_CLEAR_DEBUG_FLAGS: ::libc::c_uint = 21;
pub const GCRYCTL_USE_SECURE_RNDPOOL: ::libc::c_uint = 22;
pub const GCRYCTL_DUMP_MEMORY_STATS: ::libc::c_uint = 23;
pub const GCRYCTL_INIT_SECMEM: ::libc::c_uint = 24;
pub const GCRYCTL_TERM_SECMEM: ::libc::c_uint = 25;
pub const GCRYCTL_DISABLE_SECMEM_WARN: ::libc::c_uint = 27;
pub const GCRYCTL_SUSPEND_SECMEM_WARN: ::libc::c_uint = 28;
pub const GCRYCTL_RESUME_SECMEM_WARN: ::libc::c_uint = 29;
pub const GCRYCTL_DROP_PRIVS: ::libc::c_uint = 30;
pub const GCRYCTL_ENABLE_M_GUARD: ::libc::c_uint = 31;
pub const GCRYCTL_START_DUMP: ::libc::c_uint = 32;
pub const GCRYCTL_STOP_DUMP: ::libc::c_uint = 33;
pub const GCRYCTL_GET_ALGO_USAGE: ::libc::c_uint = 34;
pub const GCRYCTL_IS_ALGO_ENABLED: ::libc::c_uint = 35;
pub const GCRYCTL_DISABLE_INTERNAL_LOCKING: ::libc::c_uint = 36;
pub const GCRYCTL_DISABLE_SECMEM: ::libc::c_uint = 37;
pub const GCRYCTL_INITIALIZATION_FINISHED: ::libc::c_uint = 38;
pub const GCRYCTL_INITIALIZATION_FINISHED_P: ::libc::c_uint = 39;
pub const GCRYCTL_ANY_INITIALIZATION_P: ::libc::c_uint = 40;
pub const GCRYCTL_SET_CBC_CTS: ::libc::c_uint = 41;
pub const GCRYCTL_SET_CBC_MAC: ::libc::c_uint = 42;
pub const GCRYCTL_ENABLE_QUICK_RANDOM: ::libc::c_uint = 44;
pub const GCRYCTL_SET_RANDOM_SEED_FILE: ::libc::c_uint = 45;
pub const GCRYCTL_UPDATE_RANDOM_SEED_FILE: ::libc::c_uint = 46;
pub const GCRYCTL_SET_THREAD_CBS: ::libc::c_uint = 47;
pub const GCRYCTL_FAST_POLL: ::libc::c_uint = 48;
pub const GCRYCTL_SET_RANDOM_DAEMON_SOCKET: ::libc::c_uint = 49;
pub const GCRYCTL_USE_RANDOM_DAEMON: ::libc::c_uint = 50;
pub const GCRYCTL_FAKED_RANDOM_P: ::libc::c_uint = 51;
pub const GCRYCTL_SET_RNDEGD_SOCKET: ::libc::c_uint = 52;
pub const GCRYCTL_PRINT_CONFIG: ::libc::c_uint = 53;
pub const GCRYCTL_OPERATIONAL_P: ::libc::c_uint = 54;
pub const GCRYCTL_FIPS_MODE_P: ::libc::c_uint = 55;
pub const GCRYCTL_FORCE_FIPS_MODE: ::libc::c_uint = 56;
pub const GCRYCTL_SELFTEST: ::libc::c_uint = 57;
pub const GCRYCTL_DISABLE_HWF: ::libc::c_uint = 63;
pub const GCRYCTL_SET_ENFORCED_FIPS_FLAG: ::libc::c_uint = 64;
pub const GCRYCTL_SET_PREFERRED_RNG_TYPE: ::libc::c_uint = 65;
pub const GCRYCTL_GET_CURRENT_RNG_TYPE: ::libc::c_uint = 66;
pub const GCRYCTL_DISABLE_LOCKED_SECMEM: ::libc::c_uint = 67;
pub const GCRYCTL_DISABLE_PRIV_DROP: ::libc::c_uint = 68;
pub const GCRYCTL_SET_CCM_LENGTHS: ::libc::c_uint = 69;
pub const GCRYCTL_CLOSE_RANDOM_DEVICE: ::libc::c_uint = 70;
pub enum Struct_gcry_sexp { }
pub type gcry_sexp_t = *mut Struct_gcry_sexp;
pub type GCRY_SEXP = *mut Struct_gcry_sexp;
pub type GcrySexp = *mut Struct_gcry_sexp;
pub type Enum_gcry_sexp_format = ::libc::c_uint;
pub const GCRYSEXP_FMT_DEFAULT: ::libc::c_uint = 0;
pub const GCRYSEXP_FMT_CANON: ::libc::c_uint = 1;
pub const GCRYSEXP_FMT_BASE64: ::libc::c_uint = 2;
pub const GCRYSEXP_FMT_ADVANCED: ::libc::c_uint = 3;
pub type Enum_gcry_mpi_format = ::libc::c_uint;
pub const GCRYMPI_FMT_NONE: ::libc::c_uint = 0;
pub const GCRYMPI_FMT_STD: ::libc::c_uint = 1;
pub const GCRYMPI_FMT_PGP: ::libc::c_uint = 2;
pub const GCRYMPI_FMT_SSH: ::libc::c_uint = 3;
pub const GCRYMPI_FMT_HEX: ::libc::c_uint = 4;
pub const GCRYMPI_FMT_USG: ::libc::c_uint = 5;
pub const GCRYMPI_FMT_OPAQUE: ::libc::c_uint = 8;
pub type Enum_gcry_mpi_flag = ::libc::c_uint;
pub const GCRYMPI_FLAG_SECURE: ::libc::c_uint = 1;
pub const GCRYMPI_FLAG_OPAQUE: ::libc::c_uint = 2;
pub const GCRYMPI_FLAG_IMMUTABLE: ::libc::c_uint = 4;
pub const GCRYMPI_FLAG_CONST: ::libc::c_uint = 8;
pub const GCRYMPI_FLAG_USER1: ::libc::c_uint = 256;
pub const GCRYMPI_FLAG_USER2: ::libc::c_uint = 512;
pub const GCRYMPI_FLAG_USER3: ::libc::c_uint = 1024;
pub const GCRYMPI_FLAG_USER4: ::libc::c_uint = 2048;
pub enum Struct_gcry_cipher_handle { }
pub type gcry_cipher_hd_t = *mut Struct_gcry_cipher_handle;
pub type GCRY_CIPHER_HD = *mut Struct_gcry_cipher_handle;
pub type GcryCipherHd = *mut Struct_gcry_cipher_handle;
pub type Enum_gcry_cipher_algos = ::libc::c_uint;
pub const GCRY_CIPHER_NONE: ::libc::c_uint = 0;
pub const GCRY_CIPHER_IDEA: ::libc::c_uint = 1;
pub const GCRY_CIPHER_3DES: ::libc::c_uint = 2;
pub const GCRY_CIPHER_CAST5: ::libc::c_uint = 3;
pub const GCRY_CIPHER_BLOWFISH: ::libc::c_uint = 4;
pub const GCRY_CIPHER_SAFER_SK128: ::libc::c_uint = 5;
pub const GCRY_CIPHER_DES_SK: ::libc::c_uint = 6;
pub const GCRY_CIPHER_AES: ::libc::c_uint = 7;
pub const GCRY_CIPHER_AES192: ::libc::c_uint = 8;
pub const GCRY_CIPHER_AES256: ::libc::c_uint = 9;
pub const GCRY_CIPHER_TWOFISH: ::libc::c_uint = 10;
pub const GCRY_CIPHER_ARCFOUR: ::libc::c_uint = 301;
pub const GCRY_CIPHER_DES: ::libc::c_uint = 302;
pub const GCRY_CIPHER_TWOFISH128: ::libc::c_uint = 303;
pub const GCRY_CIPHER_SERPENT128: ::libc::c_uint = 304;
pub const GCRY_CIPHER_SERPENT192: ::libc::c_uint = 305;
pub const GCRY_CIPHER_SERPENT256: ::libc::c_uint = 306;
pub const GCRY_CIPHER_RFC2268_40: ::libc::c_uint = 307;
pub const GCRY_CIPHER_RFC2268_128: ::libc::c_uint = 308;
pub const GCRY_CIPHER_SEED: ::libc::c_uint = 309;
pub const GCRY_CIPHER_CAMELLIA128: ::libc::c_uint = 310;
pub const GCRY_CIPHER_CAMELLIA192: ::libc::c_uint = 311;
pub const GCRY_CIPHER_CAMELLIA256: ::libc::c_uint = 312;
pub const GCRY_CIPHER_SALSA20: ::libc::c_uint = 313;
pub const GCRY_CIPHER_SALSA20R12: ::libc::c_uint = 314;
pub const GCRY_CIPHER_GOST28147: ::libc::c_uint = 315;
pub type Enum_gcry_cipher_modes = ::libc::c_uint;
pub const GCRY_CIPHER_MODE_NONE: ::libc::c_uint = 0;
pub const GCRY_CIPHER_MODE_ECB: ::libc::c_uint = 1;
pub const GCRY_CIPHER_MODE_CFB: ::libc::c_uint = 2;
pub const GCRY_CIPHER_MODE_CBC: ::libc::c_uint = 3;
pub const GCRY_CIPHER_MODE_STREAM: ::libc::c_uint = 4;
pub const GCRY_CIPHER_MODE_OFB: ::libc::c_uint = 5;
pub const GCRY_CIPHER_MODE_CTR: ::libc::c_uint = 6;
pub const GCRY_CIPHER_MODE_AESWRAP: ::libc::c_uint = 7;
pub const GCRY_CIPHER_MODE_CCM: ::libc::c_uint = 8;
pub const GCRY_CIPHER_MODE_GCM: ::libc::c_uint = 9;
pub type Enum_gcry_cipher_flags = ::libc::c_uint;
pub const GCRY_CIPHER_SECURE: ::libc::c_uint = 1;
pub const GCRY_CIPHER_ENABLE_SYNC: ::libc::c_uint = 2;
pub const GCRY_CIPHER_CBC_CTS: ::libc::c_uint = 4;
pub const GCRY_CIPHER_CBC_MAC: ::libc::c_uint = 8;
pub type Enum_gcry_pk_algos = ::libc::c_uint;
pub const GCRY_PK_RSA: ::libc::c_uint = 1;
pub const GCRY_PK_RSA_E: ::libc::c_uint = 2;
pub const GCRY_PK_RSA_S: ::libc::c_uint = 3;
pub const GCRY_PK_ELG_E: ::libc::c_uint = 16;
pub const GCRY_PK_DSA: ::libc::c_uint = 17;
pub const GCRY_PK_ECC: ::libc::c_uint = 18;
pub const GCRY_PK_ELG: ::libc::c_uint = 20;
pub const GCRY_PK_ECDSA: ::libc::c_uint = 301;
pub const GCRY_PK_ECDH: ::libc::c_uint = 302;
pub type Enum_gcry_md_algos = ::libc::c_uint;
pub const GCRY_MD_NONE: ::libc::c_uint = 0;
pub const GCRY_MD_MD5: ::libc::c_uint = 1;
pub const GCRY_MD_SHA1: ::libc::c_uint = 2;
pub const GCRY_MD_RMD160: ::libc::c_uint = 3;
pub const GCRY_MD_MD2: ::libc::c_uint = 5;
pub const GCRY_MD_TIGER: ::libc::c_uint = 6;
pub const GCRY_MD_HAVAL: ::libc::c_uint = 7;
pub const GCRY_MD_SHA256: ::libc::c_uint = 8;
pub const GCRY_MD_SHA384: ::libc::c_uint = 9;
pub const GCRY_MD_SHA512: ::libc::c_uint = 10;
pub const GCRY_MD_SHA224: ::libc::c_uint = 11;
pub const GCRY_MD_MD4: ::libc::c_uint = 301;
pub const GCRY_MD_CRC32: ::libc::c_uint = 302;
pub const GCRY_MD_CRC32_RFC1510: ::libc::c_uint = 303;
pub const GCRY_MD_CRC24_RFC2440: ::libc::c_uint = 304;
pub const GCRY_MD_WHIRLPOOL: ::libc::c_uint = 305;
pub const GCRY_MD_TIGER1: ::libc::c_uint = 306;
pub const GCRY_MD_TIGER2: ::libc::c_uint = 307;
pub const GCRY_MD_GOSTR3411_94: ::libc::c_uint = 308;
pub const GCRY_MD_STRIBOG256: ::libc::c_uint = 309;
pub const GCRY_MD_STRIBOG512: ::libc::c_uint = 310;
pub type Enum_gcry_md_flags = ::libc::c_uint;
pub const GCRY_MD_FLAG_SECURE: ::libc::c_uint = 1;
pub const GCRY_MD_FLAG_HMAC: ::libc::c_uint = 2;
pub enum Struct_gcry_md_context { }
#[repr(C)]
#[derive(Copy)]
pub struct Struct_gcry_md_handle {
    pub ctx: *mut Struct_gcry_md_context,
    pub bufpos: ::libc::c_int,
    pub bufsize: ::libc::c_int,
    pub buf: [::libc::c_uchar; 1usize],
}
impl ::std::default::Default for Struct_gcry_md_handle {
    fn default() -> Struct_gcry_md_handle { unsafe { ::std::mem::zeroed() } }
}
pub type gcry_md_hd_t = *mut Struct_gcry_md_handle;
pub type GCRY_MD_HD = *mut Struct_gcry_md_handle;
pub type GcryMDHd = *mut Struct_gcry_md_handle;
pub enum Struct_gcry_mac_handle { }
pub type gcry_mac_hd_t = *mut Struct_gcry_mac_handle;
pub type Enum_gcry_mac_algos = ::libc::c_uint;
pub const GCRY_MAC_NONE: ::libc::c_uint = 0;
pub const GCRY_MAC_HMAC_SHA256: ::libc::c_uint = 101;
pub const GCRY_MAC_HMAC_SHA224: ::libc::c_uint = 102;
pub const GCRY_MAC_HMAC_SHA512: ::libc::c_uint = 103;
pub const GCRY_MAC_HMAC_SHA384: ::libc::c_uint = 104;
pub const GCRY_MAC_HMAC_SHA1: ::libc::c_uint = 105;
pub const GCRY_MAC_HMAC_MD5: ::libc::c_uint = 106;
pub const GCRY_MAC_HMAC_MD4: ::libc::c_uint = 107;
pub const GCRY_MAC_HMAC_RMD160: ::libc::c_uint = 108;
pub const GCRY_MAC_HMAC_TIGER1: ::libc::c_uint = 109;
pub const GCRY_MAC_HMAC_WHIRLPOOL: ::libc::c_uint = 110;
pub const GCRY_MAC_HMAC_GOSTR3411_94: ::libc::c_uint = 111;
pub const GCRY_MAC_HMAC_STRIBOG256: ::libc::c_uint = 112;
pub const GCRY_MAC_HMAC_STRIBOG512: ::libc::c_uint = 113;
pub const GCRY_MAC_CMAC_AES: ::libc::c_uint = 201;
pub const GCRY_MAC_CMAC_3DES: ::libc::c_uint = 202;
pub const GCRY_MAC_CMAC_CAMELLIA: ::libc::c_uint = 203;
pub const GCRY_MAC_CMAC_CAST5: ::libc::c_uint = 204;
pub const GCRY_MAC_CMAC_BLOWFISH: ::libc::c_uint = 205;
pub const GCRY_MAC_CMAC_TWOFISH: ::libc::c_uint = 206;
pub const GCRY_MAC_CMAC_SERPENT: ::libc::c_uint = 207;
pub const GCRY_MAC_CMAC_SEED: ::libc::c_uint = 208;
pub const GCRY_MAC_CMAC_RFC2268: ::libc::c_uint = 209;
pub const GCRY_MAC_CMAC_IDEA: ::libc::c_uint = 210;
pub const GCRY_MAC_CMAC_GOST28147: ::libc::c_uint = 211;
pub const GCRY_MAC_GMAC_AES: ::libc::c_uint = 401;
pub const GCRY_MAC_GMAC_CAMELLIA: ::libc::c_uint = 402;
pub const GCRY_MAC_GMAC_TWOFISH: ::libc::c_uint = 403;
pub const GCRY_MAC_GMAC_SERPENT: ::libc::c_uint = 404;
pub const GCRY_MAC_GMAC_SEED: ::libc::c_uint = 405;
pub type Enum_gcry_mac_flags = ::libc::c_uint;
pub const GCRY_MAC_FLAG_SECURE: ::libc::c_uint = 1;
pub type Enum_gcry_kdf_algos = ::libc::c_uint;
pub const GCRY_KDF_NONE: ::libc::c_uint = 0;
pub const GCRY_KDF_SIMPLE_S2K: ::libc::c_uint = 16;
pub const GCRY_KDF_SALTED_S2K: ::libc::c_uint = 17;
pub const GCRY_KDF_ITERSALTED_S2K: ::libc::c_uint = 19;
pub const GCRY_KDF_PBKDF1: ::libc::c_uint = 33;
pub const GCRY_KDF_PBKDF2: ::libc::c_uint = 34;
pub const GCRY_KDF_SCRYPT: ::libc::c_uint = 48;
pub type Enum_gcry_rng_types = ::libc::c_uint;
pub const GCRY_RNG_TYPE_STANDARD: ::libc::c_uint = 1;
pub const GCRY_RNG_TYPE_FIPS: ::libc::c_uint = 2;
pub const GCRY_RNG_TYPE_SYSTEM: ::libc::c_uint = 3;
pub type Enum_gcry_random_level = ::libc::c_uint;
pub const GCRY_WEAK_RANDOM: ::libc::c_uint = 0;
pub const GCRY_STRONG_RANDOM: ::libc::c_uint = 1;
pub const GCRY_VERY_STRONG_RANDOM: ::libc::c_uint = 2;
pub type gcry_random_level_t = Enum_gcry_random_level;
pub type gcry_prime_check_func_t =
    ::std::option::Option<extern "C" fn
                              (arg: *mut ::libc::c_void, mode: ::libc::c_int,
                               candidate: gcry_mpi_t) -> ::libc::c_int>;
pub type Enum_gcry_log_levels = ::libc::c_uint;
pub const GCRY_LOG_CONT: ::libc::c_uint = 0;
pub const GCRY_LOG_INFO: ::libc::c_uint = 10;
pub const GCRY_LOG_WARN: ::libc::c_uint = 20;
pub const GCRY_LOG_ERROR: ::libc::c_uint = 30;
pub const GCRY_LOG_FATAL: ::libc::c_uint = 40;
pub const GCRY_LOG_BUG: ::libc::c_uint = 50;
pub const GCRY_LOG_DEBUG: ::libc::c_uint = 100;
pub type gcry_handler_progress_t =
    ::std::option::Option<extern "C" fn
                              (arg1: *mut ::libc::c_void,
                               arg2: *const ::libc::c_char,
                               arg3: ::libc::c_int, arg4: ::libc::c_int,
                               arg5: ::libc::c_int) -> ()>;
pub type gcry_handler_alloc_t =
    ::std::option::Option<extern "C" fn(n: size_t) -> *mut ::libc::c_void>;
pub type gcry_handler_secure_check_t =
    ::std::option::Option<extern "C" fn(arg1: *const ::libc::c_void)
                              -> ::libc::c_int>;
pub type gcry_handler_realloc_t =
    ::std::option::Option<extern "C" fn(p: *mut ::libc::c_void, n: size_t)
                              -> *mut ::libc::c_void>;
pub type gcry_handler_free_t =
    ::std::option::Option<extern "C" fn(arg1: *mut ::libc::c_void) -> ()>;
pub type gcry_handler_no_mem_t =
    ::std::option::Option<extern "C" fn
                              (arg1: *mut ::libc::c_void, arg2: size_t,
                               arg3: ::libc::c_uint) -> ::libc::c_int>;
pub type gcry_handler_error_t =
    ::std::option::Option<extern "C" fn
                              (arg1: *mut ::libc::c_void, arg2: ::libc::c_int,
                               arg3: *const ::libc::c_char) -> ()>;
pub type gcry_handler_log_t =
    ::std::option::Option<extern "C" fn
                              (arg1: *mut ::libc::c_void, arg2: ::libc::c_int,
                               arg3: *const ::libc::c_char, arg4: va_list)
                              -> ()>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_GNUNET_HashCode {
    pub bits: [uint32_t; 16usize],
}
impl ::std::default::Default for Struct_GNUNET_HashCode {
    fn default() -> Struct_GNUNET_HashCode { unsafe { ::std::mem::zeroed() } }
}
pub type Enum_GNUNET_CRYPTO_Quality = ::libc::c_uint;
pub const GNUNET_CRYPTO_QUALITY_WEAK: ::libc::c_uint = 0;
pub const GNUNET_CRYPTO_QUALITY_STRONG: ::libc::c_uint = 1;
pub const GNUNET_CRYPTO_QUALITY_NONCE: ::libc::c_uint = 2;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_GNUNET_CRYPTO_HashAsciiEncoded {
    pub encoding: [::libc::c_uchar; 104usize],
}
impl ::std::default::Default for Struct_GNUNET_CRYPTO_HashAsciiEncoded {
    fn default() -> Struct_GNUNET_CRYPTO_HashAsciiEncoded {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_GNUNET_CRYPTO_EccSignaturePurpose {
    pub size: uint32_t,
    pub purpose: uint32_t,
}
impl ::std::default::Default for Struct_GNUNET_CRYPTO_EccSignaturePurpose {
    fn default() -> Struct_GNUNET_CRYPTO_EccSignaturePurpose {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_GNUNET_CRYPTO_EddsaSignature {
    pub r: [::libc::c_uchar; 32usize],
    pub s: [::libc::c_uchar; 32usize],
}
impl ::std::default::Default for Struct_GNUNET_CRYPTO_EddsaSignature {
    fn default() -> Struct_GNUNET_CRYPTO_EddsaSignature {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_GNUNET_CRYPTO_EcdsaSignature {
    pub r: [::libc::c_uchar; 32usize],
    pub s: [::libc::c_uchar; 32usize],
}
impl ::std::default::Default for Struct_GNUNET_CRYPTO_EcdsaSignature {
    fn default() -> Struct_GNUNET_CRYPTO_EcdsaSignature {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_GNUNET_CRYPTO_EddsaPublicKey {
    pub q_y: [::libc::c_uchar; 32usize],
}
impl ::std::default::Default for Struct_GNUNET_CRYPTO_EddsaPublicKey {
    fn default() -> Struct_GNUNET_CRYPTO_EddsaPublicKey {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_GNUNET_CRYPTO_EcdsaPublicKey {
    pub q_y: [::libc::c_uchar; 32usize],
}
impl ::std::default::Default for Struct_GNUNET_CRYPTO_EcdsaPublicKey {
    fn default() -> Struct_GNUNET_CRYPTO_EcdsaPublicKey {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_GNUNET_PeerIdentity {
    pub public_key: Struct_GNUNET_CRYPTO_EddsaPublicKey,
}
impl ::std::default::Default for Struct_GNUNET_PeerIdentity {
    fn default() -> Struct_GNUNET_PeerIdentity {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_GNUNET_CRYPTO_EcdhePublicKey {
    pub q_y: [::libc::c_uchar; 32usize],
}
impl ::std::default::Default for Struct_GNUNET_CRYPTO_EcdhePublicKey {
    fn default() -> Struct_GNUNET_CRYPTO_EcdhePublicKey {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_GNUNET_CRYPTO_EcdhePrivateKey {
    pub d: [::libc::c_uchar; 32usize],
}
impl ::std::default::Default for Struct_GNUNET_CRYPTO_EcdhePrivateKey {
    fn default() -> Struct_GNUNET_CRYPTO_EcdhePrivateKey {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_GNUNET_CRYPTO_EcdsaPrivateKey {
    pub d: [::libc::c_uchar; 32usize],
}
impl ::std::default::Default for Struct_GNUNET_CRYPTO_EcdsaPrivateKey {
    fn default() -> Struct_GNUNET_CRYPTO_EcdsaPrivateKey {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_GNUNET_CRYPTO_EddsaPrivateKey {
    pub d: [::libc::c_uchar; 32usize],
}
impl ::std::default::Default for Struct_GNUNET_CRYPTO_EddsaPrivateKey {
    fn default() -> Struct_GNUNET_CRYPTO_EddsaPrivateKey {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_GNUNET_CRYPTO_SymmetricSessionKey {
    pub aes_key: [::libc::c_uchar; 32usize],
    pub twofish_key: [::libc::c_uchar; 32usize],
}
impl ::std::default::Default for Struct_GNUNET_CRYPTO_SymmetricSessionKey {
    fn default() -> Struct_GNUNET_CRYPTO_SymmetricSessionKey {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_GNUNET_CRYPTO_SymmetricInitializationVector {
    pub aes_iv: [::libc::c_uchar; 16usize],
    pub twofish_iv: [::libc::c_uchar; 16usize],
}
impl ::std::default::Default for
 Struct_GNUNET_CRYPTO_SymmetricInitializationVector {
    fn default() -> Struct_GNUNET_CRYPTO_SymmetricInitializationVector {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_GNUNET_CRYPTO_AuthKey {
    pub key: [::libc::c_uchar; 64usize],
}
impl ::std::default::Default for Struct_GNUNET_CRYPTO_AuthKey {
    fn default() -> Struct_GNUNET_CRYPTO_AuthKey {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_GNUNET_CRYPTO_PaillierPublicKey {
    pub n: [::libc::c_uchar; 256usize],
}
impl ::std::default::Default for Struct_GNUNET_CRYPTO_PaillierPublicKey {
    fn default() -> Struct_GNUNET_CRYPTO_PaillierPublicKey {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_GNUNET_CRYPTO_PaillierPrivateKey {
    pub lambda: [::libc::c_uchar; 256usize],
    pub mu: [::libc::c_uchar; 256usize],
}
impl ::std::default::Default for Struct_GNUNET_CRYPTO_PaillierPrivateKey {
    fn default() -> Struct_GNUNET_CRYPTO_PaillierPrivateKey {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_GNUNET_CRYPTO_PaillierCiphertext {
    pub remaining_ops: int32_t,
    pub bits: [::libc::c_uchar; 512usize],
}
impl ::std::default::Default for Struct_GNUNET_CRYPTO_PaillierCiphertext {
    fn default() -> Struct_GNUNET_CRYPTO_PaillierCiphertext {
        unsafe { ::std::mem::zeroed() }
    }
}
pub enum Struct_GNUNET_HashContext { }
pub type GNUNET_CRYPTO_HashCompletedCallback =
    ::std::option::Option<extern "C" fn
                              (cls: *mut ::libc::c_void,
                               res: *const Struct_GNUNET_HashCode) -> ()>;
pub enum Struct_GNUNET_CRYPTO_FileHashContext { }
pub enum Struct_GNUNET_CRYPTO_rsa_PrivateKey { }
pub enum Struct_GNUNET_CRYPTO_rsa_PublicKey { }
pub enum Struct_GNUNET_CRYPTO_rsa_BlindingKey { }
pub enum Struct_GNUNET_CRYPTO_rsa_Signature { }
#[repr(C)]
#[derive(Copy)]
pub struct Struct_GNUNET_BANDWIDTH_Value32NBO {
    pub value__: uint32_t,
}
impl ::std::default::Default for Struct_GNUNET_BANDWIDTH_Value32NBO {
    fn default() -> Struct_GNUNET_BANDWIDTH_Value32NBO {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type GNUNET_BANDWIDTH_TrackerUpdateCallback =
    ::std::option::Option<extern "C" fn(cls: *mut ::libc::c_void) -> ()>;
pub type GNUNET_BANDWIDTH_ExcessNotificationCallback =
    ::std::option::Option<extern "C" fn(cls: *mut ::libc::c_void) -> ()>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_GNUNET_BANDWIDTH_Tracker {
    pub update_cb_cls: *mut ::libc::c_void,
    pub update_cb: GNUNET_BANDWIDTH_TrackerUpdateCallback,
    pub excess_cb_cls: *mut ::libc::c_void,
    pub excess_cb: GNUNET_BANDWIDTH_ExcessNotificationCallback,
    pub consumption_since_last_update__: int64_t,
    pub excess_task: *mut Struct_GNUNET_SCHEDULER_Task,
    pub last_update__: Struct_GNUNET_TIME_Absolute,
    pub available_bytes_per_s__: uint32_t,
    pub max_carry_s__: uint32_t,
}
impl ::std::default::Default for Struct_GNUNET_BANDWIDTH_Tracker {
    fn default() -> Struct_GNUNET_BANDWIDTH_Tracker {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type Enum_EXTRACTOR_Options = ::libc::c_uint;
pub const EXTRACTOR_OPTION_DEFAULT_POLICY: ::libc::c_uint = 0;
pub const EXTRACTOR_OPTION_OUT_OF_PROCESS_NO_RESTART: ::libc::c_uint = 1;
pub const EXTRACTOR_OPTION_IN_PROCESS: ::libc::c_uint = 2;
pub const EXTRACTOR_OPTION_DISABLED: ::libc::c_uint = 3;
pub type Enum_EXTRACTOR_MetaFormat = ::libc::c_uint;
pub const EXTRACTOR_METAFORMAT_UNKNOWN: ::libc::c_uint = 0;
pub const EXTRACTOR_METAFORMAT_UTF8: ::libc::c_uint = 1;
pub const EXTRACTOR_METAFORMAT_BINARY: ::libc::c_uint = 2;
pub const EXTRACTOR_METAFORMAT_C_STRING: ::libc::c_uint = 3;
pub type Enum_EXTRACTOR_MetaType = ::libc::c_uint;
pub const EXTRACTOR_METATYPE_RESERVED: ::libc::c_uint = 0;
pub const EXTRACTOR_METATYPE_MIMETYPE: ::libc::c_uint = 1;
pub const EXTRACTOR_METATYPE_FILENAME: ::libc::c_uint = 2;
pub const EXTRACTOR_METATYPE_COMMENT: ::libc::c_uint = 3;
pub const EXTRACTOR_METATYPE_TITLE: ::libc::c_uint = 4;
pub const EXTRACTOR_METATYPE_BOOK_TITLE: ::libc::c_uint = 5;
pub const EXTRACTOR_METATYPE_BOOK_EDITION: ::libc::c_uint = 6;
pub const EXTRACTOR_METATYPE_BOOK_CHAPTER_NUMBER: ::libc::c_uint = 7;
pub const EXTRACTOR_METATYPE_JOURNAL_NAME: ::libc::c_uint = 8;
pub const EXTRACTOR_METATYPE_JOURNAL_VOLUME: ::libc::c_uint = 9;
pub const EXTRACTOR_METATYPE_JOURNAL_NUMBER: ::libc::c_uint = 10;
pub const EXTRACTOR_METATYPE_PAGE_COUNT: ::libc::c_uint = 11;
pub const EXTRACTOR_METATYPE_PAGE_RANGE: ::libc::c_uint = 12;
pub const EXTRACTOR_METATYPE_AUTHOR_NAME: ::libc::c_uint = 13;
pub const EXTRACTOR_METATYPE_AUTHOR_EMAIL: ::libc::c_uint = 14;
pub const EXTRACTOR_METATYPE_AUTHOR_INSTITUTION: ::libc::c_uint = 15;
pub const EXTRACTOR_METATYPE_PUBLISHER: ::libc::c_uint = 16;
pub const EXTRACTOR_METATYPE_PUBLISHER_ADDRESS: ::libc::c_uint = 17;
pub const EXTRACTOR_METATYPE_PUBLISHER_INSTITUTION: ::libc::c_uint = 18;
pub const EXTRACTOR_METATYPE_PUBLISHER_SERIES: ::libc::c_uint = 19;
pub const EXTRACTOR_METATYPE_PUBLICATION_TYPE: ::libc::c_uint = 20;
pub const EXTRACTOR_METATYPE_PUBLICATION_YEAR: ::libc::c_uint = 21;
pub const EXTRACTOR_METATYPE_PUBLICATION_MONTH: ::libc::c_uint = 22;
pub const EXTRACTOR_METATYPE_PUBLICATION_DAY: ::libc::c_uint = 23;
pub const EXTRACTOR_METATYPE_PUBLICATION_DATE: ::libc::c_uint = 24;
pub const EXTRACTOR_METATYPE_BIBTEX_EPRINT: ::libc::c_uint = 25;
pub const EXTRACTOR_METATYPE_BIBTEX_ENTRY_TYPE: ::libc::c_uint = 26;
pub const EXTRACTOR_METATYPE_LANGUAGE: ::libc::c_uint = 27;
pub const EXTRACTOR_METATYPE_CREATION_TIME: ::libc::c_uint = 28;
pub const EXTRACTOR_METATYPE_URL: ::libc::c_uint = 29;
pub const EXTRACTOR_METATYPE_URI: ::libc::c_uint = 30;
pub const EXTRACTOR_METATYPE_ISRC: ::libc::c_uint = 31;
pub const EXTRACTOR_METATYPE_HASH_MD4: ::libc::c_uint = 32;
pub const EXTRACTOR_METATYPE_HASH_MD5: ::libc::c_uint = 33;
pub const EXTRACTOR_METATYPE_HASH_SHA0: ::libc::c_uint = 34;
pub const EXTRACTOR_METATYPE_HASH_SHA1: ::libc::c_uint = 35;
pub const EXTRACTOR_METATYPE_HASH_RMD160: ::libc::c_uint = 36;
pub const EXTRACTOR_METATYPE_GPS_LATITUDE_REF: ::libc::c_uint = 37;
pub const EXTRACTOR_METATYPE_GPS_LATITUDE: ::libc::c_uint = 38;
pub const EXTRACTOR_METATYPE_GPS_LONGITUDE_REF: ::libc::c_uint = 39;
pub const EXTRACTOR_METATYPE_GPS_LONGITUDE: ::libc::c_uint = 40;
pub const EXTRACTOR_METATYPE_LOCATION_CITY: ::libc::c_uint = 41;
pub const EXTRACTOR_METATYPE_LOCATION_SUBLOCATION: ::libc::c_uint = 42;
pub const EXTRACTOR_METATYPE_LOCATION_COUNTRY: ::libc::c_uint = 43;
pub const EXTRACTOR_METATYPE_LOCATION_COUNTRY_CODE: ::libc::c_uint = 44;
pub const EXTRACTOR_METATYPE_UNKNOWN: ::libc::c_uint = 45;
pub const EXTRACTOR_METATYPE_DESCRIPTION: ::libc::c_uint = 46;
pub const EXTRACTOR_METATYPE_COPYRIGHT: ::libc::c_uint = 47;
pub const EXTRACTOR_METATYPE_RIGHTS: ::libc::c_uint = 48;
pub const EXTRACTOR_METATYPE_KEYWORDS: ::libc::c_uint = 49;
pub const EXTRACTOR_METATYPE_ABSTRACT: ::libc::c_uint = 50;
pub const EXTRACTOR_METATYPE_SUMMARY: ::libc::c_uint = 51;
pub const EXTRACTOR_METATYPE_SUBJECT: ::libc::c_uint = 52;
pub const EXTRACTOR_METATYPE_CREATOR: ::libc::c_uint = 53;
pub const EXTRACTOR_METATYPE_FORMAT: ::libc::c_uint = 54;
pub const EXTRACTOR_METATYPE_FORMAT_VERSION: ::libc::c_uint = 55;
pub const EXTRACTOR_METATYPE_CREATED_BY_SOFTWARE: ::libc::c_uint = 56;
pub const EXTRACTOR_METATYPE_UNKNOWN_DATE: ::libc::c_uint = 57;
pub const EXTRACTOR_METATYPE_CREATION_DATE: ::libc::c_uint = 58;
pub const EXTRACTOR_METATYPE_MODIFICATION_DATE: ::libc::c_uint = 59;
pub const EXTRACTOR_METATYPE_LAST_PRINTED: ::libc::c_uint = 60;
pub const EXTRACTOR_METATYPE_LAST_SAVED_BY: ::libc::c_uint = 61;
pub const EXTRACTOR_METATYPE_TOTAL_EDITING_TIME: ::libc::c_uint = 62;
pub const EXTRACTOR_METATYPE_EDITING_CYCLES: ::libc::c_uint = 63;
pub const EXTRACTOR_METATYPE_MODIFIED_BY_SOFTWARE: ::libc::c_uint = 64;
pub const EXTRACTOR_METATYPE_REVISION_HISTORY: ::libc::c_uint = 65;
pub const EXTRACTOR_METATYPE_EMBEDDED_FILE_SIZE: ::libc::c_uint = 66;
pub const EXTRACTOR_METATYPE_FINDER_FILE_TYPE: ::libc::c_uint = 67;
pub const EXTRACTOR_METATYPE_FINDER_FILE_CREATOR: ::libc::c_uint = 68;
pub const EXTRACTOR_METATYPE_PACKAGE_NAME: ::libc::c_uint = 69;
pub const EXTRACTOR_METATYPE_PACKAGE_VERSION: ::libc::c_uint = 70;
pub const EXTRACTOR_METATYPE_SECTION: ::libc::c_uint = 71;
pub const EXTRACTOR_METATYPE_UPLOAD_PRIORITY: ::libc::c_uint = 72;
pub const EXTRACTOR_METATYPE_PACKAGE_DEPENDENCY: ::libc::c_uint = 73;
pub const EXTRACTOR_METATYPE_PACKAGE_CONFLICTS: ::libc::c_uint = 74;
pub const EXTRACTOR_METATYPE_PACKAGE_REPLACES: ::libc::c_uint = 75;
pub const EXTRACTOR_METATYPE_PACKAGE_PROVIDES: ::libc::c_uint = 76;
pub const EXTRACTOR_METATYPE_PACKAGE_RECOMMENDS: ::libc::c_uint = 77;
pub const EXTRACTOR_METATYPE_PACKAGE_SUGGESTS: ::libc::c_uint = 78;
pub const EXTRACTOR_METATYPE_PACKAGE_MAINTAINER: ::libc::c_uint = 79;
pub const EXTRACTOR_METATYPE_PACKAGE_INSTALLED_SIZE: ::libc::c_uint = 80;
pub const EXTRACTOR_METATYPE_PACKAGE_SOURCE: ::libc::c_uint = 81;
pub const EXTRACTOR_METATYPE_PACKAGE_ESSENTIAL: ::libc::c_uint = 82;
pub const EXTRACTOR_METATYPE_TARGET_ARCHITECTURE: ::libc::c_uint = 83;
pub const EXTRACTOR_METATYPE_PACKAGE_PRE_DEPENDENCY: ::libc::c_uint = 84;
pub const EXTRACTOR_METATYPE_LICENSE: ::libc::c_uint = 85;
pub const EXTRACTOR_METATYPE_PACKAGE_DISTRIBUTION: ::libc::c_uint = 86;
pub const EXTRACTOR_METATYPE_BUILDHOST: ::libc::c_uint = 87;
pub const EXTRACTOR_METATYPE_VENDOR: ::libc::c_uint = 88;
pub const EXTRACTOR_METATYPE_TARGET_OS: ::libc::c_uint = 89;
pub const EXTRACTOR_METATYPE_SOFTWARE_VERSION: ::libc::c_uint = 90;
pub const EXTRACTOR_METATYPE_TARGET_PLATFORM: ::libc::c_uint = 91;
pub const EXTRACTOR_METATYPE_RESOURCE_TYPE: ::libc::c_uint = 92;
pub const EXTRACTOR_METATYPE_LIBRARY_SEARCH_PATH: ::libc::c_uint = 93;
pub const EXTRACTOR_METATYPE_LIBRARY_DEPENDENCY: ::libc::c_uint = 94;
pub const EXTRACTOR_METATYPE_CAMERA_MAKE: ::libc::c_uint = 95;
pub const EXTRACTOR_METATYPE_CAMERA_MODEL: ::libc::c_uint = 96;
pub const EXTRACTOR_METATYPE_EXPOSURE: ::libc::c_uint = 97;
pub const EXTRACTOR_METATYPE_APERTURE: ::libc::c_uint = 98;
pub const EXTRACTOR_METATYPE_EXPOSURE_BIAS: ::libc::c_uint = 99;
pub const EXTRACTOR_METATYPE_FLASH: ::libc::c_uint = 100;
pub const EXTRACTOR_METATYPE_FLASH_BIAS: ::libc::c_uint = 101;
pub const EXTRACTOR_METATYPE_FOCAL_LENGTH: ::libc::c_uint = 102;
pub const EXTRACTOR_METATYPE_FOCAL_LENGTH_35MM: ::libc::c_uint = 103;
pub const EXTRACTOR_METATYPE_ISO_SPEED: ::libc::c_uint = 104;
pub const EXTRACTOR_METATYPE_EXPOSURE_MODE: ::libc::c_uint = 105;
pub const EXTRACTOR_METATYPE_METERING_MODE: ::libc::c_uint = 106;
pub const EXTRACTOR_METATYPE_MACRO_MODE: ::libc::c_uint = 107;
pub const EXTRACTOR_METATYPE_IMAGE_QUALITY: ::libc::c_uint = 108;
pub const EXTRACTOR_METATYPE_WHITE_BALANCE: ::libc::c_uint = 109;
pub const EXTRACTOR_METATYPE_ORIENTATION: ::libc::c_uint = 110;
pub const EXTRACTOR_METATYPE_MAGNIFICATION: ::libc::c_uint = 111;
pub const EXTRACTOR_METATYPE_IMAGE_DIMENSIONS: ::libc::c_uint = 112;
pub const EXTRACTOR_METATYPE_PRODUCED_BY_SOFTWARE: ::libc::c_uint = 113;
pub const EXTRACTOR_METATYPE_THUMBNAIL: ::libc::c_uint = 114;
pub const EXTRACTOR_METATYPE_IMAGE_RESOLUTION: ::libc::c_uint = 115;
pub const EXTRACTOR_METATYPE_SOURCE: ::libc::c_uint = 116;
pub const EXTRACTOR_METATYPE_CHARACTER_SET: ::libc::c_uint = 117;
pub const EXTRACTOR_METATYPE_LINE_COUNT: ::libc::c_uint = 118;
pub const EXTRACTOR_METATYPE_PARAGRAPH_COUNT: ::libc::c_uint = 119;
pub const EXTRACTOR_METATYPE_WORD_COUNT: ::libc::c_uint = 120;
pub const EXTRACTOR_METATYPE_CHARACTER_COUNT: ::libc::c_uint = 121;
pub const EXTRACTOR_METATYPE_PAGE_ORIENTATION: ::libc::c_uint = 122;
pub const EXTRACTOR_METATYPE_PAPER_SIZE: ::libc::c_uint = 123;
pub const EXTRACTOR_METATYPE_TEMPLATE: ::libc::c_uint = 124;
pub const EXTRACTOR_METATYPE_COMPANY: ::libc::c_uint = 125;
pub const EXTRACTOR_METATYPE_MANAGER: ::libc::c_uint = 126;
pub const EXTRACTOR_METATYPE_REVISION_NUMBER: ::libc::c_uint = 127;
pub const EXTRACTOR_METATYPE_DURATION: ::libc::c_uint = 128;
pub const EXTRACTOR_METATYPE_ALBUM: ::libc::c_uint = 129;
pub const EXTRACTOR_METATYPE_ARTIST: ::libc::c_uint = 130;
pub const EXTRACTOR_METATYPE_GENRE: ::libc::c_uint = 131;
pub const EXTRACTOR_METATYPE_TRACK_NUMBER: ::libc::c_uint = 132;
pub const EXTRACTOR_METATYPE_DISC_NUMBER: ::libc::c_uint = 133;
pub const EXTRACTOR_METATYPE_PERFORMER: ::libc::c_uint = 134;
pub const EXTRACTOR_METATYPE_CONTACT_INFORMATION: ::libc::c_uint = 135;
pub const EXTRACTOR_METATYPE_SONG_VERSION: ::libc::c_uint = 136;
pub const EXTRACTOR_METATYPE_PICTURE: ::libc::c_uint = 137;
pub const EXTRACTOR_METATYPE_COVER_PICTURE: ::libc::c_uint = 138;
pub const EXTRACTOR_METATYPE_CONTRIBUTOR_PICTURE: ::libc::c_uint = 139;
pub const EXTRACTOR_METATYPE_EVENT_PICTURE: ::libc::c_uint = 140;
pub const EXTRACTOR_METATYPE_LOGO: ::libc::c_uint = 141;
pub const EXTRACTOR_METATYPE_BROADCAST_TELEVISION_SYSTEM: ::libc::c_uint =
    142;
pub const EXTRACTOR_METATYPE_SOURCE_DEVICE: ::libc::c_uint = 143;
pub const EXTRACTOR_METATYPE_DISCLAIMER: ::libc::c_uint = 144;
pub const EXTRACTOR_METATYPE_WARNING: ::libc::c_uint = 145;
pub const EXTRACTOR_METATYPE_PAGE_ORDER: ::libc::c_uint = 146;
pub const EXTRACTOR_METATYPE_WRITER: ::libc::c_uint = 147;
pub const EXTRACTOR_METATYPE_PRODUCT_VERSION: ::libc::c_uint = 148;
pub const EXTRACTOR_METATYPE_CONTRIBUTOR_NAME: ::libc::c_uint = 149;
pub const EXTRACTOR_METATYPE_MOVIE_DIRECTOR: ::libc::c_uint = 150;
pub const EXTRACTOR_METATYPE_NETWORK_NAME: ::libc::c_uint = 151;
pub const EXTRACTOR_METATYPE_SHOW_NAME: ::libc::c_uint = 152;
pub const EXTRACTOR_METATYPE_CHAPTER_NAME: ::libc::c_uint = 153;
pub const EXTRACTOR_METATYPE_SONG_COUNT: ::libc::c_uint = 154;
pub const EXTRACTOR_METATYPE_STARTING_SONG: ::libc::c_uint = 155;
pub const EXTRACTOR_METATYPE_PLAY_COUNTER: ::libc::c_uint = 156;
pub const EXTRACTOR_METATYPE_CONDUCTOR: ::libc::c_uint = 157;
pub const EXTRACTOR_METATYPE_INTERPRETATION: ::libc::c_uint = 158;
pub const EXTRACTOR_METATYPE_COMPOSER: ::libc::c_uint = 159;
pub const EXTRACTOR_METATYPE_BEATS_PER_MINUTE: ::libc::c_uint = 160;
pub const EXTRACTOR_METATYPE_ENCODED_BY: ::libc::c_uint = 161;
pub const EXTRACTOR_METATYPE_ORIGINAL_TITLE: ::libc::c_uint = 162;
pub const EXTRACTOR_METATYPE_ORIGINAL_ARTIST: ::libc::c_uint = 163;
pub const EXTRACTOR_METATYPE_ORIGINAL_WRITER: ::libc::c_uint = 164;
pub const EXTRACTOR_METATYPE_ORIGINAL_RELEASE_YEAR: ::libc::c_uint = 165;
pub const EXTRACTOR_METATYPE_ORIGINAL_PERFORMER: ::libc::c_uint = 166;
pub const EXTRACTOR_METATYPE_LYRICS: ::libc::c_uint = 167;
pub const EXTRACTOR_METATYPE_POPULARITY_METER: ::libc::c_uint = 168;
pub const EXTRACTOR_METATYPE_LICENSEE: ::libc::c_uint = 169;
pub const EXTRACTOR_METATYPE_MUSICIAN_CREDITS_LIST: ::libc::c_uint = 170;
pub const EXTRACTOR_METATYPE_MOOD: ::libc::c_uint = 171;
pub const EXTRACTOR_METATYPE_SUBTITLE: ::libc::c_uint = 172;
pub const EXTRACTOR_METATYPE_GNUNET_DISPLAY_TYPE: ::libc::c_uint = 173;
pub const EXTRACTOR_METATYPE_GNUNET_FULL_DATA: ::libc::c_uint = 174;
pub const EXTRACTOR_METATYPE_RATING: ::libc::c_uint = 175;
pub const EXTRACTOR_METATYPE_ORGANIZATION: ::libc::c_uint = 176;
pub const EXTRACTOR_METATYPE_RIPPER: ::libc::c_uint = 177;
pub const EXTRACTOR_METATYPE_PRODUCER: ::libc::c_uint = 178;
pub const EXTRACTOR_METATYPE_GROUP: ::libc::c_uint = 179;
pub const EXTRACTOR_METATYPE_GNUNET_ORIGINAL_FILENAME: ::libc::c_uint = 180;
pub const EXTRACTOR_METATYPE_DISC_COUNT: ::libc::c_uint = 181;
pub const EXTRACTOR_METATYPE_CODEC: ::libc::c_uint = 182;
pub const EXTRACTOR_METATYPE_VIDEO_CODEC: ::libc::c_uint = 183;
pub const EXTRACTOR_METATYPE_AUDIO_CODEC: ::libc::c_uint = 184;
pub const EXTRACTOR_METATYPE_SUBTITLE_CODEC: ::libc::c_uint = 185;
pub const EXTRACTOR_METATYPE_CONTAINER_FORMAT: ::libc::c_uint = 186;
pub const EXTRACTOR_METATYPE_BITRATE: ::libc::c_uint = 187;
pub const EXTRACTOR_METATYPE_NOMINAL_BITRATE: ::libc::c_uint = 188;
pub const EXTRACTOR_METATYPE_MINIMUM_BITRATE: ::libc::c_uint = 189;
pub const EXTRACTOR_METATYPE_MAXIMUM_BITRATE: ::libc::c_uint = 190;
pub const EXTRACTOR_METATYPE_SERIAL: ::libc::c_uint = 191;
pub const EXTRACTOR_METATYPE_ENCODER: ::libc::c_uint = 192;
pub const EXTRACTOR_METATYPE_ENCODER_VERSION: ::libc::c_uint = 193;
pub const EXTRACTOR_METATYPE_TRACK_GAIN: ::libc::c_uint = 194;
pub const EXTRACTOR_METATYPE_TRACK_PEAK: ::libc::c_uint = 195;
pub const EXTRACTOR_METATYPE_ALBUM_GAIN: ::libc::c_uint = 196;
pub const EXTRACTOR_METATYPE_ALBUM_PEAK: ::libc::c_uint = 197;
pub const EXTRACTOR_METATYPE_REFERENCE_LEVEL: ::libc::c_uint = 198;
pub const EXTRACTOR_METATYPE_LOCATION_NAME: ::libc::c_uint = 199;
pub const EXTRACTOR_METATYPE_LOCATION_ELEVATION: ::libc::c_uint = 200;
pub const EXTRACTOR_METATYPE_LOCATION_HORIZONTAL_ERROR: ::libc::c_uint = 201;
pub const EXTRACTOR_METATYPE_LOCATION_MOVEMENT_SPEED: ::libc::c_uint = 202;
pub const EXTRACTOR_METATYPE_LOCATION_MOVEMENT_DIRECTION: ::libc::c_uint =
    203;
pub const EXTRACTOR_METATYPE_LOCATION_CAPTURE_DIRECTION: ::libc::c_uint = 204;
pub const EXTRACTOR_METATYPE_SHOW_EPISODE_NUMBER: ::libc::c_uint = 205;
pub const EXTRACTOR_METATYPE_SHOW_SEASON_NUMBER: ::libc::c_uint = 206;
pub const EXTRACTOR_METATYPE_GROUPING: ::libc::c_uint = 207;
pub const EXTRACTOR_METATYPE_DEVICE_MANUFACTURER: ::libc::c_uint = 208;
pub const EXTRACTOR_METATYPE_DEVICE_MODEL: ::libc::c_uint = 209;
pub const EXTRACTOR_METATYPE_AUDIO_LANGUAGE: ::libc::c_uint = 210;
pub const EXTRACTOR_METATYPE_CHANNELS: ::libc::c_uint = 211;
pub const EXTRACTOR_METATYPE_SAMPLE_RATE: ::libc::c_uint = 212;
pub const EXTRACTOR_METATYPE_AUDIO_DEPTH: ::libc::c_uint = 213;
pub const EXTRACTOR_METATYPE_AUDIO_BITRATE: ::libc::c_uint = 214;
pub const EXTRACTOR_METATYPE_MAXIMUM_AUDIO_BITRATE: ::libc::c_uint = 215;
pub const EXTRACTOR_METATYPE_VIDEO_DIMENSIONS: ::libc::c_uint = 216;
pub const EXTRACTOR_METATYPE_VIDEO_DEPTH: ::libc::c_uint = 217;
pub const EXTRACTOR_METATYPE_FRAME_RATE: ::libc::c_uint = 218;
pub const EXTRACTOR_METATYPE_PIXEL_ASPECT_RATIO: ::libc::c_uint = 219;
pub const EXTRACTOR_METATYPE_VIDEO_BITRATE: ::libc::c_uint = 220;
pub const EXTRACTOR_METATYPE_MAXIMUM_VIDEO_BITRATE: ::libc::c_uint = 221;
pub const EXTRACTOR_METATYPE_SUBTITLE_LANGUAGE: ::libc::c_uint = 222;
pub const EXTRACTOR_METATYPE_VIDEO_LANGUAGE: ::libc::c_uint = 223;
pub const EXTRACTOR_METATYPE_TOC: ::libc::c_uint = 224;
pub const EXTRACTOR_METATYPE_VIDEO_DURATION: ::libc::c_uint = 225;
pub const EXTRACTOR_METATYPE_AUDIO_DURATION: ::libc::c_uint = 226;
pub const EXTRACTOR_METATYPE_SUBTITLE_DURATION: ::libc::c_uint = 227;
pub const EXTRACTOR_METATYPE_LAST: ::libc::c_uint = 228;
pub type EXTRACTOR_MetaDataProcessor =
    ::std::option::Option<extern "C" fn
                              (cls: *mut ::libc::c_void,
                               plugin_name: *const ::libc::c_char,
                               _type: Enum_EXTRACTOR_MetaType,
                               format: Enum_EXTRACTOR_MetaFormat,
                               data_mime_type: *const ::libc::c_char,
                               data: *const ::libc::c_char, data_len: size_t)
                              -> ::libc::c_int>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_EXTRACTOR_ExtractContext {
    pub cls: *mut ::libc::c_void,
    pub config: *const ::libc::c_char,
    pub read: ::std::option::Option<extern "C" fn
                                        (cls: *mut ::libc::c_void,
                                         data: *mut *mut ::libc::c_void,
                                         size: size_t) -> ssize_t>,
    pub seek: ::std::option::Option<extern "C" fn
                                        (cls: *mut ::libc::c_void,
                                         pos: int64_t, whence: ::libc::c_int)
                                        -> int64_t>,
    pub get_size: ::std::option::Option<extern "C" fn
                                            (cls: *mut ::libc::c_void)
                                            -> uint64_t>,
    pub _proc: EXTRACTOR_MetaDataProcessor,
}
impl ::std::default::Default for Struct_EXTRACTOR_ExtractContext {
    fn default() -> Struct_EXTRACTOR_ExtractContext {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type EXTRACTOR_extract_method =
    ::std::option::Option<extern "C" fn
                              (ec: *mut Struct_EXTRACTOR_ExtractContext)
                              -> ()>;
pub enum Struct_EXTRACTOR_PluginList { }
pub enum Struct_GNUNET_CONTAINER_BloomFilter { }
pub type GNUNET_CONTAINER_HashCodeIterator =
    ::std::option::Option<extern "C" fn
                              (cls: *mut ::libc::c_void,
                               next: *mut Struct_GNUNET_HashCode)
                              -> ::libc::c_int>;
pub enum Struct_GNUNET_CONTAINER_MetaData { }
pub type Enum_GNUNET_CONTAINER_MetaDataSerializationOptions = ::libc::c_uint;
pub const GNUNET_CONTAINER_META_DATA_SERIALIZE_FULL: ::libc::c_uint = 0;
pub const GNUNET_CONTAINER_META_DATA_SERIALIZE_PART: ::libc::c_uint = 1;
pub const GNUNET_CONTAINER_META_DATA_SERIALIZE_NO_COMPRESS: ::libc::c_uint =
    2;
pub enum Struct_GNUNET_CONTAINER_MultiHashMap { }
pub enum Struct_GNUNET_CONTAINER_MultiHashMapIterator { }
pub type Enum_GNUNET_CONTAINER_MultiHashMapOption = ::libc::c_uint;
pub const GNUNET_CONTAINER_MULTIHASHMAPOPTION_REPLACE: ::libc::c_uint = 0;
pub const GNUNET_CONTAINER_MULTIHASHMAPOPTION_MULTIPLE: ::libc::c_uint = 1;
pub const GNUNET_CONTAINER_MULTIHASHMAPOPTION_UNIQUE_ONLY: ::libc::c_uint = 2;
pub const GNUNET_CONTAINER_MULTIHASHMAPOPTION_UNIQUE_FAST: ::libc::c_uint = 3;
pub type GNUNET_CONTAINER_HashMapIterator =
    ::std::option::Option<extern "C" fn
                              (cls: *mut ::libc::c_void,
                               key: *const Struct_GNUNET_HashCode,
                               value: *mut ::libc::c_void) -> ::libc::c_int>;
pub type GNUNET_CONTAINER_PeerMapIterator =
    ::std::option::Option<extern "C" fn
                              (cls: *mut ::libc::c_void,
                               key: *const Struct_GNUNET_PeerIdentity,
                               value: *mut ::libc::c_void) -> ::libc::c_int>;
pub enum Struct_GNUNET_CONTAINER_MultiPeerMap { }
pub enum Struct_GNUNET_CONTAINER_MultiPeerMapIterator { }
pub enum Struct_GNUNET_CONTAINER_MultiHashMap32 { }
pub enum Struct_GNUNET_CONTAINER_MultiHashMap32Iterator { }
pub type GNUNET_CONTAINER_HashMapIterator32 =
    ::std::option::Option<extern "C" fn
                              (cls: *mut ::libc::c_void, key: uint32_t,
                               value: *mut ::libc::c_void) -> ::libc::c_int>;
pub type GNUNET_CONTAINER_HeapCostType = uint64_t;
pub type Enum_GNUNET_CONTAINER_HeapOrder = ::libc::c_uint;
pub const GNUNET_CONTAINER_HEAP_ORDER_MAX: ::libc::c_uint = 0;
pub const GNUNET_CONTAINER_HEAP_ORDER_MIN: ::libc::c_uint = 1;
pub enum Struct_GNUNET_CONTAINER_Heap { }
pub enum Struct_GNUNET_CONTAINER_HeapNode { }
pub type GNUNET_CONTAINER_HeapIterator =
    ::std::option::Option<extern "C" fn
                              (cls: *mut ::libc::c_void,
                               node: *mut Struct_GNUNET_CONTAINER_HeapNode,
                               element: *mut ::libc::c_void,
                               cost: GNUNET_CONTAINER_HeapCostType)
                              -> ::libc::c_int>;
pub enum Struct_GNUNET_BIO_ReadHandle { }
pub enum Struct_GNUNET_BIO_WriteHandle { }
pub enum Struct_GNUNET_CONNECTION_Handle { }
#[repr(C)]
#[derive(Copy)]
pub struct Struct_GNUNET_CONNECTION_Credentials {
    pub uid: uid_t,
    pub gid: gid_t,
}
impl ::std::default::Default for Struct_GNUNET_CONNECTION_Credentials {
    fn default() -> Struct_GNUNET_CONNECTION_Credentials {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type GNUNET_CONNECTION_AccessCheck =
    ::std::option::Option<extern "C" fn
                              (cls: *mut ::libc::c_void,
                               ucred:
                                   *const Struct_GNUNET_CONNECTION_Credentials,
                               addr: *const Struct_sockaddr,
                               addrlen: socklen_t) -> ::libc::c_int>;
pub type GNUNET_CONNECTION_Receiver =
    ::std::option::Option<extern "C" fn
                              (cls: *mut ::libc::c_void,
                               buf: *const ::libc::c_void, available: size_t,
                               addr: *const Struct_sockaddr,
                               addrlen: socklen_t, errCode: ::libc::c_int)
                              -> ()>;
pub type GNUNET_CONNECTION_TransmitReadyNotify =
    ::std::option::Option<extern "C" fn
                              (cls: *mut ::libc::c_void, size: size_t,
                               buf: *mut ::libc::c_void) -> size_t>;
pub enum Struct_GNUNET_CONNECTION_TransmitHandle { }
pub enum Struct_GNUNET_CLIENT_Connection { }
pub type GNUNET_CLIENT_MessageHandler =
    ::std::option::Option<extern "C" fn
                              (cls: *mut ::libc::c_void,
                               msg: *const Struct_GNUNET_MessageHeader)
                              -> ()>;
pub enum Struct_GNUNET_CLIENT_TransmitHandle { }
pub enum Struct_GNUNET_CLIENT_TestHandle { }
pub type GNUNET_CLIENT_TestResultCallback =
    ::std::option::Option<extern "C" fn
                              (cls: *mut ::libc::c_void,
                               result: ::libc::c_int) -> ()>;
pub enum Struct_GNUNET_CLIENT_MANAGER_Connection { }
pub type GNUNET_CLIENT_MANAGER_MessageCallback =
    ::std::option::Option<extern "C" fn
                              (cls: *mut ::libc::c_void,
                               mgr:
                                   *mut Struct_GNUNET_CLIENT_MANAGER_Connection,
                               msg: *const Struct_GNUNET_MessageHeader)
                              -> ()>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_GNUNET_CLIENT_MANAGER_MessageHandler {
    pub callback: GNUNET_CLIENT_MANAGER_MessageCallback,
    pub callback_cls: *mut ::libc::c_void,
    pub _type: uint16_t,
    pub expected_size: uint16_t,
    pub is_variable_size: uint8_t,
}
impl ::std::default::Default for Struct_GNUNET_CLIENT_MANAGER_MessageHandler {
    fn default() -> Struct_GNUNET_CLIENT_MANAGER_MessageHandler {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_GNUNET_GETOPT_CommandLineProcessorContext {
    pub binaryName: *const ::libc::c_char,
    pub binaryOptions: *const ::libc::c_char,
    pub allOptions: *const Struct_GNUNET_GETOPT_CommandLineOption,
    pub argv: *const *mut ::libc::c_char,
    pub argc: ::libc::c_uint,
    pub currentArgument: ::libc::c_uint,
}
impl ::std::default::Default for
 Struct_GNUNET_GETOPT_CommandLineProcessorContext {
    fn default() -> Struct_GNUNET_GETOPT_CommandLineProcessorContext {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type GNUNET_GETOPT_CommandLineOptionProcessor =
    ::std::option::Option<extern "C" fn
                              (ctx:
                                   *mut Struct_GNUNET_GETOPT_CommandLineProcessorContext,
                               scls: *mut ::libc::c_void,
                               option: *const ::libc::c_char,
                               value: *const ::libc::c_char)
                              -> ::libc::c_int>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_GNUNET_GETOPT_CommandLineOption {
    pub shortName: ::libc::c_char,
    pub name: *const ::libc::c_char,
    pub argumentHelp: *const ::libc::c_char,
    pub description: *const ::libc::c_char,
    pub require_argument: ::libc::c_int,
    pub processor: GNUNET_GETOPT_CommandLineOptionProcessor,
    pub scls: *mut ::libc::c_void,
}
impl ::std::default::Default for Struct_GNUNET_GETOPT_CommandLineOption {
    fn default() -> Struct_GNUNET_GETOPT_CommandLineOption {
        unsafe { ::std::mem::zeroed() }
    }
}
pub enum Struct_GNUNET_SERVER_Handle { }
pub enum Struct_GNUNET_SERVER_Client { }
pub enum Struct_GNUNET_SERVER_TransmitHandle { }
pub type GNUNET_SERVER_MessageCallback =
    ::std::option::Option<extern "C" fn
                              (cls: *mut ::libc::c_void,
                               client: *mut Struct_GNUNET_SERVER_Client,
                               message: *const Struct_GNUNET_MessageHeader)
                              -> ()>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_GNUNET_SERVER_MessageHandler {
    pub callback: GNUNET_SERVER_MessageCallback,
    pub callback_cls: *mut ::libc::c_void,
    pub _type: uint16_t,
    pub expected_size: uint16_t,
}
impl ::std::default::Default for Struct_GNUNET_SERVER_MessageHandler {
    fn default() -> Struct_GNUNET_SERVER_MessageHandler {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type GNUNET_SERVER_DisconnectCallback =
    ::std::option::Option<extern "C" fn
                              (cls: *mut ::libc::c_void,
                               client: *mut Struct_GNUNET_SERVER_Client)
                              -> ()>;
pub type GNUNET_SERVER_ConnectCallback =
    ::std::option::Option<extern "C" fn
                              (cls: *mut ::libc::c_void,
                               client: *mut Struct_GNUNET_SERVER_Client)
                              -> ()>;
pub enum Struct_GNUNET_SERVER_TransmitContext { }
pub enum Struct_GNUNET_SERVER_NotificationContext { }
pub enum Struct_GNUNET_SERVER_MessageStreamTokenizer { }
pub type GNUNET_SERVER_MessageTokenizerCallback =
    ::std::option::Option<extern "C" fn
                              (cls: *mut ::libc::c_void,
                               client: *mut ::libc::c_void,
                               message: *const Struct_GNUNET_MessageHeader)
                              -> ::libc::c_int>;
pub type GNUNET_SERVER_MstCreateCallback =
    ::std::option::Option<extern "C" fn
                              (cls: *mut ::libc::c_void,
                               client: *mut Struct_GNUNET_SERVER_Client)
                              -> *mut ::libc::c_void>;
pub type GNUNET_SERVER_MstDestroyCallback =
    ::std::option::Option<extern "C" fn
                              (cls: *mut ::libc::c_void,
                               mst: *mut ::libc::c_void) -> ()>;
pub type GNUNET_SERVER_MstReceiveCallback =
    ::std::option::Option<extern "C" fn
                              (cls: *mut ::libc::c_void,
                               mst: *mut ::libc::c_void,
                               client: *mut Struct_GNUNET_SERVER_Client,
                               buf: *const ::libc::c_char, size: size_t,
                               purge: ::libc::c_int, one_shot: ::libc::c_int)
                              -> ::libc::c_int>;
pub enum Struct_GNUNET_HELPER_Handle { }
pub type GNUNET_HELPER_ExceptionCallback =
    ::std::option::Option<extern "C" fn(cls: *mut ::libc::c_void) -> ()>;
pub type GNUNET_HELPER_Continuation =
    ::std::option::Option<extern "C" fn
                              (cls: *mut ::libc::c_void,
                               result: ::libc::c_int) -> ()>;
pub enum Struct_GNUNET_HELPER_SendHandle { }
pub enum Struct_GNUNET_MQ_Envelope { }
pub enum Struct_GNUNET_MQ_Handle { }
pub type Enum_GNUNET_MQ_Error = ::libc::c_uint;
pub const GNUNET_MQ_ERROR_READ: ::libc::c_uint = 1;
pub const GNUNET_MQ_ERROR_WRITE: ::libc::c_uint = 2;
pub const GNUNET_MQ_ERROR_TIMEOUT: ::libc::c_uint = 4;
pub type GNUNET_MQ_MessageCallback =
    ::std::option::Option<extern "C" fn
                              (cls: *mut ::libc::c_void,
                               msg: *const Struct_GNUNET_MessageHeader)
                              -> ()>;
pub type GNUNET_MQ_SendImpl =
    ::std::option::Option<extern "C" fn
                              (mq: *mut Struct_GNUNET_MQ_Handle,
                               msg: *const Struct_GNUNET_MessageHeader,
                               impl_state: *mut ::libc::c_void) -> ()>;
pub type GNUNET_MQ_DestroyImpl =
    ::std::option::Option<extern "C" fn
                              (mq: *mut Struct_GNUNET_MQ_Handle,
                               impl_state: *mut ::libc::c_void) -> ()>;
pub type GNUNET_MQ_CancelImpl =
    ::std::option::Option<extern "C" fn
                              (mq: *mut Struct_GNUNET_MQ_Handle,
                               impl_state: *mut ::libc::c_void) -> ()>;
pub type GNUNET_MQ_NotifyCallback =
    ::std::option::Option<extern "C" fn(cls: *mut ::libc::c_void) -> ()>;
pub type GNUNET_MQ_ErrorHandler =
    ::std::option::Option<extern "C" fn
                              (cls: *mut ::libc::c_void,
                               error: Enum_GNUNET_MQ_Error) -> ()>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_GNUNET_MQ_MessageHandler {
    pub cb: GNUNET_MQ_MessageCallback,
    pub _type: uint16_t,
    pub expected_size: uint16_t,
}
impl ::std::default::Default for Struct_GNUNET_MQ_MessageHandler {
    fn default() -> Struct_GNUNET_MQ_MessageHandler {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type Enum_GNUNET_OS_InheritStdioFlags = ::libc::c_uint;
pub const GNUNET_OS_INHERIT_STD_NONE: ::libc::c_uint = 0;
pub const GNUNET_OS_INHERIT_STD_IN: ::libc::c_uint = 1;
pub const GNUNET_OS_INHERIT_STD_OUT: ::libc::c_uint = 2;
pub const GNUNET_OS_INHERIT_STD_ERR: ::libc::c_uint = 4;
pub const GNUNET_OS_INHERIT_STD_OUT_AND_ERR: ::libc::c_uint = 6;
pub const GNUNET_OS_INHERIT_STD_ALL: ::libc::c_uint = 7;
pub enum Struct_GNUNET_OS_Process { }
pub type Enum_GNUNET_OS_InstallationPathKind = ::libc::c_uint;
pub const GNUNET_OS_IPK_PREFIX: ::libc::c_uint = 0;
pub const GNUNET_OS_IPK_BINDIR: ::libc::c_uint = 1;
pub const GNUNET_OS_IPK_LIBDIR: ::libc::c_uint = 2;
pub const GNUNET_OS_IPK_DATADIR: ::libc::c_uint = 3;
pub const GNUNET_OS_IPK_LOCALEDIR: ::libc::c_uint = 4;
pub const GNUNET_OS_IPK_SELF_PREFIX: ::libc::c_uint = 5;
pub const GNUNET_OS_IPK_ICONDIR: ::libc::c_uint = 6;
pub const GNUNET_OS_IPK_DOCDIR: ::libc::c_uint = 7;
pub const GNUNET_OS_IPK_LIBEXECDIR: ::libc::c_uint = 8;
pub type Enum_GNUNET_OS_ProcessStatusType = ::libc::c_uint;
pub const GNUNET_OS_PROCESS_UNKNOWN: ::libc::c_uint = 0;
pub const GNUNET_OS_PROCESS_RUNNING: ::libc::c_uint = 1;
pub const GNUNET_OS_PROCESS_STOPPED: ::libc::c_uint = 2;
pub const GNUNET_OS_PROCESS_EXITED: ::libc::c_uint = 3;
pub const GNUNET_OS_PROCESS_SIGNALED: ::libc::c_uint = 4;
pub type GNUNET_OS_NetworkInterfaceProcessor =
    ::std::option::Option<extern "C" fn
                              (cls: *mut ::libc::c_void,
                               name: *const ::libc::c_char,
                               isDefault: ::libc::c_int,
                               addr: *const Struct_sockaddr,
                               broadcast_addr: *const Struct_sockaddr,
                               netmask: *const Struct_sockaddr,
                               addrlen: socklen_t) -> ::libc::c_int>;
pub enum Struct_GNUNET_OS_CommandHandle { }
pub type GNUNET_OS_LineProcessor =
    ::std::option::Option<extern "C" fn
                              (cls: *mut ::libc::c_void,
                               line: *const ::libc::c_char) -> ()>;
pub type GNUNET_PEER_Id = ::libc::c_uint;
pub type GNUNET_PLUGIN_Callback =
    ::std::option::Option<extern "C" fn(arg: *mut ::libc::c_void)
                              -> *mut ::libc::c_void>;
pub type GNUNET_PLUGIN_LoaderCallback =
    ::std::option::Option<extern "C" fn
                              (cls: *mut ::libc::c_void,
                               library_name: *const ::libc::c_char,
                               lib_ret: *mut ::libc::c_void) -> ()>;
pub type GNUNET_PROGRAM_Main =
    ::std::option::Option<extern "C" fn
                              (cls: *mut ::libc::c_void,
                               args: *const *mut ::libc::c_char,
                               cfgfile: *const ::libc::c_char,
                               cfg: *const Struct_GNUNET_CONFIGURATION_Handle)
                              -> ()>;
pub type GNUNET_SERVICE_Main =
    ::std::option::Option<extern "C" fn
                              (cls: *mut ::libc::c_void,
                               server: *mut Struct_GNUNET_SERVER_Handle,
                               cfg: *const Struct_GNUNET_CONFIGURATION_Handle)
                              -> ()>;
pub type Enum_GNUNET_SERVICE_Options = ::libc::c_uint;
pub const GNUNET_SERVICE_OPTION_NONE: ::libc::c_uint = 0;
pub const GNUNET_SERVICE_OPTION_MANUAL_SHUTDOWN: ::libc::c_uint = 1;
pub const GNUNET_SERVICE_OPTION_SOFT_SHUTDOWN: ::libc::c_uint = 2;
pub enum Struct_GNUNET_SERVICE_Context { }
pub enum Struct_GNUNET_SIGNAL_Context { }
pub type GNUNET_SIGNAL_Handler = ::std::option::Option<extern "C" fn() -> ()>;
pub type Enum_GNUNET_STRINGS_FilenameCheck = ::libc::c_uint;
pub const GNUNET_STRINGS_CHECK_EXISTS: ::libc::c_uint = 1;
pub const GNUNET_STRINGS_CHECK_IS_DIRECTORY: ::libc::c_uint = 2;
pub const GNUNET_STRINGS_CHECK_IS_LINK: ::libc::c_uint = 4;
pub const GNUNET_STRINGS_CHECK_IS_ABSOLUTE: ::libc::c_uint = 8;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_GNUNET_STRINGS_PortPolicy {
    pub start_port: uint16_t,
    pub end_port: uint16_t,
    pub negate_portrange: ::libc::c_int,
}
impl ::std::default::Default for Struct_GNUNET_STRINGS_PortPolicy {
    fn default() -> Struct_GNUNET_STRINGS_PortPolicy {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_GNUNET_STRINGS_IPv4NetworkPolicy {
    pub network: Struct_in_addr,
    pub netmask: Struct_in_addr,
    pub pp: Struct_GNUNET_STRINGS_PortPolicy,
}
impl ::std::default::Default for Struct_GNUNET_STRINGS_IPv4NetworkPolicy {
    fn default() -> Struct_GNUNET_STRINGS_IPv4NetworkPolicy {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_GNUNET_STRINGS_IPv6NetworkPolicy {
    pub network: Struct_in6_addr,
    pub netmask: Struct_in6_addr,
    pub pp: Struct_GNUNET_STRINGS_PortPolicy,
}
impl ::std::default::Default for Struct_GNUNET_STRINGS_IPv6NetworkPolicy {
    fn default() -> Struct_GNUNET_STRINGS_IPv6NetworkPolicy {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_GNUNET_TUN_Layer2PacketHeader {
    pub flags: uint16_t,
    pub proto: uint16_t,
}
impl ::std::default::Default for Struct_GNUNET_TUN_Layer2PacketHeader {
    fn default() -> Struct_GNUNET_TUN_Layer2PacketHeader {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_GNUNET_TUN_IPv4Header {
    pub _bindgen_bitfield_1_: ::libc::c_uint,
    pub diff_serv: uint8_t,
    pub total_length: uint16_t,
    pub identification: uint16_t,
    pub _bindgen_bitfield_2_: ::libc::c_uint,
    pub ttl: uint8_t,
    pub protocol: uint8_t,
    pub checksum: uint16_t,
    pub source_address: Struct_in_addr,
    pub destination_address: Struct_in_addr,
}
impl ::std::default::Default for Struct_GNUNET_TUN_IPv4Header {
    fn default() -> Struct_GNUNET_TUN_IPv4Header {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_GNUNET_TUN_IPv6Header {
    pub _bindgen_bitfield_1_: ::libc::c_uint,
    pub payload_length: uint16_t,
    pub next_header: uint8_t,
    pub hop_limit: uint8_t,
    pub source_address: Struct_in6_addr,
    pub destination_address: Struct_in6_addr,
}
impl ::std::default::Default for Struct_GNUNET_TUN_IPv6Header {
    fn default() -> Struct_GNUNET_TUN_IPv6Header {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_GNUNET_TUN_TcpHeader {
    pub source_port: uint16_t,
    pub destination_port: uint16_t,
    pub seq: uint32_t,
    pub ack: uint32_t,
    pub _bindgen_bitfield_1_: ::libc::c_uint,
    pub flags: uint8_t,
    pub window_size: uint16_t,
    pub crc: uint16_t,
    pub urgent_pointer: uint16_t,
}
impl ::std::default::Default for Struct_GNUNET_TUN_TcpHeader {
    fn default() -> Struct_GNUNET_TUN_TcpHeader {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_GNUNET_TUN_UdpHeader {
    pub source_port: uint16_t,
    pub destination_port: uint16_t,
    pub len: uint16_t,
    pub crc: uint16_t,
}
impl ::std::default::Default for Struct_GNUNET_TUN_UdpHeader {
    fn default() -> Struct_GNUNET_TUN_UdpHeader {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_GNUNET_TUN_DnsFlags {
    pub _bindgen_bitfield_1_: ::libc::c_uint,
}
impl ::std::default::Default for Struct_GNUNET_TUN_DnsFlags {
    fn default() -> Struct_GNUNET_TUN_DnsFlags {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_GNUNET_TUN_DnsHeader {
    pub id: uint16_t,
    pub flags: Struct_GNUNET_TUN_DnsFlags,
    pub query_count: uint16_t,
    pub answer_rcount: uint16_t,
    pub authority_rcount: uint16_t,
    pub additional_rcount: uint16_t,
}
impl ::std::default::Default for Struct_GNUNET_TUN_DnsHeader {
    fn default() -> Struct_GNUNET_TUN_DnsHeader {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_GNUNET_TUN_DnsSoaRecord {
    pub serial: uint32_t,
    pub refresh: uint32_t,
    pub retry: uint32_t,
    pub expire: uint32_t,
    pub minimum: uint32_t,
}
impl ::std::default::Default for Struct_GNUNET_TUN_DnsSoaRecord {
    fn default() -> Struct_GNUNET_TUN_DnsSoaRecord {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_GNUNET_TUN_DnsSrvRecord {
    pub prio: uint16_t,
    pub weight: uint16_t,
    pub port: uint16_t,
}
impl ::std::default::Default for Struct_GNUNET_TUN_DnsSrvRecord {
    fn default() -> Struct_GNUNET_TUN_DnsSrvRecord {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_GNUNET_TUN_DnsCertRecord {
    pub cert_type: uint16_t,
    pub cert_tag: uint16_t,
    pub algorithm: uint8_t,
}
impl ::std::default::Default for Struct_GNUNET_TUN_DnsCertRecord {
    fn default() -> Struct_GNUNET_TUN_DnsCertRecord {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_GNUNET_TUN_DnsTlsaRecord {
    pub usage: uint8_t,
    pub selector: uint8_t,
    pub matching_type: uint8_t,
}
impl ::std::default::Default for Struct_GNUNET_TUN_DnsTlsaRecord {
    fn default() -> Struct_GNUNET_TUN_DnsTlsaRecord {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_GNUNET_TUN_GnsVpnRecord {
    pub peer: Struct_GNUNET_PeerIdentity,
    pub proto: uint16_t,
}
impl ::std::default::Default for Struct_GNUNET_TUN_GnsVpnRecord {
    fn default() -> Struct_GNUNET_TUN_GnsVpnRecord {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_GNUNET_TUN_DnsQueryLine {
    pub _type: uint16_t,
    pub dns_traffic_class: uint16_t,
}
impl ::std::default::Default for Struct_GNUNET_TUN_DnsQueryLine {
    fn default() -> Struct_GNUNET_TUN_DnsQueryLine {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_GNUNET_TUN_DnsRecordLine {
    pub _type: uint16_t,
    pub dns_traffic_class: uint16_t,
    pub ttl: uint32_t,
    pub data_len: uint16_t,
}
impl ::std::default::Default for Struct_GNUNET_TUN_DnsRecordLine {
    fn default() -> Struct_GNUNET_TUN_DnsRecordLine {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_GNUNET_TUN_IcmpHeader {
    pub _type: uint8_t,
    pub code: uint8_t,
    pub crc: uint16_t,
    pub quench: Union_Unnamed73,
}
impl ::std::default::Default for Struct_GNUNET_TUN_IcmpHeader {
    fn default() -> Struct_GNUNET_TUN_IcmpHeader {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed73 {
    pub _bindgen_data_: [u8; 4usize],
}
impl Union_Unnamed73 {
    pub unsafe fn echo(&mut self) -> *mut Struct_Unnamed74 {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn destination_unreachable(&mut self) -> *mut Struct_ih_pmtu {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn redirect_gateway_address(&mut self) -> *mut Struct_in_addr {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn packet_too_big_mtu(&mut self) -> *mut uint32_t {
        ::std::mem::transmute(&self._bindgen_data_)
    }
}
impl ::std::default::Default for Union_Unnamed73 {
    fn default() -> Union_Unnamed73 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed74 {
    pub identifier: uint16_t,
    pub sequence_number: uint16_t,
}
impl ::std::default::Default for Struct_Unnamed74 {
    fn default() -> Struct_Unnamed74 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ih_pmtu {
    pub empty: uint16_t,
    pub next_hop_mtu: uint16_t,
}
impl ::std::default::Default for Struct_ih_pmtu {
    fn default() -> Struct_ih_pmtu { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_GNUNET_DNSPARSER_Query {
    pub name: *mut ::libc::c_char,
    pub _type: uint16_t,
    pub dns_traffic_class: uint16_t,
}
impl ::std::default::Default for Struct_GNUNET_DNSPARSER_Query {
    fn default() -> Struct_GNUNET_DNSPARSER_Query {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_GNUNET_DNSPARSER_MxRecord {
    pub preference: uint16_t,
    pub mxhost: *mut ::libc::c_char,
}
impl ::std::default::Default for Struct_GNUNET_DNSPARSER_MxRecord {
    fn default() -> Struct_GNUNET_DNSPARSER_MxRecord {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_GNUNET_DNSPARSER_SrvRecord {
    pub target: *mut ::libc::c_char,
    pub priority: uint16_t,
    pub weight: uint16_t,
    pub port: uint16_t,
}
impl ::std::default::Default for Struct_GNUNET_DNSPARSER_SrvRecord {
    fn default() -> Struct_GNUNET_DNSPARSER_SrvRecord {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type Enum_GNUNET_DNSPARSER_CertType = ::libc::c_uint;
pub const GNUNET_DNSPARSER_CERTTYPE_RESERVED: ::libc::c_uint = 0;
pub const GNUNET_DNSPARSER_CERTTYPE_PKIX: ::libc::c_uint = 1;
pub const GNUNET_DNSPARSER_CERTTYPE_SKPI: ::libc::c_uint = 2;
pub const GNUNET_DNSPARSER_CERTTYPE_PGP: ::libc::c_uint = 3;
pub const GNUNET_DNSPARSER_CERTTYPE_IPKIX: ::libc::c_uint = 4;
pub const GNUNET_DNSPARSER_CERTTYPE_ISKPI: ::libc::c_uint = 5;
pub const GNUNET_DNSPARSER_CERTTYPE_IPGP: ::libc::c_uint = 6;
pub const GNUNET_DNSPARSER_CERTTYPE_ACPKIX: ::libc::c_uint = 7;
pub const GNUNET_DNSPARSER_CERTTYPE_IACKPIX: ::libc::c_uint = 8;
pub type Enum_GNUNET_DNSPARSER_CertAlgorithm = ::libc::c_uint;
pub const GNUNET_DNSPARSER_CERTALGO_UNDEFINED: ::libc::c_uint = 0;
pub const GNUNET_DNSPARSER_CERTALGO_RSAMD5: ::libc::c_uint = 1;
pub const GNUNET_DNSPARSER_CERTALGO_DH: ::libc::c_uint = 2;
pub const GNUNET_DNSPARSER_CERTALGO_DSASHA: ::libc::c_uint = 3;
pub const GNUNET_DNSPARSER_CERTALGO_RSRVD4: ::libc::c_uint = 4;
pub const GNUNET_DNSPARSER_CERTALGO_RSASHA: ::libc::c_uint = 5;
pub const GNUNET_DNSPARSER_CERTALGO_DSANSEC3: ::libc::c_uint = 6;
pub const GNUNET_DNSPARSER_CERTALGO_RSANSEC3: ::libc::c_uint = 7;
pub const GNUNET_DNSPARSER_CERTALGO_RSASHA256: ::libc::c_uint = 8;
pub const GNUNET_DNSPARSER_CERTALGO_RSRVD9: ::libc::c_uint = 9;
pub const GNUNET_DNSPARSER_CERTALGO_RSASHA512: ::libc::c_uint = 10;
pub const GNUNET_DNSPARSER_CERTALGO_GOST_R34: ::libc::c_uint = 12;
pub const GNUNET_DNSPARSER_CERTALGO_ECDSA_P256SHA256: ::libc::c_uint = 13;
pub const GNUNET_DNSPARSER_CERTALGO_ECDSA_P384SHA384: ::libc::c_uint = 14;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_GNUNET_DNSPARSER_CertRecord {
    pub cert_type: Enum_GNUNET_DNSPARSER_CertType,
    pub cert_tag: uint16_t,
    pub algorithm: Enum_GNUNET_DNSPARSER_CertAlgorithm,
    pub certificate_size: size_t,
    pub certificate_data: *mut ::libc::c_char,
}
impl ::std::default::Default for Struct_GNUNET_DNSPARSER_CertRecord {
    fn default() -> Struct_GNUNET_DNSPARSER_CertRecord {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_GNUNET_DNSPARSER_SoaRecord {
    pub mname: *mut ::libc::c_char,
    pub rname: *mut ::libc::c_char,
    pub serial: uint32_t,
    pub refresh: uint32_t,
    pub retry: uint32_t,
    pub expire: uint32_t,
    pub minimum_ttl: uint32_t,
}
impl ::std::default::Default for Struct_GNUNET_DNSPARSER_SoaRecord {
    fn default() -> Struct_GNUNET_DNSPARSER_SoaRecord {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_GNUNET_DNSPARSER_RawRecord {
    pub data: *mut ::libc::c_void,
    pub data_len: size_t,
}
impl ::std::default::Default for Struct_GNUNET_DNSPARSER_RawRecord {
    fn default() -> Struct_GNUNET_DNSPARSER_RawRecord {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_GNUNET_DNSPARSER_Record {
    pub name: *mut ::libc::c_char,
    pub data: Union_Unnamed75,
    pub expiration_time: Struct_GNUNET_TIME_Absolute,
    pub _type: uint16_t,
    pub dns_traffic_class: uint16_t,
}
impl ::std::default::Default for Struct_GNUNET_DNSPARSER_Record {
    fn default() -> Struct_GNUNET_DNSPARSER_Record {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed75 {
    pub _bindgen_data_: [u64; 2usize],
}
impl Union_Unnamed75 {
    pub unsafe fn hostname(&mut self) -> *mut *mut ::libc::c_char {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn soa(&mut self)
     -> *mut *mut Struct_GNUNET_DNSPARSER_SoaRecord {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn cert(&mut self)
     -> *mut *mut Struct_GNUNET_DNSPARSER_CertRecord {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn mx(&mut self)
     -> *mut *mut Struct_GNUNET_DNSPARSER_MxRecord {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn srv(&mut self)
     -> *mut *mut Struct_GNUNET_DNSPARSER_SrvRecord {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn raw(&mut self) -> *mut Struct_GNUNET_DNSPARSER_RawRecord {
        ::std::mem::transmute(&self._bindgen_data_)
    }
}
impl ::std::default::Default for Union_Unnamed75 {
    fn default() -> Union_Unnamed75 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_GNUNET_DNSPARSER_Packet {
    pub queries: *mut Struct_GNUNET_DNSPARSER_Query,
    pub answers: *mut Struct_GNUNET_DNSPARSER_Record,
    pub authority_records: *mut Struct_GNUNET_DNSPARSER_Record,
    pub additional_records: *mut Struct_GNUNET_DNSPARSER_Record,
    pub num_queries: ::libc::c_uint,
    pub num_answers: ::libc::c_uint,
    pub num_authority_records: ::libc::c_uint,
    pub num_additional_records: ::libc::c_uint,
    pub flags: Struct_GNUNET_TUN_DnsFlags,
    pub id: uint16_t,
}
impl ::std::default::Default for Struct_GNUNET_DNSPARSER_Packet {
    fn default() -> Struct_GNUNET_DNSPARSER_Packet {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type Enum_GNUNET_BLOCK_Type = ::libc::c_uint;
pub const GNUNET_BLOCK_TYPE_ANY: ::libc::c_uint = 0;
pub const GNUNET_BLOCK_TYPE_FS_DBLOCK: ::libc::c_uint = 1;
pub const GNUNET_BLOCK_TYPE_FS_IBLOCK: ::libc::c_uint = 2;
pub const GNUNET_BLOCK_TYPE_FS_KBLOCK: ::libc::c_uint = 3;
pub const GNUNET_BLOCK_TYPE_FS_SBLOCK: ::libc::c_uint = 4;
pub const GNUNET_BLOCK_TYPE_FS_NBLOCK: ::libc::c_uint = 5;
pub const GNUNET_BLOCK_TYPE_FS_ONDEMAND: ::libc::c_uint = 6;
pub const GNUNET_BLOCK_TYPE_DHT_HELLO: ::libc::c_uint = 7;
pub const GNUNET_BLOCK_TYPE_TEST: ::libc::c_uint = 8;
pub const GNUNET_BLOCK_TYPE_FS_UBLOCK: ::libc::c_uint = 9;
pub const GNUNET_BLOCK_TYPE_DNS: ::libc::c_uint = 10;
pub const GNUNET_BLOCK_TYPE_GNS_NAMERECORD: ::libc::c_uint = 11;
pub const GNUNET_BLOCK_TYPE_REGEX: ::libc::c_uint = 22;
pub const GNUNET_BLOCK_TYPE_REGEX_ACCEPT: ::libc::c_uint = 23;
pub type Enum_GNUNET_BLOCK_EvaluationResult = ::libc::c_uint;
pub const GNUNET_BLOCK_EVALUATION_OK_MORE: ::libc::c_uint = 0;
pub const GNUNET_BLOCK_EVALUATION_OK_LAST: ::libc::c_uint = 1;
pub const GNUNET_BLOCK_EVALUATION_OK_DUPLICATE: ::libc::c_uint = 2;
pub const GNUNET_BLOCK_EVALUATION_RESULT_INVALID: ::libc::c_uint = 3;
pub const GNUNET_BLOCK_EVALUATION_RESULT_IRRELEVANT: ::libc::c_uint = 4;
pub const GNUNET_BLOCK_EVALUATION_REQUEST_VALID: ::libc::c_uint = 10;
pub const GNUNET_BLOCK_EVALUATION_REQUEST_INVALID: ::libc::c_uint = 11;
pub const GNUNET_BLOCK_EVALUATION_TYPE_NOT_SUPPORTED: ::libc::c_uint = 20;
pub enum Struct_GNUNET_BLOCK_Context { }
pub type Enum_GNUNET_GNSRECORD_Flags = ::libc::c_uint;
pub const GNUNET_GNSRECORD_RF_NONE: ::libc::c_uint = 0;
pub const GNUNET_GNSRECORD_RF_PRIVATE: ::libc::c_uint = 2;
pub const GNUNET_GNSRECORD_RF_RELATIVE_EXPIRATION: ::libc::c_uint = 8;
pub const GNUNET_GNSRECORD_RF_SHADOW_RECORD: ::libc::c_uint = 16;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_GNUNET_GNSRECORD_Data {
    pub data: *const ::libc::c_void,
    pub expiration_time: uint64_t,
    pub data_size: size_t,
    pub record_type: uint32_t,
    pub flags: Enum_GNUNET_GNSRECORD_Flags,
}
impl ::std::default::Default for Struct_GNUNET_GNSRECORD_Data {
    fn default() -> Struct_GNUNET_GNSRECORD_Data {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_GNUNET_GNSRECORD_PlaceData {
    pub place_key: Struct_GNUNET_CRYPTO_EddsaPublicKey,
    pub origin: Struct_GNUNET_PeerIdentity,
    pub relay_count: uint32_t,
}
impl ::std::default::Default for Struct_GNUNET_GNSRECORD_PlaceData {
    fn default() -> Struct_GNUNET_GNSRECORD_PlaceData {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_GNUNET_GNSRECORD_Block {
    pub signature: Struct_GNUNET_CRYPTO_EcdsaSignature,
    pub derived_key: Struct_GNUNET_CRYPTO_EcdsaPublicKey,
    pub purpose: Struct_GNUNET_CRYPTO_EccSignaturePurpose,
    pub expiration_time: Struct_GNUNET_TIME_AbsoluteNBO,
}
impl ::std::default::Default for Struct_GNUNET_GNSRECORD_Block {
    fn default() -> Struct_GNUNET_GNSRECORD_Block {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_GNUNET_GNSRECORD_BoxRecord {
    pub protocol: uint16_t,
    pub service: uint16_t,
    pub record_type: uint32_t,
}
impl ::std::default::Default for Struct_GNUNET_GNSRECORD_BoxRecord {
    fn default() -> Struct_GNUNET_GNSRECORD_BoxRecord {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type GNUNET_GNSRECORD_RecordCallback =
    ::std::option::Option<extern "C" fn
                              (cls: *mut ::libc::c_void,
                               rd_count: ::libc::c_uint,
                               rd: *const Struct_GNUNET_GNSRECORD_Data)
                              -> ()>;
pub enum Struct_GNUNET_NAMESTORE_QueueEntry { }
pub enum Struct_GNUNET_NAMESTORE_Handle { }
pub enum Struct_GNUNET_NAMESTORE_ZoneIterator { }
pub type GNUNET_NAMESTORE_ContinuationWithStatus =
    ::std::option::Option<extern "C" fn
                              (cls: *mut ::libc::c_void, success: int32_t,
                               emsg: *const ::libc::c_char) -> ()>;
pub type GNUNET_NAMESTORE_RecordMonitor =
    ::std::option::Option<extern "C" fn
                              (cls: *mut ::libc::c_void,
                               zone:
                                   *const Struct_GNUNET_CRYPTO_EcdsaPrivateKey,
                               label: *const ::libc::c_char,
                               rd_count: ::libc::c_uint,
                               rd: *const Struct_GNUNET_GNSRECORD_Data)
                              -> ()>;
pub enum Struct_GNUNET_NAMESTORE_ZoneMonitor { }
pub type GNUNET_NAMESTORE_RecordsSynchronizedCallback =
    ::std::option::Option<extern "C" fn(cls: *mut ::libc::c_void) -> ()>;
pub enum Struct_GNUNET_GNS_Handle { }
pub enum Struct_GNUNET_GNS_LookupRequest { }
pub type GNUNET_GNS_LookupResultProcessor =
    ::std::option::Option<extern "C" fn
                              (cls: *mut ::libc::c_void, rd_count: uint32_t,
                               rd: *const Struct_GNUNET_GNSRECORD_Data)
                              -> ()>;
pub type Enum_GNUNET_GNS_LocalOptions = ::libc::c_uint;
pub const GNUNET_GNS_LO_DEFAULT: ::libc::c_uint = 0;
pub const GNUNET_GNS_LO_NO_DHT: ::libc::c_uint = 1;
pub const GNUNET_GNS_LO_LOCAL_MASTER: ::libc::c_uint = 2;
pub enum Struct_GNUNET_IDENTITY_Handle { }
pub enum Struct_GNUNET_IDENTITY_Ego { }
pub enum Struct_GNUNET_IDENTITY_Operation { }
pub type GNUNET_IDENTITY_Callback =
    ::std::option::Option<extern "C" fn
                              (cls: *mut ::libc::c_void,
                               ego: *mut Struct_GNUNET_IDENTITY_Ego,
                               ctx: *mut *mut ::libc::c_void,
                               name: *const ::libc::c_char) -> ()>;
pub type GNUNET_IDENTITY_Continuation =
    ::std::option::Option<extern "C" fn
                              (cls: *mut ::libc::c_void,
                               emsg: *const ::libc::c_char) -> ()>;
pub type GNUNET_IDENTITY_EgoCallback =
    ::std::option::Option<extern "C" fn
                              (cls: *mut ::libc::c_void,
                               ego: *const Struct_GNUNET_IDENTITY_Ego) -> ()>;
pub enum Struct_GNUNET_IDENTITY_EgoLookup { }
pub type __builtin_va_list = [__va_list_tag; 1usize];
pub type __va_list_tag = Struct___va_list_tag;
#[repr(C)]
#[derive(Copy)]
pub struct Struct___va_list_tag {
    pub gp_offset: ::libc::c_uint,
    pub fp_offset: ::libc::c_uint,
    pub overflow_arg_area: *mut ::libc::c_void,
    pub reg_save_area: *mut ::libc::c_void,
}
impl ::std::default::Default for Struct___va_list_tag {
    fn default() -> Struct___va_list_tag { unsafe { ::std::mem::zeroed() } }
}
#[link(name = "gnunetutil")]
#[link(name = "gnunetgnsrecord")]
extern "C" {
    pub static in6addr_any: Struct_in6_addr;
    pub static in6addr_loopback: Struct_in6_addr;
    pub static mut _sys_siglist: [*const ::libc::c_char; 65usize];
    pub static mut sys_siglist: [*const ::libc::c_char; 65usize];
    pub static mut _IO_2_1_stdin_: Struct__IO_FILE_plus;
    pub static mut _IO_2_1_stdout_: Struct__IO_FILE_plus;
    pub static mut _IO_2_1_stderr_: Struct__IO_FILE_plus;
    pub static mut stdin: *mut Struct__IO_FILE;
    pub static mut stdout: *mut Struct__IO_FILE;
    pub static mut stderr: *mut Struct__IO_FILE;
    pub static mut sys_nerr: ::libc::c_int;
    pub static mut sys_errlist: *const *const ::libc::c_char;
    pub static mut __environ: *mut *mut ::libc::c_char;
    pub static mut optarg: *mut ::libc::c_char;
    pub static mut optind: ::libc::c_int;
    pub static mut opterr: ::libc::c_int;
    pub static mut optopt: ::libc::c_int;
    pub static mut signgam: ::libc::c_int;
    pub static mut _LIB_VERSION: _LIB_VERSION_TYPE;
    pub static mut __tzname: [*mut ::libc::c_char; 2usize];
    pub static mut __daylight: ::libc::c_int;
    pub static mut __timezone: ::libc::c_long;
    pub static mut tzname: [*mut ::libc::c_char; 2usize];
    pub static mut daylight: ::libc::c_int;
    pub static mut timezone: ::libc::c_long;
}
#[link(name = "gnunetutil")]
#[link(name = "gnunetgnsrecord")]
extern "C" {
    pub fn select(__nfds: ::libc::c_int, __readfds: *mut fd_set,
                  __writefds: *mut fd_set, __exceptfds: *mut fd_set,
                  __timeout: *mut Struct_timeval) -> ::libc::c_int;
    pub fn pselect(__nfds: ::libc::c_int, __readfds: *mut fd_set,
                   __writefds: *mut fd_set, __exceptfds: *mut fd_set,
                   __timeout: *const Struct_timespec,
                   __sigmask: *const __sigset_t) -> ::libc::c_int;
    pub fn gnu_dev_major(__dev: ::libc::c_ulonglong) -> ::libc::c_uint;
    pub fn gnu_dev_minor(__dev: ::libc::c_ulonglong) -> ::libc::c_uint;
    pub fn gnu_dev_makedev(__major: ::libc::c_uint, __minor: ::libc::c_uint)
     -> ::libc::c_ulonglong;
    pub fn readv(__fd: ::libc::c_int, __iovec: *const Struct_iovec,
                 __count: ::libc::c_int) -> ssize_t;
    pub fn writev(__fd: ::libc::c_int, __iovec: *const Struct_iovec,
                  __count: ::libc::c_int) -> ssize_t;
    pub fn preadv(__fd: ::libc::c_int, __iovec: *const Struct_iovec,
                  __count: ::libc::c_int, __offset: __off_t) -> ssize_t;
    pub fn pwritev(__fd: ::libc::c_int, __iovec: *const Struct_iovec,
                   __count: ::libc::c_int, __offset: __off_t) -> ssize_t;
    pub fn __cmsg_nxthdr(__mhdr: *mut Struct_msghdr,
                         __cmsg: *mut Struct_cmsghdr) -> *mut Struct_cmsghdr;
    pub fn socket(__domain: ::libc::c_int, __type: ::libc::c_int,
                  __protocol: ::libc::c_int) -> ::libc::c_int;
    pub fn socketpair(__domain: ::libc::c_int, __type: ::libc::c_int,
                      __protocol: ::libc::c_int, __fds: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn bind(__fd: ::libc::c_int, __addr: *const Struct_sockaddr,
                __len: socklen_t) -> ::libc::c_int;
    pub fn getsockname(__fd: ::libc::c_int, __addr: *mut Struct_sockaddr,
                       __len: *mut socklen_t) -> ::libc::c_int;
    pub fn connect(__fd: ::libc::c_int, __addr: *const Struct_sockaddr,
                   __len: socklen_t) -> ::libc::c_int;
    pub fn getpeername(__fd: ::libc::c_int, __addr: *mut Struct_sockaddr,
                       __len: *mut socklen_t) -> ::libc::c_int;
    pub fn send(__fd: ::libc::c_int, __buf: *const ::libc::c_void,
                __n: size_t, __flags: ::libc::c_int) -> ssize_t;
    pub fn recv(__fd: ::libc::c_int, __buf: *mut ::libc::c_void, __n: size_t,
                __flags: ::libc::c_int) -> ssize_t;
    pub fn sendto(__fd: ::libc::c_int, __buf: *const ::libc::c_void,
                  __n: size_t, __flags: ::libc::c_int,
                  __addr: *const Struct_sockaddr, __addr_len: socklen_t)
     -> ssize_t;
    pub fn recvfrom(__fd: ::libc::c_int, __buf: *mut ::libc::c_void,
                    __n: size_t, __flags: ::libc::c_int,
                    __addr: *mut Struct_sockaddr, __addr_len: *mut socklen_t)
     -> ssize_t;
    pub fn sendmsg(__fd: ::libc::c_int, __message: *const Struct_msghdr,
                   __flags: ::libc::c_int) -> ssize_t;
    pub fn recvmsg(__fd: ::libc::c_int, __message: *mut Struct_msghdr,
                   __flags: ::libc::c_int) -> ssize_t;
    pub fn getsockopt(__fd: ::libc::c_int, __level: ::libc::c_int,
                      __optname: ::libc::c_int, __optval: *mut ::libc::c_void,
                      __optlen: *mut socklen_t) -> ::libc::c_int;
    pub fn setsockopt(__fd: ::libc::c_int, __level: ::libc::c_int,
                      __optname: ::libc::c_int,
                      __optval: *const ::libc::c_void, __optlen: socklen_t)
     -> ::libc::c_int;
    pub fn listen(__fd: ::libc::c_int, __n: ::libc::c_int) -> ::libc::c_int;
    pub fn accept(__fd: ::libc::c_int, __addr: *mut Struct_sockaddr,
                  __addr_len: *mut socklen_t) -> ::libc::c_int;
    pub fn shutdown(__fd: ::libc::c_int, __how: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sockatmark(__fd: ::libc::c_int) -> ::libc::c_int;
    pub fn isfdtype(__fd: ::libc::c_int, __fdtype: ::libc::c_int)
     -> ::libc::c_int;
    pub fn ntohl(__netlong: uint32_t) -> uint32_t;
    pub fn ntohs(__netshort: uint16_t) -> uint16_t;
    pub fn htonl(__hostlong: uint32_t) -> uint32_t;
    pub fn htons(__hostshort: uint16_t) -> uint16_t;
    pub fn bindresvport(__sockfd: ::libc::c_int,
                        __sock_in: *mut Struct_sockaddr_in) -> ::libc::c_int;
    pub fn bindresvport6(__sockfd: ::libc::c_int,
                         __sock_in: *mut Struct_sockaddr_in6)
     -> ::libc::c_int;
    pub fn setrpcent(__stayopen: ::libc::c_int) -> ();
    pub fn endrpcent() -> ();
    pub fn getrpcbyname(__name: *const ::libc::c_char) -> *mut Struct_rpcent;
    pub fn getrpcbynumber(__number: ::libc::c_int) -> *mut Struct_rpcent;
    pub fn getrpcent() -> *mut Struct_rpcent;
    pub fn getrpcbyname_r(__name: *const ::libc::c_char,
                          __result_buf: *mut Struct_rpcent,
                          __buffer: *mut ::libc::c_char, __buflen: size_t,
                          __result: *mut *mut Struct_rpcent) -> ::libc::c_int;
    pub fn getrpcbynumber_r(__number: ::libc::c_int,
                            __result_buf: *mut Struct_rpcent,
                            __buffer: *mut ::libc::c_char, __buflen: size_t,
                            __result: *mut *mut Struct_rpcent)
     -> ::libc::c_int;
    pub fn getrpcent_r(__result_buf: *mut Struct_rpcent,
                       __buffer: *mut ::libc::c_char, __buflen: size_t,
                       __result: *mut *mut Struct_rpcent) -> ::libc::c_int;
    pub fn __h_errno_location() -> *mut ::libc::c_int;
    pub fn herror(__str: *const ::libc::c_char) -> ();
    pub fn hstrerror(__err_num: ::libc::c_int) -> *const ::libc::c_char;
    pub fn sethostent(__stay_open: ::libc::c_int) -> ();
    pub fn endhostent() -> ();
    pub fn gethostent() -> *mut Struct_hostent;
    pub fn gethostbyaddr(__addr: *const ::libc::c_void, __len: __socklen_t,
                         __type: ::libc::c_int) -> *mut Struct_hostent;
    pub fn gethostbyname(__name: *const ::libc::c_char)
     -> *mut Struct_hostent;
    pub fn gethostbyname2(__name: *const ::libc::c_char, __af: ::libc::c_int)
     -> *mut Struct_hostent;
    pub fn gethostent_r(__result_buf: *mut Struct_hostent,
                        __buf: *mut ::libc::c_char, __buflen: size_t,
                        __result: *mut *mut Struct_hostent,
                        __h_errnop: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn gethostbyaddr_r(__addr: *const ::libc::c_void, __len: __socklen_t,
                           __type: ::libc::c_int,
                           __result_buf: *mut Struct_hostent,
                           __buf: *mut ::libc::c_char, __buflen: size_t,
                           __result: *mut *mut Struct_hostent,
                           __h_errnop: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn gethostbyname_r(__name: *const ::libc::c_char,
                           __result_buf: *mut Struct_hostent,
                           __buf: *mut ::libc::c_char, __buflen: size_t,
                           __result: *mut *mut Struct_hostent,
                           __h_errnop: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn gethostbyname2_r(__name: *const ::libc::c_char,
                            __af: ::libc::c_int,
                            __result_buf: *mut Struct_hostent,
                            __buf: *mut ::libc::c_char, __buflen: size_t,
                            __result: *mut *mut Struct_hostent,
                            __h_errnop: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn setnetent(__stay_open: ::libc::c_int) -> ();
    pub fn endnetent() -> ();
    pub fn getnetent() -> *mut Struct_netent;
    pub fn getnetbyaddr(__net: uint32_t, __type: ::libc::c_int)
     -> *mut Struct_netent;
    pub fn getnetbyname(__name: *const ::libc::c_char) -> *mut Struct_netent;
    pub fn getnetent_r(__result_buf: *mut Struct_netent,
                       __buf: *mut ::libc::c_char, __buflen: size_t,
                       __result: *mut *mut Struct_netent,
                       __h_errnop: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn getnetbyaddr_r(__net: uint32_t, __type: ::libc::c_int,
                          __result_buf: *mut Struct_netent,
                          __buf: *mut ::libc::c_char, __buflen: size_t,
                          __result: *mut *mut Struct_netent,
                          __h_errnop: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn getnetbyname_r(__name: *const ::libc::c_char,
                          __result_buf: *mut Struct_netent,
                          __buf: *mut ::libc::c_char, __buflen: size_t,
                          __result: *mut *mut Struct_netent,
                          __h_errnop: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn setservent(__stay_open: ::libc::c_int) -> ();
    pub fn endservent() -> ();
    pub fn getservent() -> *mut Struct_servent;
    pub fn getservbyname(__name: *const ::libc::c_char,
                         __proto: *const ::libc::c_char)
     -> *mut Struct_servent;
    pub fn getservbyport(__port: ::libc::c_int,
                         __proto: *const ::libc::c_char)
     -> *mut Struct_servent;
    pub fn getservent_r(__result_buf: *mut Struct_servent,
                        __buf: *mut ::libc::c_char, __buflen: size_t,
                        __result: *mut *mut Struct_servent) -> ::libc::c_int;
    pub fn getservbyname_r(__name: *const ::libc::c_char,
                           __proto: *const ::libc::c_char,
                           __result_buf: *mut Struct_servent,
                           __buf: *mut ::libc::c_char, __buflen: size_t,
                           __result: *mut *mut Struct_servent)
     -> ::libc::c_int;
    pub fn getservbyport_r(__port: ::libc::c_int,
                           __proto: *const ::libc::c_char,
                           __result_buf: *mut Struct_servent,
                           __buf: *mut ::libc::c_char, __buflen: size_t,
                           __result: *mut *mut Struct_servent)
     -> ::libc::c_int;
    pub fn setprotoent(__stay_open: ::libc::c_int) -> ();
    pub fn endprotoent() -> ();
    pub fn getprotoent() -> *mut Struct_protoent;
    pub fn getprotobyname(__name: *const ::libc::c_char)
     -> *mut Struct_protoent;
    pub fn getprotobynumber(__proto: ::libc::c_int) -> *mut Struct_protoent;
    pub fn getprotoent_r(__result_buf: *mut Struct_protoent,
                         __buf: *mut ::libc::c_char, __buflen: size_t,
                         __result: *mut *mut Struct_protoent)
     -> ::libc::c_int;
    pub fn getprotobyname_r(__name: *const ::libc::c_char,
                            __result_buf: *mut Struct_protoent,
                            __buf: *mut ::libc::c_char, __buflen: size_t,
                            __result: *mut *mut Struct_protoent)
     -> ::libc::c_int;
    pub fn getprotobynumber_r(__proto: ::libc::c_int,
                              __result_buf: *mut Struct_protoent,
                              __buf: *mut ::libc::c_char, __buflen: size_t,
                              __result: *mut *mut Struct_protoent)
     -> ::libc::c_int;
    pub fn setnetgrent(__netgroup: *const ::libc::c_char) -> ::libc::c_int;
    pub fn endnetgrent() -> ();
    pub fn getnetgrent(__hostp: *mut *mut ::libc::c_char,
                       __userp: *mut *mut ::libc::c_char,
                       __domainp: *mut *mut ::libc::c_char) -> ::libc::c_int;
    pub fn innetgr(__netgroup: *const ::libc::c_char,
                   __host: *const ::libc::c_char,
                   __user: *const ::libc::c_char,
                   __domain: *const ::libc::c_char) -> ::libc::c_int;
    pub fn getnetgrent_r(__hostp: *mut *mut ::libc::c_char,
                         __userp: *mut *mut ::libc::c_char,
                         __domainp: *mut *mut ::libc::c_char,
                         __buffer: *mut ::libc::c_char, __buflen: size_t)
     -> ::libc::c_int;
    pub fn rcmd(__ahost: *mut *mut ::libc::c_char, __rport: ::libc::c_ushort,
                __locuser: *const ::libc::c_char,
                __remuser: *const ::libc::c_char,
                __cmd: *const ::libc::c_char, __fd2p: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn rcmd_af(__ahost: *mut *mut ::libc::c_char,
                   __rport: ::libc::c_ushort,
                   __locuser: *const ::libc::c_char,
                   __remuser: *const ::libc::c_char,
                   __cmd: *const ::libc::c_char, __fd2p: *mut ::libc::c_int,
                   __af: sa_family_t) -> ::libc::c_int;
    pub fn rexec(__ahost: *mut *mut ::libc::c_char, __rport: ::libc::c_int,
                 __name: *const ::libc::c_char, __pass: *const ::libc::c_char,
                 __cmd: *const ::libc::c_char, __fd2p: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn rexec_af(__ahost: *mut *mut ::libc::c_char, __rport: ::libc::c_int,
                    __name: *const ::libc::c_char,
                    __pass: *const ::libc::c_char,
                    __cmd: *const ::libc::c_char, __fd2p: *mut ::libc::c_int,
                    __af: sa_family_t) -> ::libc::c_int;
    pub fn ruserok(__rhost: *const ::libc::c_char, __suser: ::libc::c_int,
                   __remuser: *const ::libc::c_char,
                   __locuser: *const ::libc::c_char) -> ::libc::c_int;
    pub fn ruserok_af(__rhost: *const ::libc::c_char, __suser: ::libc::c_int,
                      __remuser: *const ::libc::c_char,
                      __locuser: *const ::libc::c_char, __af: sa_family_t)
     -> ::libc::c_int;
    pub fn iruserok(__raddr: uint32_t, __suser: ::libc::c_int,
                    __remuser: *const ::libc::c_char,
                    __locuser: *const ::libc::c_char) -> ::libc::c_int;
    pub fn iruserok_af(__raddr: *const ::libc::c_void, __suser: ::libc::c_int,
                       __remuser: *const ::libc::c_char,
                       __locuser: *const ::libc::c_char, __af: sa_family_t)
     -> ::libc::c_int;
    pub fn rresvport(__alport: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn rresvport_af(__alport: *mut ::libc::c_int, __af: sa_family_t)
     -> ::libc::c_int;
    pub fn getaddrinfo(__name: *const ::libc::c_char,
                       __service: *const ::libc::c_char,
                       __req: *const Struct_addrinfo,
                       __pai: *mut *mut Struct_addrinfo) -> ::libc::c_int;
    pub fn freeaddrinfo(__ai: *mut Struct_addrinfo) -> ();
    pub fn gai_strerror(__ecode: ::libc::c_int) -> *const ::libc::c_char;
    pub fn getnameinfo(__sa: *const Struct_sockaddr, __salen: socklen_t,
                       __host: *mut ::libc::c_char, __hostlen: socklen_t,
                       __serv: *mut ::libc::c_char, __servlen: socklen_t,
                       __flags: ::libc::c_int) -> ::libc::c_int;
    pub fn memcpy(__dest: *mut ::libc::c_void, __src: *const ::libc::c_void,
                  __n: size_t) -> *mut ::libc::c_void;
    pub fn memmove(__dest: *mut ::libc::c_void, __src: *const ::libc::c_void,
                   __n: size_t) -> *mut ::libc::c_void;
    pub fn memccpy(__dest: *mut ::libc::c_void, __src: *const ::libc::c_void,
                   __c: ::libc::c_int, __n: size_t) -> *mut ::libc::c_void;
    pub fn memset(__s: *mut ::libc::c_void, __c: ::libc::c_int, __n: size_t)
     -> *mut ::libc::c_void;
    pub fn memcmp(__s1: *const ::libc::c_void, __s2: *const ::libc::c_void,
                  __n: size_t) -> ::libc::c_int;
    pub fn memchr(__s: *const ::libc::c_void, __c: ::libc::c_int, __n: size_t)
     -> *mut ::libc::c_void;
    pub fn strcpy(__dest: *mut ::libc::c_char, __src: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn strncpy(__dest: *mut ::libc::c_char, __src: *const ::libc::c_char,
                   __n: size_t) -> *mut ::libc::c_char;
    pub fn strcat(__dest: *mut ::libc::c_char, __src: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn strncat(__dest: *mut ::libc::c_char, __src: *const ::libc::c_char,
                   __n: size_t) -> *mut ::libc::c_char;
    pub fn strcmp(__s1: *const ::libc::c_char, __s2: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn strncmp(__s1: *const ::libc::c_char, __s2: *const ::libc::c_char,
                   __n: size_t) -> ::libc::c_int;
    pub fn strcoll(__s1: *const ::libc::c_char, __s2: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn strxfrm(__dest: *mut ::libc::c_char, __src: *const ::libc::c_char,
                   __n: size_t) -> size_t;
    pub fn strcoll_l(__s1: *const ::libc::c_char, __s2: *const ::libc::c_char,
                     __l: __locale_t) -> ::libc::c_int;
    pub fn strxfrm_l(__dest: *mut ::libc::c_char,
                     __src: *const ::libc::c_char, __n: size_t,
                     __l: __locale_t) -> size_t;
    pub fn strdup(__s: *const ::libc::c_char) -> *mut ::libc::c_char;
    pub fn strndup(__string: *const ::libc::c_char, __n: size_t)
     -> *mut ::libc::c_char;
    pub fn strchr(__s: *const ::libc::c_char, __c: ::libc::c_int)
     -> *mut ::libc::c_char;
    pub fn strrchr(__s: *const ::libc::c_char, __c: ::libc::c_int)
     -> *mut ::libc::c_char;
    pub fn strcspn(__s: *const ::libc::c_char,
                   __reject: *const ::libc::c_char) -> size_t;
    pub fn strspn(__s: *const ::libc::c_char, __accept: *const ::libc::c_char)
     -> size_t;
    pub fn strpbrk(__s: *const ::libc::c_char,
                   __accept: *const ::libc::c_char) -> *mut ::libc::c_char;
    pub fn strstr(__haystack: *const ::libc::c_char,
                  __needle: *const ::libc::c_char) -> *mut ::libc::c_char;
    pub fn strtok(__s: *mut ::libc::c_char, __delim: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn __strtok_r(__s: *mut ::libc::c_char,
                      __delim: *const ::libc::c_char,
                      __save_ptr: *mut *mut ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn strtok_r(__s: *mut ::libc::c_char, __delim: *const ::libc::c_char,
                    __save_ptr: *mut *mut ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn strlen(__s: *const ::libc::c_char) -> size_t;
    pub fn strnlen(__string: *const ::libc::c_char, __maxlen: size_t)
     -> size_t;
    pub fn strerror(__errnum: ::libc::c_int) -> *mut ::libc::c_char;
    pub fn strerror_r(__errnum: ::libc::c_int, __buf: *mut ::libc::c_char,
                      __buflen: size_t) -> ::libc::c_int;
    pub fn strerror_l(__errnum: ::libc::c_int, __l: __locale_t)
     -> *mut ::libc::c_char;
    pub fn __bzero(__s: *mut ::libc::c_void, __n: size_t) -> ();
    pub fn bcopy(__src: *const ::libc::c_void, __dest: *mut ::libc::c_void,
                 __n: size_t) -> ();
    pub fn bzero(__s: *mut ::libc::c_void, __n: size_t) -> ();
    pub fn bcmp(__s1: *const ::libc::c_void, __s2: *const ::libc::c_void,
                __n: size_t) -> ::libc::c_int;
    pub fn index(__s: *const ::libc::c_char, __c: ::libc::c_int)
     -> *mut ::libc::c_char;
    pub fn rindex(__s: *const ::libc::c_char, __c: ::libc::c_int)
     -> *mut ::libc::c_char;
    pub fn ffs(__i: ::libc::c_int) -> ::libc::c_int;
    pub fn strcasecmp(__s1: *const ::libc::c_char,
                      __s2: *const ::libc::c_char) -> ::libc::c_int;
    pub fn strncasecmp(__s1: *const ::libc::c_char,
                       __s2: *const ::libc::c_char, __n: size_t)
     -> ::libc::c_int;
    pub fn strsep(__stringp: *mut *mut ::libc::c_char,
                  __delim: *const ::libc::c_char) -> *mut ::libc::c_char;
    pub fn strsignal(__sig: ::libc::c_int) -> *mut ::libc::c_char;
    pub fn __stpcpy(__dest: *mut ::libc::c_char, __src: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn stpcpy(__dest: *mut ::libc::c_char, __src: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn __stpncpy(__dest: *mut ::libc::c_char,
                     __src: *const ::libc::c_char, __n: size_t)
     -> *mut ::libc::c_char;
    pub fn stpncpy(__dest: *mut ::libc::c_char, __src: *const ::libc::c_char,
                   __n: size_t) -> *mut ::libc::c_char;
    pub fn inet_addr(__cp: *const ::libc::c_char) -> in_addr_t;
    pub fn inet_lnaof(__in: Struct_in_addr) -> in_addr_t;
    pub fn inet_makeaddr(__net: in_addr_t, __host: in_addr_t)
     -> Struct_in_addr;
    pub fn inet_netof(__in: Struct_in_addr) -> in_addr_t;
    pub fn inet_network(__cp: *const ::libc::c_char) -> in_addr_t;
    pub fn inet_ntoa(__in: Struct_in_addr) -> *mut ::libc::c_char;
    pub fn inet_pton(__af: ::libc::c_int, __cp: *const ::libc::c_char,
                     __buf: *mut ::libc::c_void) -> ::libc::c_int;
    pub fn inet_ntop(__af: ::libc::c_int, __cp: *const ::libc::c_void,
                     __buf: *mut ::libc::c_char, __len: socklen_t)
     -> *const ::libc::c_char;
    pub fn inet_aton(__cp: *const ::libc::c_char, __inp: *mut Struct_in_addr)
     -> ::libc::c_int;
    pub fn inet_neta(__net: in_addr_t, __buf: *mut ::libc::c_char,
                     __len: size_t) -> *mut ::libc::c_char;
    pub fn inet_net_ntop(__af: ::libc::c_int, __cp: *const ::libc::c_void,
                         __bits: ::libc::c_int, __buf: *mut ::libc::c_char,
                         __len: size_t) -> *mut ::libc::c_char;
    pub fn inet_net_pton(__af: ::libc::c_int, __cp: *const ::libc::c_char,
                         __buf: *mut ::libc::c_void, __len: size_t)
     -> ::libc::c_int;
    pub fn inet_nsap_addr(__cp: *const ::libc::c_char,
                          __buf: *mut ::libc::c_uchar, __len: ::libc::c_int)
     -> ::libc::c_uint;
    pub fn inet_nsap_ntoa(__len: ::libc::c_int, __cp: *const ::libc::c_uchar,
                          __buf: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn setpwent() -> ();
    pub fn endpwent() -> ();
    pub fn getpwent() -> *mut Struct_passwd;
    pub fn fgetpwent(__stream: *mut FILE) -> *mut Struct_passwd;
    pub fn putpwent(__p: *const Struct_passwd, __f: *mut FILE)
     -> ::libc::c_int;
    pub fn getpwuid(__uid: __uid_t) -> *mut Struct_passwd;
    pub fn getpwnam(__name: *const ::libc::c_char) -> *mut Struct_passwd;
    pub fn getpwent_r(__resultbuf: *mut Struct_passwd,
                      __buffer: *mut ::libc::c_char, __buflen: size_t,
                      __result: *mut *mut Struct_passwd) -> ::libc::c_int;
    pub fn getpwuid_r(__uid: __uid_t, __resultbuf: *mut Struct_passwd,
                      __buffer: *mut ::libc::c_char, __buflen: size_t,
                      __result: *mut *mut Struct_passwd) -> ::libc::c_int;
    pub fn getpwnam_r(__name: *const ::libc::c_char,
                      __resultbuf: *mut Struct_passwd,
                      __buffer: *mut ::libc::c_char, __buflen: size_t,
                      __result: *mut *mut Struct_passwd) -> ::libc::c_int;
    pub fn fgetpwent_r(__stream: *mut FILE, __resultbuf: *mut Struct_passwd,
                       __buffer: *mut ::libc::c_char, __buflen: size_t,
                       __result: *mut *mut Struct_passwd) -> ::libc::c_int;
    pub fn ioctl(__fd: ::libc::c_int, __request: ::libc::c_ulong, ...)
     -> ::libc::c_int;
    pub fn __sigismember(arg1: *const __sigset_t, arg2: ::libc::c_int)
     -> ::libc::c_int;
    pub fn __sigaddset(arg1: *mut __sigset_t, arg2: ::libc::c_int)
     -> ::libc::c_int;
    pub fn __sigdelset(arg1: *mut __sigset_t, arg2: ::libc::c_int)
     -> ::libc::c_int;
    pub fn __sysv_signal(__sig: ::libc::c_int, __handler: __sighandler_t)
     -> __sighandler_t;
    pub fn signal(__sig: ::libc::c_int, __handler: __sighandler_t)
     -> __sighandler_t;
    pub fn kill(__pid: __pid_t, __sig: ::libc::c_int) -> ::libc::c_int;
    pub fn killpg(__pgrp: __pid_t, __sig: ::libc::c_int) -> ::libc::c_int;
    pub fn raise(__sig: ::libc::c_int) -> ::libc::c_int;
    pub fn ssignal(__sig: ::libc::c_int, __handler: __sighandler_t)
     -> __sighandler_t;
    pub fn gsignal(__sig: ::libc::c_int) -> ::libc::c_int;
    pub fn psignal(__sig: ::libc::c_int, __s: *const ::libc::c_char) -> ();
    pub fn psiginfo(__pinfo: *const siginfo_t, __s: *const ::libc::c_char)
     -> ();
    pub fn __sigpause(__sig_or_mask: ::libc::c_int, __is_sig: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sigblock(__mask: ::libc::c_int) -> ::libc::c_int;
    pub fn sigsetmask(__mask: ::libc::c_int) -> ::libc::c_int;
    pub fn siggetmask() -> ::libc::c_int;
    pub fn sigemptyset(__set: *mut sigset_t) -> ::libc::c_int;
    pub fn sigfillset(__set: *mut sigset_t) -> ::libc::c_int;
    pub fn sigaddset(__set: *mut sigset_t, __signo: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sigdelset(__set: *mut sigset_t, __signo: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sigismember(__set: *const sigset_t, __signo: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sigprocmask(__how: ::libc::c_int, __set: *const sigset_t,
                       __oset: *mut sigset_t) -> ::libc::c_int;
    pub fn sigsuspend(__set: *const sigset_t) -> ::libc::c_int;
    pub fn sigaction(__sig: ::libc::c_int, __act: *const Struct_sigaction,
                     __oact: *mut Struct_sigaction) -> ::libc::c_int;
    pub fn sigpending(__set: *mut sigset_t) -> ::libc::c_int;
    pub fn sigwait(__set: *const sigset_t, __sig: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn sigwaitinfo(__set: *const sigset_t, __info: *mut siginfo_t)
     -> ::libc::c_int;
    pub fn sigtimedwait(__set: *const sigset_t, __info: *mut siginfo_t,
                        __timeout: *const Struct_timespec) -> ::libc::c_int;
    pub fn sigqueue(__pid: __pid_t, __sig: ::libc::c_int, __val: Union_sigval)
     -> ::libc::c_int;
    pub fn sigvec(__sig: ::libc::c_int, __vec: *const Struct_sigvec,
                  __ovec: *mut Struct_sigvec) -> ::libc::c_int;
    pub fn sigreturn(__scp: *mut Struct_sigcontext) -> ::libc::c_int;
    pub fn siginterrupt(__sig: ::libc::c_int, __interrupt: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sigstack(__ss: *mut Struct_sigstack, __oss: *mut Struct_sigstack)
     -> ::libc::c_int;
    pub fn sigaltstack(__ss: *const Struct_sigaltstack,
                       __oss: *mut Struct_sigaltstack) -> ::libc::c_int;
    pub fn pthread_sigmask(__how: ::libc::c_int, __newmask: *const __sigset_t,
                           __oldmask: *mut __sigset_t) -> ::libc::c_int;
    pub fn pthread_kill(__threadid: pthread_t, __signo: ::libc::c_int)
     -> ::libc::c_int;
    pub fn __libc_current_sigrtmin() -> ::libc::c_int;
    pub fn __libc_current_sigrtmax() -> ::libc::c_int;
    pub fn wait(__stat_loc: __WAIT_STATUS) -> __pid_t;
    pub fn waitpid(__pid: __pid_t, __stat_loc: *mut ::libc::c_int,
                   __options: ::libc::c_int) -> __pid_t;
    pub fn waitid(__idtype: idtype_t, __id: __id_t, __infop: *mut siginfo_t,
                  __options: ::libc::c_int) -> ::libc::c_int;
    pub fn wait3(__stat_loc: __WAIT_STATUS, __options: ::libc::c_int,
                 __usage: *mut Struct_rusage) -> __pid_t;
    pub fn wait4(__pid: __pid_t, __stat_loc: __WAIT_STATUS,
                 __options: ::libc::c_int, __usage: *mut Struct_rusage)
     -> __pid_t;
    pub fn setgrent() -> ();
    pub fn endgrent() -> ();
    pub fn getgrent() -> *mut Struct_group;
    pub fn fgetgrent(__stream: *mut FILE) -> *mut Struct_group;
    pub fn getgrgid(__gid: __gid_t) -> *mut Struct_group;
    pub fn getgrnam(__name: *const ::libc::c_char) -> *mut Struct_group;
    pub fn getgrgid_r(__gid: __gid_t, __resultbuf: *mut Struct_group,
                      __buffer: *mut ::libc::c_char, __buflen: size_t,
                      __result: *mut *mut Struct_group) -> ::libc::c_int;
    pub fn getgrnam_r(__name: *const ::libc::c_char,
                      __resultbuf: *mut Struct_group,
                      __buffer: *mut ::libc::c_char, __buflen: size_t,
                      __result: *mut *mut Struct_group) -> ::libc::c_int;
    pub fn fgetgrent_r(__stream: *mut FILE, __resultbuf: *mut Struct_group,
                       __buffer: *mut ::libc::c_char, __buflen: size_t,
                       __result: *mut *mut Struct_group) -> ::libc::c_int;
    pub fn setgroups(__n: size_t, __groups: *const __gid_t) -> ::libc::c_int;
    pub fn getgrouplist(__user: *const ::libc::c_char, __group: __gid_t,
                        __groups: *mut __gid_t, __ngroups: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn initgroups(__user: *const ::libc::c_char, __group: __gid_t)
     -> ::libc::c_int;
    pub fn __underflow(arg1: *mut _IO_FILE) -> ::libc::c_int;
    pub fn __uflow(arg1: *mut _IO_FILE) -> ::libc::c_int;
    pub fn __overflow(arg1: *mut _IO_FILE, arg2: ::libc::c_int)
     -> ::libc::c_int;
    pub fn _IO_getc(__fp: *mut _IO_FILE) -> ::libc::c_int;
    pub fn _IO_putc(__c: ::libc::c_int, __fp: *mut _IO_FILE) -> ::libc::c_int;
    pub fn _IO_feof(__fp: *mut _IO_FILE) -> ::libc::c_int;
    pub fn _IO_ferror(__fp: *mut _IO_FILE) -> ::libc::c_int;
    pub fn _IO_peekc_locked(__fp: *mut _IO_FILE) -> ::libc::c_int;
    pub fn _IO_flockfile(arg1: *mut _IO_FILE) -> ();
    pub fn _IO_funlockfile(arg1: *mut _IO_FILE) -> ();
    pub fn _IO_ftrylockfile(arg1: *mut _IO_FILE) -> ::libc::c_int;
    pub fn _IO_vfscanf(arg1: *mut _IO_FILE, arg2: *const ::libc::c_char,
                       arg3: __gnuc_va_list, arg4: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn _IO_vfprintf(arg1: *mut _IO_FILE, arg2: *const ::libc::c_char,
                        arg3: __gnuc_va_list) -> ::libc::c_int;
    pub fn _IO_padn(arg1: *mut _IO_FILE, arg2: ::libc::c_int, arg3: __ssize_t)
     -> __ssize_t;
    pub fn _IO_sgetn(arg1: *mut _IO_FILE, arg2: *mut ::libc::c_void,
                     arg3: size_t) -> size_t;
    pub fn _IO_seekoff(arg1: *mut _IO_FILE, arg2: __off64_t,
                       arg3: ::libc::c_int, arg4: ::libc::c_int) -> __off64_t;
    pub fn _IO_seekpos(arg1: *mut _IO_FILE, arg2: __off64_t,
                       arg3: ::libc::c_int) -> __off64_t;
    pub fn _IO_free_backup_area(arg1: *mut _IO_FILE) -> ();
    pub fn remove(__filename: *const ::libc::c_char) -> ::libc::c_int;
    pub fn rename(__old: *const ::libc::c_char, __new: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn renameat(__oldfd: ::libc::c_int, __old: *const ::libc::c_char,
                    __newfd: ::libc::c_int, __new: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn tmpfile() -> *mut FILE;
    pub fn tmpnam(__s: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn tmpnam_r(__s: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn tempnam(__dir: *const ::libc::c_char, __pfx: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn fclose(__stream: *mut FILE) -> ::libc::c_int;
    pub fn fflush(__stream: *mut FILE) -> ::libc::c_int;
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::libc::c_int;
    pub fn fopen(__filename: *const ::libc::c_char,
                 __modes: *const ::libc::c_char) -> *mut FILE;
    pub fn freopen(__filename: *const ::libc::c_char,
                   __modes: *const ::libc::c_char, __stream: *mut FILE)
     -> *mut FILE;
    pub fn fdopen(__fd: ::libc::c_int, __modes: *const ::libc::c_char)
     -> *mut FILE;
    pub fn fmemopen(__s: *mut ::libc::c_void, __len: size_t,
                    __modes: *const ::libc::c_char) -> *mut FILE;
    pub fn open_memstream(__bufloc: *mut *mut ::libc::c_char,
                          __sizeloc: *mut size_t) -> *mut FILE;
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::libc::c_char) -> ();
    pub fn setvbuf(__stream: *mut FILE, __buf: *mut ::libc::c_char,
                   __modes: ::libc::c_int, __n: size_t) -> ::libc::c_int;
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::libc::c_char,
                     __size: size_t) -> ();
    pub fn setlinebuf(__stream: *mut FILE) -> ();
    pub fn fprintf(__stream: *mut FILE, __format: *const ::libc::c_char, ...)
     -> ::libc::c_int;
    pub fn printf(__format: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn sprintf(__s: *mut ::libc::c_char,
                   __format: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn vfprintf(__s: *mut FILE, __format: *const ::libc::c_char,
                    __arg: __gnuc_va_list) -> ::libc::c_int;
    pub fn vprintf(__format: *const ::libc::c_char, __arg: __gnuc_va_list)
     -> ::libc::c_int;
    pub fn vsprintf(__s: *mut ::libc::c_char, __format: *const ::libc::c_char,
                    __arg: __gnuc_va_list) -> ::libc::c_int;
    pub fn snprintf(__s: *mut ::libc::c_char, __maxlen: size_t,
                    __format: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn vsnprintf(__s: *mut ::libc::c_char, __maxlen: size_t,
                     __format: *const ::libc::c_char, __arg: __gnuc_va_list)
     -> ::libc::c_int;
    pub fn vdprintf(__fd: ::libc::c_int, __fmt: *const ::libc::c_char,
                    __arg: __gnuc_va_list) -> ::libc::c_int;
    pub fn dprintf(__fd: ::libc::c_int, __fmt: *const ::libc::c_char, ...)
     -> ::libc::c_int;
    pub fn fscanf(__stream: *mut FILE, __format: *const ::libc::c_char, ...)
     -> ::libc::c_int;
    pub fn scanf(__format: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn sscanf(__s: *const ::libc::c_char,
                  __format: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn vfscanf(__s: *mut FILE, __format: *const ::libc::c_char,
                   __arg: __gnuc_va_list) -> ::libc::c_int;
    pub fn vscanf(__format: *const ::libc::c_char, __arg: __gnuc_va_list)
     -> ::libc::c_int;
    pub fn vsscanf(__s: *const ::libc::c_char,
                   __format: *const ::libc::c_char, __arg: __gnuc_va_list)
     -> ::libc::c_int;
    pub fn fgetc(__stream: *mut FILE) -> ::libc::c_int;
    pub fn getc(__stream: *mut FILE) -> ::libc::c_int;
    pub fn getchar() -> ::libc::c_int;
    pub fn getc_unlocked(__stream: *mut FILE) -> ::libc::c_int;
    pub fn getchar_unlocked() -> ::libc::c_int;
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::libc::c_int;
    pub fn fputc(__c: ::libc::c_int, __stream: *mut FILE) -> ::libc::c_int;
    pub fn putc(__c: ::libc::c_int, __stream: *mut FILE) -> ::libc::c_int;
    pub fn putchar(__c: ::libc::c_int) -> ::libc::c_int;
    pub fn fputc_unlocked(__c: ::libc::c_int, __stream: *mut FILE)
     -> ::libc::c_int;
    pub fn putc_unlocked(__c: ::libc::c_int, __stream: *mut FILE)
     -> ::libc::c_int;
    pub fn putchar_unlocked(__c: ::libc::c_int) -> ::libc::c_int;
    pub fn getw(__stream: *mut FILE) -> ::libc::c_int;
    pub fn putw(__w: ::libc::c_int, __stream: *mut FILE) -> ::libc::c_int;
    pub fn fgets(__s: *mut ::libc::c_char, __n: ::libc::c_int,
                 __stream: *mut FILE) -> *mut ::libc::c_char;
    pub fn gets(__s: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn __getdelim(__lineptr: *mut *mut ::libc::c_char, __n: *mut size_t,
                      __delimiter: ::libc::c_int, __stream: *mut FILE)
     -> __ssize_t;
    pub fn getdelim(__lineptr: *mut *mut ::libc::c_char, __n: *mut size_t,
                    __delimiter: ::libc::c_int, __stream: *mut FILE)
     -> __ssize_t;
    pub fn getline(__lineptr: *mut *mut ::libc::c_char, __n: *mut size_t,
                   __stream: *mut FILE) -> __ssize_t;
    pub fn fputs(__s: *const ::libc::c_char, __stream: *mut FILE)
     -> ::libc::c_int;
    pub fn puts(__s: *const ::libc::c_char) -> ::libc::c_int;
    pub fn ungetc(__c: ::libc::c_int, __stream: *mut FILE) -> ::libc::c_int;
    pub fn fread(__ptr: *mut ::libc::c_void, __size: size_t, __n: size_t,
                 __stream: *mut FILE) -> size_t;
    pub fn fwrite(__ptr: *const ::libc::c_void, __size: size_t, __n: size_t,
                  __s: *mut FILE) -> size_t;
    pub fn fread_unlocked(__ptr: *mut ::libc::c_void, __size: size_t,
                          __n: size_t, __stream: *mut FILE) -> size_t;
    pub fn fwrite_unlocked(__ptr: *const ::libc::c_void, __size: size_t,
                           __n: size_t, __stream: *mut FILE) -> size_t;
    pub fn fseek(__stream: *mut FILE, __off: ::libc::c_long,
                 __whence: ::libc::c_int) -> ::libc::c_int;
    pub fn ftell(__stream: *mut FILE) -> ::libc::c_long;
    pub fn rewind(__stream: *mut FILE) -> ();
    pub fn fseeko(__stream: *mut FILE, __off: __off_t,
                  __whence: ::libc::c_int) -> ::libc::c_int;
    pub fn ftello(__stream: *mut FILE) -> __off_t;
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t) -> ::libc::c_int;
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t)
     -> ::libc::c_int;
    pub fn clearerr(__stream: *mut FILE) -> ();
    pub fn feof(__stream: *mut FILE) -> ::libc::c_int;
    pub fn ferror(__stream: *mut FILE) -> ::libc::c_int;
    pub fn clearerr_unlocked(__stream: *mut FILE) -> ();
    pub fn feof_unlocked(__stream: *mut FILE) -> ::libc::c_int;
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::libc::c_int;
    pub fn perror(__s: *const ::libc::c_char) -> ();
    pub fn fileno(__stream: *mut FILE) -> ::libc::c_int;
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::libc::c_int;
    pub fn popen(__command: *const ::libc::c_char,
                 __modes: *const ::libc::c_char) -> *mut FILE;
    pub fn pclose(__stream: *mut FILE) -> ::libc::c_int;
    pub fn ctermid(__s: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn flockfile(__stream: *mut FILE) -> ();
    pub fn ftrylockfile(__stream: *mut FILE) -> ::libc::c_int;
    pub fn funlockfile(__stream: *mut FILE) -> ();
    pub fn __ctype_get_mb_cur_max() -> size_t;
    pub fn atof(__nptr: *const ::libc::c_char) -> ::libc::c_double;
    pub fn atoi(__nptr: *const ::libc::c_char) -> ::libc::c_int;
    pub fn atol(__nptr: *const ::libc::c_char) -> ::libc::c_long;
    pub fn atoll(nptr: *const ::libc::c_char) -> ::libc::c_longlong;
    pub fn strtod(__nptr: *const ::libc::c_char,
                  __endptr: *mut *mut ::libc::c_char) -> ::libc::c_double;
    pub fn strtof(__nptr: *const ::libc::c_char,
                  __endptr: *mut *mut ::libc::c_char) -> ::libc::c_float;
    pub fn strtold(__nptr: *const ::libc::c_char,
                   __endptr: *mut *mut ::libc::c_char) -> ::libc::c_double;
    pub fn strtol(__nptr: *const ::libc::c_char,
                  __endptr: *mut *mut ::libc::c_char, __base: ::libc::c_int)
     -> ::libc::c_long;
    pub fn strtoul(__nptr: *const ::libc::c_char,
                   __endptr: *mut *mut ::libc::c_char, __base: ::libc::c_int)
     -> ::libc::c_ulong;
    pub fn strtoq(__nptr: *const ::libc::c_char,
                  __endptr: *mut *mut ::libc::c_char, __base: ::libc::c_int)
     -> ::libc::c_longlong;
    pub fn strtouq(__nptr: *const ::libc::c_char,
                   __endptr: *mut *mut ::libc::c_char, __base: ::libc::c_int)
     -> ::libc::c_ulonglong;
    pub fn strtoll(__nptr: *const ::libc::c_char,
                   __endptr: *mut *mut ::libc::c_char, __base: ::libc::c_int)
     -> ::libc::c_longlong;
    pub fn strtoull(__nptr: *const ::libc::c_char,
                    __endptr: *mut *mut ::libc::c_char, __base: ::libc::c_int)
     -> ::libc::c_ulonglong;
    pub fn l64a(__n: ::libc::c_long) -> *mut ::libc::c_char;
    pub fn a64l(__s: *const ::libc::c_char) -> ::libc::c_long;
    pub fn random() -> ::libc::c_long;
    pub fn srandom(__seed: ::libc::c_uint) -> ();
    pub fn initstate(__seed: ::libc::c_uint, __statebuf: *mut ::libc::c_char,
                     __statelen: size_t) -> *mut ::libc::c_char;
    pub fn setstate(__statebuf: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn random_r(__buf: *mut Struct_random_data, __result: *mut int32_t)
     -> ::libc::c_int;
    pub fn srandom_r(__seed: ::libc::c_uint, __buf: *mut Struct_random_data)
     -> ::libc::c_int;
    pub fn initstate_r(__seed: ::libc::c_uint,
                       __statebuf: *mut ::libc::c_char, __statelen: size_t,
                       __buf: *mut Struct_random_data) -> ::libc::c_int;
    pub fn setstate_r(__statebuf: *mut ::libc::c_char,
                      __buf: *mut Struct_random_data) -> ::libc::c_int;
    pub fn rand() -> ::libc::c_int;
    pub fn srand(__seed: ::libc::c_uint) -> ();
    pub fn rand_r(__seed: *mut ::libc::c_uint) -> ::libc::c_int;
    pub fn drand48() -> ::libc::c_double;
    pub fn erand48(__xsubi: *mut ::libc::c_ushort) -> ::libc::c_double;
    pub fn lrand48() -> ::libc::c_long;
    pub fn nrand48(__xsubi: *mut ::libc::c_ushort) -> ::libc::c_long;
    pub fn mrand48() -> ::libc::c_long;
    pub fn jrand48(__xsubi: *mut ::libc::c_ushort) -> ::libc::c_long;
    pub fn srand48(__seedval: ::libc::c_long) -> ();
    pub fn seed48(__seed16v: *mut ::libc::c_ushort) -> *mut ::libc::c_ushort;
    pub fn lcong48(__param: *mut ::libc::c_ushort) -> ();
    pub fn drand48_r(__buffer: *mut Struct_drand48_data,
                     __result: *mut ::libc::c_double) -> ::libc::c_int;
    pub fn erand48_r(__xsubi: *mut ::libc::c_ushort,
                     __buffer: *mut Struct_drand48_data,
                     __result: *mut ::libc::c_double) -> ::libc::c_int;
    pub fn lrand48_r(__buffer: *mut Struct_drand48_data,
                     __result: *mut ::libc::c_long) -> ::libc::c_int;
    pub fn nrand48_r(__xsubi: *mut ::libc::c_ushort,
                     __buffer: *mut Struct_drand48_data,
                     __result: *mut ::libc::c_long) -> ::libc::c_int;
    pub fn mrand48_r(__buffer: *mut Struct_drand48_data,
                     __result: *mut ::libc::c_long) -> ::libc::c_int;
    pub fn jrand48_r(__xsubi: *mut ::libc::c_ushort,
                     __buffer: *mut Struct_drand48_data,
                     __result: *mut ::libc::c_long) -> ::libc::c_int;
    pub fn srand48_r(__seedval: ::libc::c_long,
                     __buffer: *mut Struct_drand48_data) -> ::libc::c_int;
    pub fn seed48_r(__seed16v: *mut ::libc::c_ushort,
                    __buffer: *mut Struct_drand48_data) -> ::libc::c_int;
    pub fn lcong48_r(__param: *mut ::libc::c_ushort,
                     __buffer: *mut Struct_drand48_data) -> ::libc::c_int;
    pub fn malloc(__size: size_t) -> *mut ::libc::c_void;
    pub fn calloc(__nmemb: size_t, __size: size_t) -> *mut ::libc::c_void;
    pub fn realloc(__ptr: *mut ::libc::c_void, __size: size_t)
     -> *mut ::libc::c_void;
    pub fn free(__ptr: *mut ::libc::c_void) -> ();
    pub fn cfree(__ptr: *mut ::libc::c_void) -> ();
    pub fn alloca(__size: size_t) -> *mut ::libc::c_void;
    pub fn valloc(__size: size_t) -> *mut ::libc::c_void;
    pub fn posix_memalign(__memptr: *mut *mut ::libc::c_void,
                          __alignment: size_t, __size: size_t)
     -> ::libc::c_int;
    pub fn abort() -> ();
    pub fn atexit(__func: ::std::option::Option<extern "C" fn() -> ()>)
     -> ::libc::c_int;
    pub fn on_exit(__func:
                       ::std::option::Option<extern "C" fn
                                                 (__status: ::libc::c_int,
                                                  __arg: *mut ::libc::c_void)
                                                 -> ()>,
                   __arg: *mut ::libc::c_void) -> ::libc::c_int;
    pub fn exit(__status: ::libc::c_int) -> ();
    pub fn _Exit(__status: ::libc::c_int) -> ();
    pub fn getenv(__name: *const ::libc::c_char) -> *mut ::libc::c_char;
    pub fn putenv(__string: *mut ::libc::c_char) -> ::libc::c_int;
    pub fn setenv(__name: *const ::libc::c_char,
                  __value: *const ::libc::c_char, __replace: ::libc::c_int)
     -> ::libc::c_int;
    pub fn unsetenv(__name: *const ::libc::c_char) -> ::libc::c_int;
    pub fn clearenv() -> ::libc::c_int;
    pub fn mktemp(__template: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn mkstemp(__template: *mut ::libc::c_char) -> ::libc::c_int;
    pub fn mkstemps(__template: *mut ::libc::c_char,
                    __suffixlen: ::libc::c_int) -> ::libc::c_int;
    pub fn mkdtemp(__template: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn system(__command: *const ::libc::c_char) -> ::libc::c_int;
    pub fn realpath(__name: *const ::libc::c_char,
                    __resolved: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn bsearch(__key: *const ::libc::c_void,
                   __base: *const ::libc::c_void, __nmemb: size_t,
                   __size: size_t, __compar: __compar_fn_t)
     -> *mut ::libc::c_void;
    pub fn qsort(__base: *mut ::libc::c_void, __nmemb: size_t, __size: size_t,
                 __compar: __compar_fn_t) -> ();
    pub fn abs(__x: ::libc::c_int) -> ::libc::c_int;
    pub fn labs(__x: ::libc::c_long) -> ::libc::c_long;
    pub fn llabs(__x: ::libc::c_longlong) -> ::libc::c_longlong;
    pub fn div(__numer: ::libc::c_int, __denom: ::libc::c_int) -> div_t;
    pub fn ldiv(__numer: ::libc::c_long, __denom: ::libc::c_long) -> ldiv_t;
    pub fn lldiv(__numer: ::libc::c_longlong, __denom: ::libc::c_longlong)
     -> lldiv_t;
    pub fn ecvt(__value: ::libc::c_double, __ndigit: ::libc::c_int,
                __decpt: *mut ::libc::c_int, __sign: *mut ::libc::c_int)
     -> *mut ::libc::c_char;
    pub fn fcvt(__value: ::libc::c_double, __ndigit: ::libc::c_int,
                __decpt: *mut ::libc::c_int, __sign: *mut ::libc::c_int)
     -> *mut ::libc::c_char;
    pub fn gcvt(__value: ::libc::c_double, __ndigit: ::libc::c_int,
                __buf: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn qecvt(__value: ::libc::c_double, __ndigit: ::libc::c_int,
                 __decpt: *mut ::libc::c_int, __sign: *mut ::libc::c_int)
     -> *mut ::libc::c_char;
    pub fn qfcvt(__value: ::libc::c_double, __ndigit: ::libc::c_int,
                 __decpt: *mut ::libc::c_int, __sign: *mut ::libc::c_int)
     -> *mut ::libc::c_char;
    pub fn qgcvt(__value: ::libc::c_double, __ndigit: ::libc::c_int,
                 __buf: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn ecvt_r(__value: ::libc::c_double, __ndigit: ::libc::c_int,
                  __decpt: *mut ::libc::c_int, __sign: *mut ::libc::c_int,
                  __buf: *mut ::libc::c_char, __len: size_t) -> ::libc::c_int;
    pub fn fcvt_r(__value: ::libc::c_double, __ndigit: ::libc::c_int,
                  __decpt: *mut ::libc::c_int, __sign: *mut ::libc::c_int,
                  __buf: *mut ::libc::c_char, __len: size_t) -> ::libc::c_int;
    pub fn qecvt_r(__value: ::libc::c_double, __ndigit: ::libc::c_int,
                   __decpt: *mut ::libc::c_int, __sign: *mut ::libc::c_int,
                   __buf: *mut ::libc::c_char, __len: size_t)
     -> ::libc::c_int;
    pub fn qfcvt_r(__value: ::libc::c_double, __ndigit: ::libc::c_int,
                   __decpt: *mut ::libc::c_int, __sign: *mut ::libc::c_int,
                   __buf: *mut ::libc::c_char, __len: size_t)
     -> ::libc::c_int;
    pub fn mblen(__s: *const ::libc::c_char, __n: size_t) -> ::libc::c_int;
    pub fn mbtowc(__pwc: *mut wchar_t, __s: *const ::libc::c_char,
                  __n: size_t) -> ::libc::c_int;
    pub fn wctomb(__s: *mut ::libc::c_char, __wchar: wchar_t)
     -> ::libc::c_int;
    pub fn mbstowcs(__pwcs: *mut wchar_t, __s: *const ::libc::c_char,
                    __n: size_t) -> size_t;
    pub fn wcstombs(__s: *mut ::libc::c_char, __pwcs: *const wchar_t,
                    __n: size_t) -> size_t;
    pub fn rpmatch(__response: *const ::libc::c_char) -> ::libc::c_int;
    pub fn getsubopt(__optionp: *mut *mut ::libc::c_char,
                     __tokens: *const *mut ::libc::c_char,
                     __valuep: *mut *mut ::libc::c_char) -> ::libc::c_int;
    pub fn getloadavg(__loadavg: *mut ::libc::c_double,
                      __nelem: ::libc::c_int) -> ::libc::c_int;
    pub fn __errno_location() -> *mut ::libc::c_int;
    pub fn dirname(__path: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn __xpg_basename(__path: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn access(__name: *const ::libc::c_char, __type: ::libc::c_int)
     -> ::libc::c_int;
    pub fn faccessat(__fd: ::libc::c_int, __file: *const ::libc::c_char,
                     __type: ::libc::c_int, __flag: ::libc::c_int)
     -> ::libc::c_int;
    pub fn lseek(__fd: ::libc::c_int, __offset: __off_t,
                 __whence: ::libc::c_int) -> __off_t;
    pub fn close(__fd: ::libc::c_int) -> ::libc::c_int;
    pub fn read(__fd: ::libc::c_int, __buf: *mut ::libc::c_void,
                __nbytes: size_t) -> ssize_t;
    pub fn write(__fd: ::libc::c_int, __buf: *const ::libc::c_void,
                 __n: size_t) -> ssize_t;
    pub fn pread(__fd: ::libc::c_int, __buf: *mut ::libc::c_void,
                 __nbytes: size_t, __offset: __off_t) -> ssize_t;
    pub fn pwrite(__fd: ::libc::c_int, __buf: *const ::libc::c_void,
                  __n: size_t, __offset: __off_t) -> ssize_t;
    pub fn pipe(__pipedes: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn alarm(__seconds: ::libc::c_uint) -> ::libc::c_uint;
    pub fn sleep(__seconds: ::libc::c_uint) -> ::libc::c_uint;
    pub fn ualarm(__value: __useconds_t, __interval: __useconds_t)
     -> __useconds_t;
    pub fn usleep(__useconds: __useconds_t) -> ::libc::c_int;
    pub fn pause() -> ::libc::c_int;
    pub fn chown(__file: *const ::libc::c_char, __owner: __uid_t,
                 __group: __gid_t) -> ::libc::c_int;
    pub fn fchown(__fd: ::libc::c_int, __owner: __uid_t, __group: __gid_t)
     -> ::libc::c_int;
    pub fn lchown(__file: *const ::libc::c_char, __owner: __uid_t,
                  __group: __gid_t) -> ::libc::c_int;
    pub fn fchownat(__fd: ::libc::c_int, __file: *const ::libc::c_char,
                    __owner: __uid_t, __group: __gid_t, __flag: ::libc::c_int)
     -> ::libc::c_int;
    pub fn chdir(__path: *const ::libc::c_char) -> ::libc::c_int;
    pub fn fchdir(__fd: ::libc::c_int) -> ::libc::c_int;
    pub fn getcwd(__buf: *mut ::libc::c_char, __size: size_t)
     -> *mut ::libc::c_char;
    pub fn getwd(__buf: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn dup(__fd: ::libc::c_int) -> ::libc::c_int;
    pub fn dup2(__fd: ::libc::c_int, __fd2: ::libc::c_int) -> ::libc::c_int;
    pub fn execve(__path: *const ::libc::c_char,
                  __argv: *const *mut ::libc::c_char,
                  __envp: *const *mut ::libc::c_char) -> ::libc::c_int;
    pub fn fexecve(__fd: ::libc::c_int, __argv: *const *mut ::libc::c_char,
                   __envp: *const *mut ::libc::c_char) -> ::libc::c_int;
    pub fn execv(__path: *const ::libc::c_char,
                 __argv: *const *mut ::libc::c_char) -> ::libc::c_int;
    pub fn execle(__path: *const ::libc::c_char,
                  __arg: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn execl(__path: *const ::libc::c_char,
                 __arg: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn execvp(__file: *const ::libc::c_char,
                  __argv: *const *mut ::libc::c_char) -> ::libc::c_int;
    pub fn execlp(__file: *const ::libc::c_char,
                  __arg: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn nice(__inc: ::libc::c_int) -> ::libc::c_int;
    pub fn _exit(__status: ::libc::c_int) -> ();
    pub fn pathconf(__path: *const ::libc::c_char, __name: ::libc::c_int)
     -> ::libc::c_long;
    pub fn fpathconf(__fd: ::libc::c_int, __name: ::libc::c_int)
     -> ::libc::c_long;
    pub fn sysconf(__name: ::libc::c_int) -> ::libc::c_long;
    pub fn confstr(__name: ::libc::c_int, __buf: *mut ::libc::c_char,
                   __len: size_t) -> size_t;
    pub fn getpid() -> __pid_t;
    pub fn getppid() -> __pid_t;
    pub fn getpgrp() -> __pid_t;
    pub fn __getpgid(__pid: __pid_t) -> __pid_t;
    pub fn getpgid(__pid: __pid_t) -> __pid_t;
    pub fn setpgid(__pid: __pid_t, __pgid: __pid_t) -> ::libc::c_int;
    pub fn setpgrp() -> ::libc::c_int;
    pub fn setsid() -> __pid_t;
    pub fn getsid(__pid: __pid_t) -> __pid_t;
    pub fn getuid() -> __uid_t;
    pub fn geteuid() -> __uid_t;
    pub fn getgid() -> __gid_t;
    pub fn getegid() -> __gid_t;
    pub fn getgroups(__size: ::libc::c_int, __list: *mut __gid_t)
     -> ::libc::c_int;
    pub fn setuid(__uid: __uid_t) -> ::libc::c_int;
    pub fn setreuid(__ruid: __uid_t, __euid: __uid_t) -> ::libc::c_int;
    pub fn seteuid(__uid: __uid_t) -> ::libc::c_int;
    pub fn setgid(__gid: __gid_t) -> ::libc::c_int;
    pub fn setregid(__rgid: __gid_t, __egid: __gid_t) -> ::libc::c_int;
    pub fn setegid(__gid: __gid_t) -> ::libc::c_int;
    pub fn fork() -> __pid_t;
    pub fn vfork() -> __pid_t;
    pub fn ttyname(__fd: ::libc::c_int) -> *mut ::libc::c_char;
    pub fn ttyname_r(__fd: ::libc::c_int, __buf: *mut ::libc::c_char,
                     __buflen: size_t) -> ::libc::c_int;
    pub fn isatty(__fd: ::libc::c_int) -> ::libc::c_int;
    pub fn ttyslot() -> ::libc::c_int;
    pub fn link(__from: *const ::libc::c_char, __to: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn linkat(__fromfd: ::libc::c_int, __from: *const ::libc::c_char,
                  __tofd: ::libc::c_int, __to: *const ::libc::c_char,
                  __flags: ::libc::c_int) -> ::libc::c_int;
    pub fn symlink(__from: *const ::libc::c_char, __to: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn readlink(__path: *const ::libc::c_char, __buf: *mut ::libc::c_char,
                    __len: size_t) -> ssize_t;
    pub fn symlinkat(__from: *const ::libc::c_char, __tofd: ::libc::c_int,
                     __to: *const ::libc::c_char) -> ::libc::c_int;
    pub fn readlinkat(__fd: ::libc::c_int, __path: *const ::libc::c_char,
                      __buf: *mut ::libc::c_char, __len: size_t) -> ssize_t;
    pub fn unlink(__name: *const ::libc::c_char) -> ::libc::c_int;
    pub fn unlinkat(__fd: ::libc::c_int, __name: *const ::libc::c_char,
                    __flag: ::libc::c_int) -> ::libc::c_int;
    pub fn rmdir(__path: *const ::libc::c_char) -> ::libc::c_int;
    pub fn tcgetpgrp(__fd: ::libc::c_int) -> __pid_t;
    pub fn tcsetpgrp(__fd: ::libc::c_int, __pgrp_id: __pid_t)
     -> ::libc::c_int;
    pub fn getlogin() -> *mut ::libc::c_char;
    pub fn getlogin_r(__name: *mut ::libc::c_char, __name_len: size_t)
     -> ::libc::c_int;
    pub fn setlogin(__name: *const ::libc::c_char) -> ::libc::c_int;
    pub fn getopt(___argc: ::libc::c_int, ___argv: *const *mut ::libc::c_char,
                  __shortopts: *const ::libc::c_char) -> ::libc::c_int;
    pub fn gethostname(__name: *mut ::libc::c_char, __len: size_t)
     -> ::libc::c_int;
    pub fn sethostname(__name: *const ::libc::c_char, __len: size_t)
     -> ::libc::c_int;
    pub fn sethostid(__id: ::libc::c_long) -> ::libc::c_int;
    pub fn getdomainname(__name: *mut ::libc::c_char, __len: size_t)
     -> ::libc::c_int;
    pub fn setdomainname(__name: *const ::libc::c_char, __len: size_t)
     -> ::libc::c_int;
    pub fn vhangup() -> ::libc::c_int;
    pub fn revoke(__file: *const ::libc::c_char) -> ::libc::c_int;
    pub fn profil(__sample_buffer: *mut ::libc::c_ushort, __size: size_t,
                  __offset: size_t, __scale: ::libc::c_uint) -> ::libc::c_int;
    pub fn acct(__name: *const ::libc::c_char) -> ::libc::c_int;
    pub fn getusershell() -> *mut ::libc::c_char;
    pub fn endusershell() -> ();
    pub fn setusershell() -> ();
    pub fn daemon(__nochdir: ::libc::c_int, __noclose: ::libc::c_int)
     -> ::libc::c_int;
    pub fn chroot(__path: *const ::libc::c_char) -> ::libc::c_int;
    pub fn getpass(__prompt: *const ::libc::c_char) -> *mut ::libc::c_char;
    pub fn fsync(__fd: ::libc::c_int) -> ::libc::c_int;
    pub fn gethostid() -> ::libc::c_long;
    pub fn sync() -> ();
    pub fn getpagesize() -> ::libc::c_int;
    pub fn getdtablesize() -> ::libc::c_int;
    pub fn truncate(__file: *const ::libc::c_char, __length: __off_t)
     -> ::libc::c_int;
    pub fn ftruncate(__fd: ::libc::c_int, __length: __off_t) -> ::libc::c_int;
    pub fn brk(__addr: *mut ::libc::c_void) -> ::libc::c_int;
    pub fn sbrk(__delta: intptr_t) -> *mut ::libc::c_void;
    pub fn syscall(__sysno: ::libc::c_long, ...) -> ::libc::c_long;
    pub fn lockf(__fd: ::libc::c_int, __cmd: ::libc::c_int, __len: __off_t)
     -> ::libc::c_int;
    pub fn fdatasync(__fildes: ::libc::c_int) -> ::libc::c_int;
    pub fn stat(__file: *const ::libc::c_char, __buf: *mut Struct_stat)
     -> ::libc::c_int;
    pub fn fstat(__fd: ::libc::c_int, __buf: *mut Struct_stat)
     -> ::libc::c_int;
    pub fn fstatat(__fd: ::libc::c_int, __file: *const ::libc::c_char,
                   __buf: *mut Struct_stat, __flag: ::libc::c_int)
     -> ::libc::c_int;
    pub fn lstat(__file: *const ::libc::c_char, __buf: *mut Struct_stat)
     -> ::libc::c_int;
    pub fn chmod(__file: *const ::libc::c_char, __mode: __mode_t)
     -> ::libc::c_int;
    pub fn lchmod(__file: *const ::libc::c_char, __mode: __mode_t)
     -> ::libc::c_int;
    pub fn fchmod(__fd: ::libc::c_int, __mode: __mode_t) -> ::libc::c_int;
    pub fn fchmodat(__fd: ::libc::c_int, __file: *const ::libc::c_char,
                    __mode: __mode_t, __flag: ::libc::c_int) -> ::libc::c_int;
    pub fn umask(__mask: __mode_t) -> __mode_t;
    pub fn mkdir(__path: *const ::libc::c_char, __mode: __mode_t)
     -> ::libc::c_int;
    pub fn mkdirat(__fd: ::libc::c_int, __path: *const ::libc::c_char,
                   __mode: __mode_t) -> ::libc::c_int;
    pub fn mknod(__path: *const ::libc::c_char, __mode: __mode_t,
                 __dev: __dev_t) -> ::libc::c_int;
    pub fn mknodat(__fd: ::libc::c_int, __path: *const ::libc::c_char,
                   __mode: __mode_t, __dev: __dev_t) -> ::libc::c_int;
    pub fn mkfifo(__path: *const ::libc::c_char, __mode: __mode_t)
     -> ::libc::c_int;
    pub fn mkfifoat(__fd: ::libc::c_int, __path: *const ::libc::c_char,
                    __mode: __mode_t) -> ::libc::c_int;
    pub fn utimensat(__fd: ::libc::c_int, __path: *const ::libc::c_char,
                     __times: *mut Struct_timespec, __flags: ::libc::c_int)
     -> ::libc::c_int;
    pub fn futimens(__fd: ::libc::c_int, __times: *mut Struct_timespec)
     -> ::libc::c_int;
    pub fn __fxstat(__ver: ::libc::c_int, __fildes: ::libc::c_int,
                    __stat_buf: *mut Struct_stat) -> ::libc::c_int;
    pub fn __xstat(__ver: ::libc::c_int, __filename: *const ::libc::c_char,
                   __stat_buf: *mut Struct_stat) -> ::libc::c_int;
    pub fn __lxstat(__ver: ::libc::c_int, __filename: *const ::libc::c_char,
                    __stat_buf: *mut Struct_stat) -> ::libc::c_int;
    pub fn __fxstatat(__ver: ::libc::c_int, __fildes: ::libc::c_int,
                      __filename: *const ::libc::c_char,
                      __stat_buf: *mut Struct_stat, __flag: ::libc::c_int)
     -> ::libc::c_int;
    pub fn __xmknod(__ver: ::libc::c_int, __path: *const ::libc::c_char,
                    __mode: __mode_t, __dev: *mut __dev_t) -> ::libc::c_int;
    pub fn __xmknodat(__ver: ::libc::c_int, __fd: ::libc::c_int,
                      __path: *const ::libc::c_char, __mode: __mode_t,
                      __dev: *mut __dev_t) -> ::libc::c_int;
    pub fn opendir(__name: *const ::libc::c_char) -> *mut DIR;
    pub fn fdopendir(__fd: ::libc::c_int) -> *mut DIR;
    pub fn closedir(__dirp: *mut DIR) -> ::libc::c_int;
    pub fn readdir(__dirp: *mut DIR) -> *mut Struct_dirent;
    pub fn readdir_r(__dirp: *mut DIR, __entry: *mut Struct_dirent,
                     __result: *mut *mut Struct_dirent) -> ::libc::c_int;
    pub fn rewinddir(__dirp: *mut DIR) -> ();
    pub fn seekdir(__dirp: *mut DIR, __pos: ::libc::c_long) -> ();
    pub fn telldir(__dirp: *mut DIR) -> ::libc::c_long;
    pub fn dirfd(__dirp: *mut DIR) -> ::libc::c_int;
    pub fn scandir(__dir: *const ::libc::c_char,
                   __namelist: *mut *mut *mut Struct_dirent,
                   __selector:
                       ::std::option::Option<extern "C" fn
                                                 (arg1: *const Struct_dirent)
                                                 -> ::libc::c_int>,
                   __cmp:
                       ::std::option::Option<extern "C" fn
                                                 (arg1:
                                                      *mut *const Struct_dirent,
                                                  arg2:
                                                      *mut *const Struct_dirent)
                                                 -> ::libc::c_int>)
     -> ::libc::c_int;
    pub fn alphasort(__e1: *mut *const Struct_dirent,
                     __e2: *mut *const Struct_dirent) -> ::libc::c_int;
    pub fn getdirentries(__fd: ::libc::c_int, __buf: *mut ::libc::c_char,
                         __nbytes: size_t, __basep: *mut __off_t)
     -> __ssize_t;
    pub fn fcntl(__fd: ::libc::c_int, __cmd: ::libc::c_int, ...)
     -> ::libc::c_int;
    pub fn open(__file: *const ::libc::c_char, __oflag: ::libc::c_int, ...)
     -> ::libc::c_int;
    pub fn openat(__fd: ::libc::c_int, __file: *const ::libc::c_char,
                  __oflag: ::libc::c_int, ...) -> ::libc::c_int;
    pub fn creat(__file: *const ::libc::c_char, __mode: mode_t)
     -> ::libc::c_int;
    pub fn posix_fadvise(__fd: ::libc::c_int, __offset: off_t, __len: off_t,
                         __advise: ::libc::c_int) -> ::libc::c_int;
    pub fn posix_fallocate(__fd: ::libc::c_int, __offset: off_t, __len: off_t)
     -> ::libc::c_int;
    pub fn acos(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __acos(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn asin(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __asin(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn atan(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __atan(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn atan2(__y: ::libc::c_double, __x: ::libc::c_double)
     -> ::libc::c_double;
    pub fn __atan2(__y: ::libc::c_double, __x: ::libc::c_double)
     -> ::libc::c_double;
    pub fn cos(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __cos(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn sin(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __sin(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn tan(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __tan(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn cosh(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __cosh(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn sinh(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __sinh(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn tanh(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __tanh(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn acosh(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __acosh(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn asinh(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __asinh(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn atanh(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __atanh(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn exp(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __exp(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn frexp(__x: ::libc::c_double, __exponent: *mut ::libc::c_int)
     -> ::libc::c_double;
    pub fn __frexp(__x: ::libc::c_double, __exponent: *mut ::libc::c_int)
     -> ::libc::c_double;
    pub fn ldexp(__x: ::libc::c_double, __exponent: ::libc::c_int)
     -> ::libc::c_double;
    pub fn __ldexp(__x: ::libc::c_double, __exponent: ::libc::c_int)
     -> ::libc::c_double;
    pub fn log(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __log(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn log10(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __log10(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn modf(__x: ::libc::c_double, __iptr: *mut ::libc::c_double)
     -> ::libc::c_double;
    pub fn __modf(__x: ::libc::c_double, __iptr: *mut ::libc::c_double)
     -> ::libc::c_double;
    pub fn expm1(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __expm1(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn log1p(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __log1p(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn logb(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __logb(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn exp2(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __exp2(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn log2(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __log2(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn pow(__x: ::libc::c_double, __y: ::libc::c_double)
     -> ::libc::c_double;
    pub fn __pow(__x: ::libc::c_double, __y: ::libc::c_double)
     -> ::libc::c_double;
    pub fn sqrt(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __sqrt(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn hypot(__x: ::libc::c_double, __y: ::libc::c_double)
     -> ::libc::c_double;
    pub fn __hypot(__x: ::libc::c_double, __y: ::libc::c_double)
     -> ::libc::c_double;
    pub fn cbrt(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __cbrt(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn ceil(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __ceil(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn fabs(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __fabs(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn floor(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __floor(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn fmod(__x: ::libc::c_double, __y: ::libc::c_double)
     -> ::libc::c_double;
    pub fn __fmod(__x: ::libc::c_double, __y: ::libc::c_double)
     -> ::libc::c_double;
    pub fn __isinf(__value: ::libc::c_double) -> ::libc::c_int;
    pub fn __finite(__value: ::libc::c_double) -> ::libc::c_int;
    pub fn isinf(__value: ::libc::c_double) -> ::libc::c_int;
    pub fn finite(__value: ::libc::c_double) -> ::libc::c_int;
    pub fn drem(__x: ::libc::c_double, __y: ::libc::c_double)
     -> ::libc::c_double;
    pub fn __drem(__x: ::libc::c_double, __y: ::libc::c_double)
     -> ::libc::c_double;
    pub fn significand(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __significand(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn copysign(__x: ::libc::c_double, __y: ::libc::c_double)
     -> ::libc::c_double;
    pub fn __copysign(__x: ::libc::c_double, __y: ::libc::c_double)
     -> ::libc::c_double;
    pub fn nan(__tagb: *const ::libc::c_char) -> ::libc::c_double;
    pub fn __nan(__tagb: *const ::libc::c_char) -> ::libc::c_double;
    pub fn __isnan(__value: ::libc::c_double) -> ::libc::c_int;
    pub fn isnan(__value: ::libc::c_double) -> ::libc::c_int;
    pub fn j0(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn __j0(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn j1(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn __j1(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn jn(arg1: ::libc::c_int, arg2: ::libc::c_double)
     -> ::libc::c_double;
    pub fn __jn(arg1: ::libc::c_int, arg2: ::libc::c_double)
     -> ::libc::c_double;
    pub fn y0(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn __y0(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn y1(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn __y1(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn yn(arg1: ::libc::c_int, arg2: ::libc::c_double)
     -> ::libc::c_double;
    pub fn __yn(arg1: ::libc::c_int, arg2: ::libc::c_double)
     -> ::libc::c_double;
    pub fn erf(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn __erf(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn erfc(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn __erfc(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn lgamma(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn __lgamma(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn tgamma(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn __tgamma(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn gamma(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn __gamma(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn lgamma_r(arg1: ::libc::c_double, __signgamp: *mut ::libc::c_int)
     -> ::libc::c_double;
    pub fn __lgamma_r(arg1: ::libc::c_double, __signgamp: *mut ::libc::c_int)
     -> ::libc::c_double;
    pub fn rint(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __rint(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn nextafter(__x: ::libc::c_double, __y: ::libc::c_double)
     -> ::libc::c_double;
    pub fn __nextafter(__x: ::libc::c_double, __y: ::libc::c_double)
     -> ::libc::c_double;
    pub fn nexttoward(__x: ::libc::c_double, __y: ::libc::c_double)
     -> ::libc::c_double;
    pub fn __nexttoward(__x: ::libc::c_double, __y: ::libc::c_double)
     -> ::libc::c_double;
    pub fn remainder(__x: ::libc::c_double, __y: ::libc::c_double)
     -> ::libc::c_double;
    pub fn __remainder(__x: ::libc::c_double, __y: ::libc::c_double)
     -> ::libc::c_double;
    pub fn scalbn(__x: ::libc::c_double, __n: ::libc::c_int)
     -> ::libc::c_double;
    pub fn __scalbn(__x: ::libc::c_double, __n: ::libc::c_int)
     -> ::libc::c_double;
    pub fn ilogb(__x: ::libc::c_double) -> ::libc::c_int;
    pub fn __ilogb(__x: ::libc::c_double) -> ::libc::c_int;
    pub fn scalbln(__x: ::libc::c_double, __n: ::libc::c_long)
     -> ::libc::c_double;
    pub fn __scalbln(__x: ::libc::c_double, __n: ::libc::c_long)
     -> ::libc::c_double;
    pub fn nearbyint(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __nearbyint(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn round(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __round(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn trunc(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __trunc(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn remquo(__x: ::libc::c_double, __y: ::libc::c_double,
                  __quo: *mut ::libc::c_int) -> ::libc::c_double;
    pub fn __remquo(__x: ::libc::c_double, __y: ::libc::c_double,
                    __quo: *mut ::libc::c_int) -> ::libc::c_double;
    pub fn lrint(__x: ::libc::c_double) -> ::libc::c_long;
    pub fn __lrint(__x: ::libc::c_double) -> ::libc::c_long;
    pub fn llrint(__x: ::libc::c_double) -> ::libc::c_longlong;
    pub fn __llrint(__x: ::libc::c_double) -> ::libc::c_longlong;
    pub fn lround(__x: ::libc::c_double) -> ::libc::c_long;
    pub fn __lround(__x: ::libc::c_double) -> ::libc::c_long;
    pub fn llround(__x: ::libc::c_double) -> ::libc::c_longlong;
    pub fn __llround(__x: ::libc::c_double) -> ::libc::c_longlong;
    pub fn fdim(__x: ::libc::c_double, __y: ::libc::c_double)
     -> ::libc::c_double;
    pub fn __fdim(__x: ::libc::c_double, __y: ::libc::c_double)
     -> ::libc::c_double;
    pub fn fmax(__x: ::libc::c_double, __y: ::libc::c_double)
     -> ::libc::c_double;
    pub fn __fmax(__x: ::libc::c_double, __y: ::libc::c_double)
     -> ::libc::c_double;
    pub fn fmin(__x: ::libc::c_double, __y: ::libc::c_double)
     -> ::libc::c_double;
    pub fn __fmin(__x: ::libc::c_double, __y: ::libc::c_double)
     -> ::libc::c_double;
    pub fn __fpclassify(__value: ::libc::c_double) -> ::libc::c_int;
    pub fn __signbit(__value: ::libc::c_double) -> ::libc::c_int;
    pub fn fma(__x: ::libc::c_double, __y: ::libc::c_double,
               __z: ::libc::c_double) -> ::libc::c_double;
    pub fn __fma(__x: ::libc::c_double, __y: ::libc::c_double,
                 __z: ::libc::c_double) -> ::libc::c_double;
    pub fn scalb(__x: ::libc::c_double, __n: ::libc::c_double)
     -> ::libc::c_double;
    pub fn __scalb(__x: ::libc::c_double, __n: ::libc::c_double)
     -> ::libc::c_double;
    pub fn acosf(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn __acosf(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn asinf(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn __asinf(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn atanf(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn __atanf(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn atan2f(__y: ::libc::c_float, __x: ::libc::c_float)
     -> ::libc::c_float;
    pub fn __atan2f(__y: ::libc::c_float, __x: ::libc::c_float)
     -> ::libc::c_float;
    pub fn cosf(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn __cosf(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn sinf(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn __sinf(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn tanf(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn __tanf(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn coshf(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn __coshf(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn sinhf(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn __sinhf(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn tanhf(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn __tanhf(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn acoshf(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn __acoshf(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn asinhf(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn __asinhf(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn atanhf(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn __atanhf(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn expf(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn __expf(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn frexpf(__x: ::libc::c_float, __exponent: *mut ::libc::c_int)
     -> ::libc::c_float;
    pub fn __frexpf(__x: ::libc::c_float, __exponent: *mut ::libc::c_int)
     -> ::libc::c_float;
    pub fn ldexpf(__x: ::libc::c_float, __exponent: ::libc::c_int)
     -> ::libc::c_float;
    pub fn __ldexpf(__x: ::libc::c_float, __exponent: ::libc::c_int)
     -> ::libc::c_float;
    pub fn logf(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn __logf(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn log10f(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn __log10f(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn modff(__x: ::libc::c_float, __iptr: *mut ::libc::c_float)
     -> ::libc::c_float;
    pub fn __modff(__x: ::libc::c_float, __iptr: *mut ::libc::c_float)
     -> ::libc::c_float;
    pub fn expm1f(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn __expm1f(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn log1pf(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn __log1pf(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn logbf(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn __logbf(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn exp2f(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn __exp2f(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn log2f(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn __log2f(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn powf(__x: ::libc::c_float, __y: ::libc::c_float)
     -> ::libc::c_float;
    pub fn __powf(__x: ::libc::c_float, __y: ::libc::c_float)
     -> ::libc::c_float;
    pub fn sqrtf(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn __sqrtf(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn hypotf(__x: ::libc::c_float, __y: ::libc::c_float)
     -> ::libc::c_float;
    pub fn __hypotf(__x: ::libc::c_float, __y: ::libc::c_float)
     -> ::libc::c_float;
    pub fn cbrtf(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn __cbrtf(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn ceilf(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn __ceilf(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn fabsf(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn __fabsf(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn floorf(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn __floorf(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn fmodf(__x: ::libc::c_float, __y: ::libc::c_float)
     -> ::libc::c_float;
    pub fn __fmodf(__x: ::libc::c_float, __y: ::libc::c_float)
     -> ::libc::c_float;
    pub fn __isinff(__value: ::libc::c_float) -> ::libc::c_int;
    pub fn __finitef(__value: ::libc::c_float) -> ::libc::c_int;
    pub fn isinff(__value: ::libc::c_float) -> ::libc::c_int;
    pub fn finitef(__value: ::libc::c_float) -> ::libc::c_int;
    pub fn dremf(__x: ::libc::c_float, __y: ::libc::c_float)
     -> ::libc::c_float;
    pub fn __dremf(__x: ::libc::c_float, __y: ::libc::c_float)
     -> ::libc::c_float;
    pub fn significandf(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn __significandf(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn copysignf(__x: ::libc::c_float, __y: ::libc::c_float)
     -> ::libc::c_float;
    pub fn __copysignf(__x: ::libc::c_float, __y: ::libc::c_float)
     -> ::libc::c_float;
    pub fn nanf(__tagb: *const ::libc::c_char) -> ::libc::c_float;
    pub fn __nanf(__tagb: *const ::libc::c_char) -> ::libc::c_float;
    pub fn __isnanf(__value: ::libc::c_float) -> ::libc::c_int;
    pub fn isnanf(__value: ::libc::c_float) -> ::libc::c_int;
    pub fn j0f(arg1: ::libc::c_float) -> ::libc::c_float;
    pub fn __j0f(arg1: ::libc::c_float) -> ::libc::c_float;
    pub fn j1f(arg1: ::libc::c_float) -> ::libc::c_float;
    pub fn __j1f(arg1: ::libc::c_float) -> ::libc::c_float;
    pub fn jnf(arg1: ::libc::c_int, arg2: ::libc::c_float) -> ::libc::c_float;
    pub fn __jnf(arg1: ::libc::c_int, arg2: ::libc::c_float)
     -> ::libc::c_float;
    pub fn y0f(arg1: ::libc::c_float) -> ::libc::c_float;
    pub fn __y0f(arg1: ::libc::c_float) -> ::libc::c_float;
    pub fn y1f(arg1: ::libc::c_float) -> ::libc::c_float;
    pub fn __y1f(arg1: ::libc::c_float) -> ::libc::c_float;
    pub fn ynf(arg1: ::libc::c_int, arg2: ::libc::c_float) -> ::libc::c_float;
    pub fn __ynf(arg1: ::libc::c_int, arg2: ::libc::c_float)
     -> ::libc::c_float;
    pub fn erff(arg1: ::libc::c_float) -> ::libc::c_float;
    pub fn __erff(arg1: ::libc::c_float) -> ::libc::c_float;
    pub fn erfcf(arg1: ::libc::c_float) -> ::libc::c_float;
    pub fn __erfcf(arg1: ::libc::c_float) -> ::libc::c_float;
    pub fn lgammaf(arg1: ::libc::c_float) -> ::libc::c_float;
    pub fn __lgammaf(arg1: ::libc::c_float) -> ::libc::c_float;
    pub fn tgammaf(arg1: ::libc::c_float) -> ::libc::c_float;
    pub fn __tgammaf(arg1: ::libc::c_float) -> ::libc::c_float;
    pub fn gammaf(arg1: ::libc::c_float) -> ::libc::c_float;
    pub fn __gammaf(arg1: ::libc::c_float) -> ::libc::c_float;
    pub fn lgammaf_r(arg1: ::libc::c_float, __signgamp: *mut ::libc::c_int)
     -> ::libc::c_float;
    pub fn __lgammaf_r(arg1: ::libc::c_float, __signgamp: *mut ::libc::c_int)
     -> ::libc::c_float;
    pub fn rintf(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn __rintf(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn nextafterf(__x: ::libc::c_float, __y: ::libc::c_float)
     -> ::libc::c_float;
    pub fn __nextafterf(__x: ::libc::c_float, __y: ::libc::c_float)
     -> ::libc::c_float;
    pub fn nexttowardf(__x: ::libc::c_float, __y: ::libc::c_double)
     -> ::libc::c_float;
    pub fn __nexttowardf(__x: ::libc::c_float, __y: ::libc::c_double)
     -> ::libc::c_float;
    pub fn remainderf(__x: ::libc::c_float, __y: ::libc::c_float)
     -> ::libc::c_float;
    pub fn __remainderf(__x: ::libc::c_float, __y: ::libc::c_float)
     -> ::libc::c_float;
    pub fn scalbnf(__x: ::libc::c_float, __n: ::libc::c_int)
     -> ::libc::c_float;
    pub fn __scalbnf(__x: ::libc::c_float, __n: ::libc::c_int)
     -> ::libc::c_float;
    pub fn ilogbf(__x: ::libc::c_float) -> ::libc::c_int;
    pub fn __ilogbf(__x: ::libc::c_float) -> ::libc::c_int;
    pub fn scalblnf(__x: ::libc::c_float, __n: ::libc::c_long)
     -> ::libc::c_float;
    pub fn __scalblnf(__x: ::libc::c_float, __n: ::libc::c_long)
     -> ::libc::c_float;
    pub fn nearbyintf(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn __nearbyintf(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn roundf(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn __roundf(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn truncf(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn __truncf(__x: ::libc::c_float) -> ::libc::c_float;
    pub fn remquof(__x: ::libc::c_float, __y: ::libc::c_float,
                   __quo: *mut ::libc::c_int) -> ::libc::c_float;
    pub fn __remquof(__x: ::libc::c_float, __y: ::libc::c_float,
                     __quo: *mut ::libc::c_int) -> ::libc::c_float;
    pub fn lrintf(__x: ::libc::c_float) -> ::libc::c_long;
    pub fn __lrintf(__x: ::libc::c_float) -> ::libc::c_long;
    pub fn llrintf(__x: ::libc::c_float) -> ::libc::c_longlong;
    pub fn __llrintf(__x: ::libc::c_float) -> ::libc::c_longlong;
    pub fn lroundf(__x: ::libc::c_float) -> ::libc::c_long;
    pub fn __lroundf(__x: ::libc::c_float) -> ::libc::c_long;
    pub fn llroundf(__x: ::libc::c_float) -> ::libc::c_longlong;
    pub fn __llroundf(__x: ::libc::c_float) -> ::libc::c_longlong;
    pub fn fdimf(__x: ::libc::c_float, __y: ::libc::c_float)
     -> ::libc::c_float;
    pub fn __fdimf(__x: ::libc::c_float, __y: ::libc::c_float)
     -> ::libc::c_float;
    pub fn fmaxf(__x: ::libc::c_float, __y: ::libc::c_float)
     -> ::libc::c_float;
    pub fn __fmaxf(__x: ::libc::c_float, __y: ::libc::c_float)
     -> ::libc::c_float;
    pub fn fminf(__x: ::libc::c_float, __y: ::libc::c_float)
     -> ::libc::c_float;
    pub fn __fminf(__x: ::libc::c_float, __y: ::libc::c_float)
     -> ::libc::c_float;
    pub fn __fpclassifyf(__value: ::libc::c_float) -> ::libc::c_int;
    pub fn __signbitf(__value: ::libc::c_float) -> ::libc::c_int;
    pub fn fmaf(__x: ::libc::c_float, __y: ::libc::c_float,
                __z: ::libc::c_float) -> ::libc::c_float;
    pub fn __fmaf(__x: ::libc::c_float, __y: ::libc::c_float,
                  __z: ::libc::c_float) -> ::libc::c_float;
    pub fn scalbf(__x: ::libc::c_float, __n: ::libc::c_float)
     -> ::libc::c_float;
    pub fn __scalbf(__x: ::libc::c_float, __n: ::libc::c_float)
     -> ::libc::c_float;
    pub fn acosl(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __acosl(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn asinl(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __asinl(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn atanl(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __atanl(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn atan2l(__y: ::libc::c_double, __x: ::libc::c_double)
     -> ::libc::c_double;
    pub fn __atan2l(__y: ::libc::c_double, __x: ::libc::c_double)
     -> ::libc::c_double;
    pub fn cosl(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __cosl(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn sinl(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __sinl(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn tanl(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __tanl(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn coshl(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __coshl(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn sinhl(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __sinhl(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn tanhl(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __tanhl(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn acoshl(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __acoshl(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn asinhl(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __asinhl(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn atanhl(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __atanhl(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn expl(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __expl(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn frexpl(__x: ::libc::c_double, __exponent: *mut ::libc::c_int)
     -> ::libc::c_double;
    pub fn __frexpl(__x: ::libc::c_double, __exponent: *mut ::libc::c_int)
     -> ::libc::c_double;
    pub fn ldexpl(__x: ::libc::c_double, __exponent: ::libc::c_int)
     -> ::libc::c_double;
    pub fn __ldexpl(__x: ::libc::c_double, __exponent: ::libc::c_int)
     -> ::libc::c_double;
    pub fn logl(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __logl(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn log10l(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __log10l(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn modfl(__x: ::libc::c_double, __iptr: *mut ::libc::c_double)
     -> ::libc::c_double;
    pub fn __modfl(__x: ::libc::c_double, __iptr: *mut ::libc::c_double)
     -> ::libc::c_double;
    pub fn expm1l(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __expm1l(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn log1pl(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __log1pl(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn logbl(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __logbl(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn exp2l(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __exp2l(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn log2l(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __log2l(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn powl(__x: ::libc::c_double, __y: ::libc::c_double)
     -> ::libc::c_double;
    pub fn __powl(__x: ::libc::c_double, __y: ::libc::c_double)
     -> ::libc::c_double;
    pub fn sqrtl(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __sqrtl(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn hypotl(__x: ::libc::c_double, __y: ::libc::c_double)
     -> ::libc::c_double;
    pub fn __hypotl(__x: ::libc::c_double, __y: ::libc::c_double)
     -> ::libc::c_double;
    pub fn cbrtl(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __cbrtl(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn ceill(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __ceill(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn fabsl(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __fabsl(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn floorl(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __floorl(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn fmodl(__x: ::libc::c_double, __y: ::libc::c_double)
     -> ::libc::c_double;
    pub fn __fmodl(__x: ::libc::c_double, __y: ::libc::c_double)
     -> ::libc::c_double;
    pub fn __isinfl(__value: ::libc::c_double) -> ::libc::c_int;
    pub fn __finitel(__value: ::libc::c_double) -> ::libc::c_int;
    pub fn isinfl(__value: ::libc::c_double) -> ::libc::c_int;
    pub fn finitel(__value: ::libc::c_double) -> ::libc::c_int;
    pub fn dreml(__x: ::libc::c_double, __y: ::libc::c_double)
     -> ::libc::c_double;
    pub fn __dreml(__x: ::libc::c_double, __y: ::libc::c_double)
     -> ::libc::c_double;
    pub fn significandl(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __significandl(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn copysignl(__x: ::libc::c_double, __y: ::libc::c_double)
     -> ::libc::c_double;
    pub fn __copysignl(__x: ::libc::c_double, __y: ::libc::c_double)
     -> ::libc::c_double;
    pub fn nanl(__tagb: *const ::libc::c_char) -> ::libc::c_double;
    pub fn __nanl(__tagb: *const ::libc::c_char) -> ::libc::c_double;
    pub fn __isnanl(__value: ::libc::c_double) -> ::libc::c_int;
    pub fn isnanl(__value: ::libc::c_double) -> ::libc::c_int;
    pub fn j0l(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn __j0l(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn j1l(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn __j1l(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn jnl(arg1: ::libc::c_int, arg2: ::libc::c_double)
     -> ::libc::c_double;
    pub fn __jnl(arg1: ::libc::c_int, arg2: ::libc::c_double)
     -> ::libc::c_double;
    pub fn y0l(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn __y0l(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn y1l(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn __y1l(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn ynl(arg1: ::libc::c_int, arg2: ::libc::c_double)
     -> ::libc::c_double;
    pub fn __ynl(arg1: ::libc::c_int, arg2: ::libc::c_double)
     -> ::libc::c_double;
    pub fn erfl(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn __erfl(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn erfcl(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn __erfcl(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn lgammal(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn __lgammal(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn tgammal(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn __tgammal(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn gammal(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn __gammal(arg1: ::libc::c_double) -> ::libc::c_double;
    pub fn lgammal_r(arg1: ::libc::c_double, __signgamp: *mut ::libc::c_int)
     -> ::libc::c_double;
    pub fn __lgammal_r(arg1: ::libc::c_double, __signgamp: *mut ::libc::c_int)
     -> ::libc::c_double;
    pub fn rintl(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __rintl(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn nextafterl(__x: ::libc::c_double, __y: ::libc::c_double)
     -> ::libc::c_double;
    pub fn __nextafterl(__x: ::libc::c_double, __y: ::libc::c_double)
     -> ::libc::c_double;
    pub fn nexttowardl(__x: ::libc::c_double, __y: ::libc::c_double)
     -> ::libc::c_double;
    pub fn __nexttowardl(__x: ::libc::c_double, __y: ::libc::c_double)
     -> ::libc::c_double;
    pub fn remainderl(__x: ::libc::c_double, __y: ::libc::c_double)
     -> ::libc::c_double;
    pub fn __remainderl(__x: ::libc::c_double, __y: ::libc::c_double)
     -> ::libc::c_double;
    pub fn scalbnl(__x: ::libc::c_double, __n: ::libc::c_int)
     -> ::libc::c_double;
    pub fn __scalbnl(__x: ::libc::c_double, __n: ::libc::c_int)
     -> ::libc::c_double;
    pub fn ilogbl(__x: ::libc::c_double) -> ::libc::c_int;
    pub fn __ilogbl(__x: ::libc::c_double) -> ::libc::c_int;
    pub fn scalblnl(__x: ::libc::c_double, __n: ::libc::c_long)
     -> ::libc::c_double;
    pub fn __scalblnl(__x: ::libc::c_double, __n: ::libc::c_long)
     -> ::libc::c_double;
    pub fn nearbyintl(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __nearbyintl(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn roundl(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __roundl(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn truncl(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn __truncl(__x: ::libc::c_double) -> ::libc::c_double;
    pub fn remquol(__x: ::libc::c_double, __y: ::libc::c_double,
                   __quo: *mut ::libc::c_int) -> ::libc::c_double;
    pub fn __remquol(__x: ::libc::c_double, __y: ::libc::c_double,
                     __quo: *mut ::libc::c_int) -> ::libc::c_double;
    pub fn lrintl(__x: ::libc::c_double) -> ::libc::c_long;
    pub fn __lrintl(__x: ::libc::c_double) -> ::libc::c_long;
    pub fn llrintl(__x: ::libc::c_double) -> ::libc::c_longlong;
    pub fn __llrintl(__x: ::libc::c_double) -> ::libc::c_longlong;
    pub fn lroundl(__x: ::libc::c_double) -> ::libc::c_long;
    pub fn __lroundl(__x: ::libc::c_double) -> ::libc::c_long;
    pub fn llroundl(__x: ::libc::c_double) -> ::libc::c_longlong;
    pub fn __llroundl(__x: ::libc::c_double) -> ::libc::c_longlong;
    pub fn fdiml(__x: ::libc::c_double, __y: ::libc::c_double)
     -> ::libc::c_double;
    pub fn __fdiml(__x: ::libc::c_double, __y: ::libc::c_double)
     -> ::libc::c_double;
    pub fn fmaxl(__x: ::libc::c_double, __y: ::libc::c_double)
     -> ::libc::c_double;
    pub fn __fmaxl(__x: ::libc::c_double, __y: ::libc::c_double)
     -> ::libc::c_double;
    pub fn fminl(__x: ::libc::c_double, __y: ::libc::c_double)
     -> ::libc::c_double;
    pub fn __fminl(__x: ::libc::c_double, __y: ::libc::c_double)
     -> ::libc::c_double;
    pub fn __fpclassifyl(__value: ::libc::c_double) -> ::libc::c_int;
    pub fn __signbitl(__value: ::libc::c_double) -> ::libc::c_int;
    pub fn fmal(__x: ::libc::c_double, __y: ::libc::c_double,
                __z: ::libc::c_double) -> ::libc::c_double;
    pub fn __fmal(__x: ::libc::c_double, __y: ::libc::c_double,
                  __z: ::libc::c_double) -> ::libc::c_double;
    pub fn scalbl(__x: ::libc::c_double, __n: ::libc::c_double)
     -> ::libc::c_double;
    pub fn __scalbl(__x: ::libc::c_double, __n: ::libc::c_double)
     -> ::libc::c_double;
    pub fn matherr(__exc: *mut Struct_exception) -> ::libc::c_int;
    pub fn clock() -> clock_t;
    pub fn time(__timer: *mut time_t) -> time_t;
    pub fn difftime(__time1: time_t, __time0: time_t) -> ::libc::c_double;
    pub fn mktime(__tp: *mut Struct_tm) -> time_t;
    pub fn strftime(__s: *mut ::libc::c_char, __maxsize: size_t,
                    __format: *const ::libc::c_char, __tp: *const Struct_tm)
     -> size_t;
    pub fn strftime_l(__s: *mut ::libc::c_char, __maxsize: size_t,
                      __format: *const ::libc::c_char, __tp: *const Struct_tm,
                      __loc: __locale_t) -> size_t;
    pub fn gmtime(__timer: *const time_t) -> *mut Struct_tm;
    pub fn localtime(__timer: *const time_t) -> *mut Struct_tm;
    pub fn gmtime_r(__timer: *const time_t, __tp: *mut Struct_tm)
     -> *mut Struct_tm;
    pub fn localtime_r(__timer: *const time_t, __tp: *mut Struct_tm)
     -> *mut Struct_tm;
    pub fn asctime(__tp: *const Struct_tm) -> *mut ::libc::c_char;
    pub fn ctime(__timer: *const time_t) -> *mut ::libc::c_char;
    pub fn asctime_r(__tp: *const Struct_tm, __buf: *mut ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn ctime_r(__timer: *const time_t, __buf: *mut ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn tzset() -> ();
    pub fn stime(__when: *const time_t) -> ::libc::c_int;
    pub fn timegm(__tp: *mut Struct_tm) -> time_t;
    pub fn timelocal(__tp: *mut Struct_tm) -> time_t;
    pub fn dysize(__year: ::libc::c_int) -> ::libc::c_int;
    pub fn nanosleep(__requested_time: *const Struct_timespec,
                     __remaining: *mut Struct_timespec) -> ::libc::c_int;
    pub fn clock_getres(__clock_id: clockid_t, __res: *mut Struct_timespec)
     -> ::libc::c_int;
    pub fn clock_gettime(__clock_id: clockid_t, __tp: *mut Struct_timespec)
     -> ::libc::c_int;
    pub fn clock_settime(__clock_id: clockid_t, __tp: *const Struct_timespec)
     -> ::libc::c_int;
    pub fn clock_nanosleep(__clock_id: clockid_t, __flags: ::libc::c_int,
                           __req: *const Struct_timespec,
                           __rem: *mut Struct_timespec) -> ::libc::c_int;
    pub fn clock_getcpuclockid(__pid: pid_t, __clock_id: *mut clockid_t)
     -> ::libc::c_int;
    pub fn timer_create(__clock_id: clockid_t, __evp: *mut Struct_sigevent,
                        __timerid: *mut timer_t) -> ::libc::c_int;
    pub fn timer_delete(__timerid: timer_t) -> ::libc::c_int;
    pub fn timer_settime(__timerid: timer_t, __flags: ::libc::c_int,
                         __value: *const Struct_itimerspec,
                         __ovalue: *mut Struct_itimerspec) -> ::libc::c_int;
    pub fn timer_gettime(__timerid: timer_t, __value: *mut Struct_itimerspec)
     -> ::libc::c_int;
    pub fn timer_getoverrun(__timerid: timer_t) -> ::libc::c_int;
    pub fn __ctype_b_loc() -> *mut *const ::libc::c_ushort;
    pub fn __ctype_tolower_loc() -> *mut *const __int32_t;
    pub fn __ctype_toupper_loc() -> *mut *const __int32_t;
    pub fn isalnum(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn isalpha(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn iscntrl(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn isdigit(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn islower(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn isgraph(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn isprint(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn ispunct(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn isspace(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn isupper(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn isxdigit(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn tolower(__c: ::libc::c_int) -> ::libc::c_int;
    pub fn toupper(__c: ::libc::c_int) -> ::libc::c_int;
    pub fn isblank(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn isascii(__c: ::libc::c_int) -> ::libc::c_int;
    pub fn toascii(__c: ::libc::c_int) -> ::libc::c_int;
    pub fn _toupper(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn _tolower(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn isalnum_l(arg1: ::libc::c_int, arg2: __locale_t) -> ::libc::c_int;
    pub fn isalpha_l(arg1: ::libc::c_int, arg2: __locale_t) -> ::libc::c_int;
    pub fn iscntrl_l(arg1: ::libc::c_int, arg2: __locale_t) -> ::libc::c_int;
    pub fn isdigit_l(arg1: ::libc::c_int, arg2: __locale_t) -> ::libc::c_int;
    pub fn islower_l(arg1: ::libc::c_int, arg2: __locale_t) -> ::libc::c_int;
    pub fn isgraph_l(arg1: ::libc::c_int, arg2: __locale_t) -> ::libc::c_int;
    pub fn isprint_l(arg1: ::libc::c_int, arg2: __locale_t) -> ::libc::c_int;
    pub fn ispunct_l(arg1: ::libc::c_int, arg2: __locale_t) -> ::libc::c_int;
    pub fn isspace_l(arg1: ::libc::c_int, arg2: __locale_t) -> ::libc::c_int;
    pub fn isupper_l(arg1: ::libc::c_int, arg2: __locale_t) -> ::libc::c_int;
    pub fn isxdigit_l(arg1: ::libc::c_int, arg2: __locale_t) -> ::libc::c_int;
    pub fn isblank_l(arg1: ::libc::c_int, arg2: __locale_t) -> ::libc::c_int;
    pub fn __tolower_l(__c: ::libc::c_int, __l: __locale_t) -> ::libc::c_int;
    pub fn tolower_l(__c: ::libc::c_int, __l: __locale_t) -> ::libc::c_int;
    pub fn __toupper_l(__c: ::libc::c_int, __l: __locale_t) -> ::libc::c_int;
    pub fn toupper_l(__c: ::libc::c_int, __l: __locale_t) -> ::libc::c_int;
    pub fn _win_insque(__elem: *mut ::libc::c_void,
                       __prev: *mut ::libc::c_void) -> ();
    pub fn _win_remque(__elem: *mut ::libc::c_void) -> ();
    pub fn _win_hsearch(__item: PLIBC_SEARCH_ENTRY,
                        __action: PLIBC_SEARCH_ACTION)
     -> *mut PLIBC_SEARCH_ENTRY;
    pub fn _win_hcreate(__nel: size_t) -> ::libc::c_int;
    pub fn _win_hdestroy() -> ();
    pub fn _win_hsearch_r(__item: PLIBC_SEARCH_ENTRY,
                          __action: PLIBC_SEARCH_ACTION,
                          __retval: *mut *mut PLIBC_SEARCH_ENTRY,
                          __htab: *mut Struct_PLIBC_SEARCH_hsearch_data)
     -> ::libc::c_int;
    pub fn _win_hcreate_r(__nel: size_t,
                          __htab: *mut Struct_PLIBC_SEARCH_hsearch_data)
     -> ::libc::c_int;
    pub fn _win_hdestroy_r(__htab: *mut Struct_PLIBC_SEARCH_hsearch_data)
     -> ();
    pub fn _win_tsearch(__key: *const ::libc::c_void,
                        __rootp: *mut *mut ::libc::c_void,
                        __compar: PLIBC_SEARCH__compar_fn_t)
     -> *mut ::libc::c_void;
    pub fn _win_tfind(__key: *const ::libc::c_void,
                      __rootp: *const *mut ::libc::c_void,
                      __compar: PLIBC_SEARCH__compar_fn_t)
     -> *mut ::libc::c_void;
    pub fn _win_tdelete(__key: *const ::libc::c_void,
                        __rootp: *mut *mut ::libc::c_void,
                        __compar: PLIBC_SEARCH__compar_fn_t)
     -> *mut ::libc::c_void;
    pub fn _win_twalk(__root: *const ::libc::c_void,
                      __action: PLIBC_SEARCH__action_fn_t) -> ();
    pub fn _win_tdestroy(__root: *mut ::libc::c_void,
                         __freefct: PLIBC_SEARCH__free_fn_t) -> ();
    pub fn _win_lfind(__key: *const ::libc::c_void,
                      __base: *const ::libc::c_void, __nmemb: *mut size_t,
                      __size: size_t, __compar: PLIBC_SEARCH__compar_fn_t)
     -> *mut ::libc::c_void;
    pub fn _win_lsearch(__key: *const ::libc::c_void,
                        __base: *mut ::libc::c_void, __nmemb: *mut size_t,
                        __size: size_t, __compar: PLIBC_SEARCH__compar_fn_t)
     -> *mut ::libc::c_void;
    pub fn setlocale(__category: ::libc::c_int,
                     __locale: *const ::libc::c_char) -> *mut ::libc::c_char;
    pub fn localeconv() -> *mut Struct_lconv;
    pub fn newlocale(__category_mask: ::libc::c_int,
                     __locale: *const ::libc::c_char, __base: __locale_t)
     -> __locale_t;
    pub fn duplocale(__dataset: __locale_t) -> __locale_t;
    pub fn freelocale(__dataset: __locale_t) -> ();
    pub fn uselocale(__dataset: __locale_t) -> __locale_t;
    pub fn mmap(__addr: *mut ::libc::c_void, __len: size_t,
                __prot: ::libc::c_int, __flags: ::libc::c_int,
                __fd: ::libc::c_int, __offset: __off_t)
     -> *mut ::libc::c_void;
    pub fn munmap(__addr: *mut ::libc::c_void, __len: size_t)
     -> ::libc::c_int;
    pub fn mprotect(__addr: *mut ::libc::c_void, __len: size_t,
                    __prot: ::libc::c_int) -> ::libc::c_int;
    pub fn msync(__addr: *mut ::libc::c_void, __len: size_t,
                 __flags: ::libc::c_int) -> ::libc::c_int;
    pub fn madvise(__addr: *mut ::libc::c_void, __len: size_t,
                   __advice: ::libc::c_int) -> ::libc::c_int;
    pub fn posix_madvise(__addr: *mut ::libc::c_void, __len: size_t,
                         __advice: ::libc::c_int) -> ::libc::c_int;
    pub fn mlock(__addr: *const ::libc::c_void, __len: size_t)
     -> ::libc::c_int;
    pub fn munlock(__addr: *const ::libc::c_void, __len: size_t)
     -> ::libc::c_int;
    pub fn mlockall(__flags: ::libc::c_int) -> ::libc::c_int;
    pub fn munlockall() -> ::libc::c_int;
    pub fn mincore(__start: *mut ::libc::c_void, __len: size_t,
                   __vec: *mut ::libc::c_uchar) -> ::libc::c_int;
    pub fn shm_open(__name: *const ::libc::c_char, __oflag: ::libc::c_int,
                    __mode: mode_t) -> ::libc::c_int;
    pub fn shm_unlink(__name: *const ::libc::c_char) -> ::libc::c_int;
    pub fn GNUNET_get_log_skip() -> ::libc::c_int;
    pub fn GNUNET_get_log_call_status(caller_level: ::libc::c_int,
                                      comp: *const ::libc::c_char,
                                      file: *const ::libc::c_char,
                                      function: *const ::libc::c_char,
                                      line: ::libc::c_int) -> ::libc::c_int;
    pub fn GNUNET_log_nocheck(kind: Enum_GNUNET_ErrorType,
                              message: *const ::libc::c_char, ...) -> ();
    pub fn GNUNET_log_from_nocheck(kind: Enum_GNUNET_ErrorType,
                                   comp: *const ::libc::c_char,
                                   message: *const ::libc::c_char, ...) -> ();
    pub fn GNUNET_log_config_missing(kind: Enum_GNUNET_ErrorType,
                                     section: *const ::libc::c_char,
                                     option: *const ::libc::c_char) -> ();
    pub fn GNUNET_log_config_invalid(kind: Enum_GNUNET_ErrorType,
                                     section: *const ::libc::c_char,
                                     option: *const ::libc::c_char,
                                     required: *const ::libc::c_char) -> ();
    pub fn GNUNET_abort() -> ();
    pub fn GNUNET_log_skip(n: ::libc::c_int, check_reset: ::libc::c_int)
     -> ();
    pub fn GNUNET_log_setup(comp: *const ::libc::c_char,
                            loglevel: *const ::libc::c_char,
                            logfile: *const ::libc::c_char) -> ::libc::c_int;
    pub fn GNUNET_logger_add(logger: GNUNET_Logger,
                             logger_cls: *mut ::libc::c_void) -> ();
    pub fn GNUNET_logger_remove(logger: GNUNET_Logger,
                                logger_cls: *mut ::libc::c_void) -> ();
    pub fn GNUNET_h2s(hc: *const Struct_GNUNET_HashCode)
     -> *const ::libc::c_char;
    pub fn GNUNET_h2s_full(hc: *const Struct_GNUNET_HashCode)
     -> *const ::libc::c_char;
    pub fn GNUNET_i2s(pid: *const Struct_GNUNET_PeerIdentity)
     -> *const ::libc::c_char;
    pub fn GNUNET_i2s_full(pid: *const Struct_GNUNET_PeerIdentity)
     -> *const ::libc::c_char;
    pub fn GNUNET_a2s(addr: *const Struct_sockaddr, addrlen: socklen_t)
     -> *const ::libc::c_char;
    pub fn GNUNET_error_type_to_string(kind: Enum_GNUNET_ErrorType)
     -> *const ::libc::c_char;
    pub fn GNUNET_ntohll(n: uint64_t) -> uint64_t;
    pub fn GNUNET_htonll(n: uint64_t) -> uint64_t;
    pub fn GNUNET_hton_double(d: ::libc::c_double) -> ::libc::c_double;
    pub fn GNUNET_ntoh_double(d: ::libc::c_double) -> ::libc::c_double;
    pub fn GNUNET_snprintf(buf: *mut ::libc::c_char, size: size_t,
                           format: *const ::libc::c_char, ...)
     -> ::libc::c_int;
    pub fn GNUNET_asprintf(buf: *mut *mut ::libc::c_char,
                           format: *const ::libc::c_char, ...)
     -> ::libc::c_int;
    pub fn GNUNET_xmalloc_(size: size_t, filename: *const ::libc::c_char,
                           linenumber: ::libc::c_int) -> *mut ::libc::c_void;
    pub fn GNUNET_xmemdup_(buf: *const ::libc::c_void, size: size_t,
                           filename: *const ::libc::c_char,
                           linenumber: ::libc::c_int) -> *mut ::libc::c_void;
    pub fn GNUNET_xmalloc_unchecked_(size: size_t,
                                     filename: *const ::libc::c_char,
                                     linenumber: ::libc::c_int)
     -> *mut ::libc::c_void;
    pub fn GNUNET_xrealloc_(ptr: *mut ::libc::c_void, n: size_t,
                            filename: *const ::libc::c_char,
                            linenumber: ::libc::c_int) -> *mut ::libc::c_void;
    pub fn GNUNET_xfree_(ptr: *mut ::libc::c_void,
                         filename: *const ::libc::c_char,
                         linenumber: ::libc::c_int) -> ();
    pub fn GNUNET_xstrdup_(str: *const ::libc::c_char,
                           filename: *const ::libc::c_char,
                           linenumber: ::libc::c_int) -> *mut ::libc::c_char;
    pub fn GNUNET_xstrndup_(str: *const ::libc::c_char, len: size_t,
                            filename: *const ::libc::c_char,
                            linenumber: ::libc::c_int) -> *mut ::libc::c_char;
    pub fn GNUNET_xgrow_(old: *mut *mut ::libc::c_void, elementSize: size_t,
                         oldCount: *mut ::libc::c_uint,
                         newCount: ::libc::c_uint,
                         filename: *const ::libc::c_char,
                         linenumber: ::libc::c_int) -> ();
    pub fn GNUNET_copy_message(msg: *const Struct_GNUNET_MessageHeader)
     -> *mut Struct_GNUNET_MessageHeader;
    pub fn GNUNET_TIME_relative_get_zero_() -> Struct_GNUNET_TIME_Relative;
    pub fn GNUNET_TIME_absolute_get_zero_() -> Struct_GNUNET_TIME_Absolute;
    pub fn GNUNET_TIME_relative_get_unit_() -> Struct_GNUNET_TIME_Relative;
    pub fn GNUNET_TIME_relative_get_millisecond_()
     -> Struct_GNUNET_TIME_Relative;
    pub fn GNUNET_TIME_relative_get_second_() -> Struct_GNUNET_TIME_Relative;
    pub fn GNUNET_TIME_relative_get_minute_() -> Struct_GNUNET_TIME_Relative;
    pub fn GNUNET_TIME_relative_get_hour_() -> Struct_GNUNET_TIME_Relative;
    pub fn GNUNET_TIME_relative_get_forever_() -> Struct_GNUNET_TIME_Relative;
    pub fn GNUNET_TIME_absolute_get_forever_() -> Struct_GNUNET_TIME_Absolute;
    pub fn GNUNET_TIME_absolute_get() -> Struct_GNUNET_TIME_Absolute;
    pub fn GNUNET_TIME_relative_to_absolute(rel: Struct_GNUNET_TIME_Relative)
     -> Struct_GNUNET_TIME_Absolute;
    pub fn GNUNET_TIME_relative_min(t1: Struct_GNUNET_TIME_Relative,
                                    t2: Struct_GNUNET_TIME_Relative)
     -> Struct_GNUNET_TIME_Relative;
    pub fn GNUNET_TIME_relative_max(t1: Struct_GNUNET_TIME_Relative,
                                    t2: Struct_GNUNET_TIME_Relative)
     -> Struct_GNUNET_TIME_Relative;
    pub fn GNUNET_TIME_absolute_min(t1: Struct_GNUNET_TIME_Absolute,
                                    t2: Struct_GNUNET_TIME_Absolute)
     -> Struct_GNUNET_TIME_Absolute;
    pub fn GNUNET_TIME_absolute_max(t1: Struct_GNUNET_TIME_Absolute,
                                    t2: Struct_GNUNET_TIME_Absolute)
     -> Struct_GNUNET_TIME_Absolute;
    pub fn GNUNET_TIME_absolute_get_remaining(future:
                                                  Struct_GNUNET_TIME_Absolute)
     -> Struct_GNUNET_TIME_Relative;
    pub fn GNUNET_TIME_calculate_eta(start: Struct_GNUNET_TIME_Absolute,
                                     finished: uint64_t, total: uint64_t)
     -> Struct_GNUNET_TIME_Relative;
    pub fn GNUNET_TIME_absolute_get_difference(start:
                                                   Struct_GNUNET_TIME_Absolute,
                                               end:
                                                   Struct_GNUNET_TIME_Absolute)
     -> Struct_GNUNET_TIME_Relative;
    pub fn GNUNET_TIME_absolute_get_duration(whence:
                                                 Struct_GNUNET_TIME_Absolute)
     -> Struct_GNUNET_TIME_Relative;
    pub fn GNUNET_TIME_absolute_add(start: Struct_GNUNET_TIME_Absolute,
                                    duration: Struct_GNUNET_TIME_Relative)
     -> Struct_GNUNET_TIME_Absolute;
    pub fn GNUNET_TIME_absolute_subtract(start: Struct_GNUNET_TIME_Absolute,
                                         duration:
                                             Struct_GNUNET_TIME_Relative)
     -> Struct_GNUNET_TIME_Absolute;
    pub fn GNUNET_TIME_relative_multiply(rel: Struct_GNUNET_TIME_Relative,
                                         factor: ::libc::c_uint)
     -> Struct_GNUNET_TIME_Relative;
    pub fn GNUNET_TIME_relative_divide(rel: Struct_GNUNET_TIME_Relative,
                                       factor: ::libc::c_uint)
     -> Struct_GNUNET_TIME_Relative;
    pub fn GNUNET_TIME_relative_add(a1: Struct_GNUNET_TIME_Relative,
                                    a2: Struct_GNUNET_TIME_Relative)
     -> Struct_GNUNET_TIME_Relative;
    pub fn GNUNET_TIME_relative_subtract(a1: Struct_GNUNET_TIME_Relative,
                                         a2: Struct_GNUNET_TIME_Relative)
     -> Struct_GNUNET_TIME_Relative;
    pub fn GNUNET_TIME_relative_hton(a: Struct_GNUNET_TIME_Relative)
     -> Struct_GNUNET_TIME_RelativeNBO;
    pub fn GNUNET_TIME_relative_ntoh(a: Struct_GNUNET_TIME_RelativeNBO)
     -> Struct_GNUNET_TIME_Relative;
    pub fn GNUNET_TIME_absolute_hton(a: Struct_GNUNET_TIME_Absolute)
     -> Struct_GNUNET_TIME_AbsoluteNBO;
    pub fn GNUNET_TIME_absolute_ntoh(a: Struct_GNUNET_TIME_AbsoluteNBO)
     -> Struct_GNUNET_TIME_Absolute;
    pub fn GNUNET_TIME_set_offset(offset: ::libc::c_longlong) -> ();
    pub fn GNUNET_TIME_get_offset() -> ::libc::c_longlong;
    pub fn GNUNET_TIME_get_current_year() -> ::libc::c_uint;
    pub fn GNUNET_TIME_year_to_time(year: ::libc::c_uint)
     -> Struct_GNUNET_TIME_Absolute;
    pub fn GNUNET_TIME_time_to_year(at: Struct_GNUNET_TIME_Absolute)
     -> ::libc::c_uint;
    pub fn GNUNET_CONFIGURATION_create()
     -> *mut Struct_GNUNET_CONFIGURATION_Handle;
    pub fn GNUNET_CONFIGURATION_dup(cfg:
                                        *const Struct_GNUNET_CONFIGURATION_Handle)
     -> *mut Struct_GNUNET_CONFIGURATION_Handle;
    pub fn GNUNET_CONFIGURATION_destroy(cfg:
                                            *mut Struct_GNUNET_CONFIGURATION_Handle)
     -> ();
    pub fn GNUNET_CONFIGURATION_load(cfg:
                                         *mut Struct_GNUNET_CONFIGURATION_Handle,
                                     filename: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn GNUNET_CONFIGURATION_load_from(cfg:
                                              *mut Struct_GNUNET_CONFIGURATION_Handle,
                                          defaults_d: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn GNUNET_CONFIGURATION_parse(cfg:
                                          *mut Struct_GNUNET_CONFIGURATION_Handle,
                                      filename: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn GNUNET_CONFIGURATION_serialize(cfg:
                                              *const Struct_GNUNET_CONFIGURATION_Handle,
                                          size: *mut size_t)
     -> *mut ::libc::c_char;
    pub fn GNUNET_CONFIGURATION_deserialize(cfg:
                                                *mut Struct_GNUNET_CONFIGURATION_Handle,
                                            mem: *const ::libc::c_char,
                                            size: size_t,
                                            allow_inline: ::libc::c_int)
     -> ::libc::c_int;
    pub fn GNUNET_CONFIGURATION_write(cfg:
                                          *mut Struct_GNUNET_CONFIGURATION_Handle,
                                      filename: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn GNUNET_CONFIGURATION_write_diffs(cfg_default:
                                                *const Struct_GNUNET_CONFIGURATION_Handle,
                                            cfg_new:
                                                *const Struct_GNUNET_CONFIGURATION_Handle,
                                            filename: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn GNUNET_CONFIGURATION_get_diff(cfg_default:
                                             *const Struct_GNUNET_CONFIGURATION_Handle,
                                         cfg_new:
                                             *const Struct_GNUNET_CONFIGURATION_Handle)
     -> *mut Struct_GNUNET_CONFIGURATION_Handle;
    pub fn GNUNET_CONFIGURATION_is_dirty(cfg:
                                             *const Struct_GNUNET_CONFIGURATION_Handle)
     -> ::libc::c_int;
    pub fn GNUNET_CONFIGURATION_iterate(cfg:
                                            *const Struct_GNUNET_CONFIGURATION_Handle,
                                        iter: GNUNET_CONFIGURATION_Iterator,
                                        iter_cls: *mut ::libc::c_void) -> ();
    pub fn GNUNET_CONFIGURATION_iterate_sections(cfg:
                                                     *const Struct_GNUNET_CONFIGURATION_Handle,
                                                 iter:
                                                     GNUNET_CONFIGURATION_Section_Iterator,
                                                 iter_cls:
                                                     *mut ::libc::c_void)
     -> ();
    pub fn GNUNET_CONFIGURATION_remove_section(cfg:
                                                   *mut Struct_GNUNET_CONFIGURATION_Handle,
                                               section: *const ::libc::c_char)
     -> ();
    pub fn GNUNET_CONFIGURATION_get_value_number(cfg:
                                                     *const Struct_GNUNET_CONFIGURATION_Handle,
                                                 section:
                                                     *const ::libc::c_char,
                                                 option:
                                                     *const ::libc::c_char,
                                                 number:
                                                     *mut ::libc::c_ulonglong)
     -> ::libc::c_int;
    pub fn GNUNET_CONFIGURATION_get_value_float(cfg:
                                                    *const Struct_GNUNET_CONFIGURATION_Handle,
                                                section:
                                                    *const ::libc::c_char,
                                                option: *const ::libc::c_char,
                                                number: *mut ::libc::c_float)
     -> ::libc::c_int;
    pub fn GNUNET_CONFIGURATION_get_value_time(cfg:
                                                   *const Struct_GNUNET_CONFIGURATION_Handle,
                                               section: *const ::libc::c_char,
                                               option: *const ::libc::c_char,
                                               time:
                                                   *mut Struct_GNUNET_TIME_Relative)
     -> ::libc::c_int;
    pub fn GNUNET_CONFIGURATION_get_value_size(cfg:
                                                   *const Struct_GNUNET_CONFIGURATION_Handle,
                                               section: *const ::libc::c_char,
                                               option: *const ::libc::c_char,
                                               size: *mut ::libc::c_ulonglong)
     -> ::libc::c_int;
    pub fn GNUNET_CONFIGURATION_have_value(cfg:
                                               *const Struct_GNUNET_CONFIGURATION_Handle,
                                           section: *const ::libc::c_char,
                                           option: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn GNUNET_CONFIGURATION_get_value_string(cfg:
                                                     *const Struct_GNUNET_CONFIGURATION_Handle,
                                                 section:
                                                     *const ::libc::c_char,
                                                 option:
                                                     *const ::libc::c_char,
                                                 value:
                                                     *mut *mut ::libc::c_char)
     -> ::libc::c_int;
    pub fn GNUNET_CONFIGURATION_get_value_filename(cfg:
                                                       *const Struct_GNUNET_CONFIGURATION_Handle,
                                                   section:
                                                       *const ::libc::c_char,
                                                   option:
                                                       *const ::libc::c_char,
                                                   value:
                                                       *mut *mut ::libc::c_char)
     -> ::libc::c_int;
    pub fn GNUNET_CONFIGURATION_iterate_value_filenames(cfg:
                                                            *const Struct_GNUNET_CONFIGURATION_Handle,
                                                        section:
                                                            *const ::libc::c_char,
                                                        option:
                                                            *const ::libc::c_char,
                                                        cb:
                                                            GNUNET_FileNameCallback,
                                                        cb_cls:
                                                            *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn GNUNET_CONFIGURATION_iterate_section_values(cfg:
                                                           *const Struct_GNUNET_CONFIGURATION_Handle,
                                                       section:
                                                           *const ::libc::c_char,
                                                       iter:
                                                           GNUNET_CONFIGURATION_Iterator,
                                                       iter_cls:
                                                           *mut ::libc::c_void)
     -> ();
    pub fn GNUNET_CONFIGURATION_get_value_choice(cfg:
                                                     *const Struct_GNUNET_CONFIGURATION_Handle,
                                                 section:
                                                     *const ::libc::c_char,
                                                 option:
                                                     *const ::libc::c_char,
                                                 choices:
                                                     *const *const ::libc::c_char,
                                                 value:
                                                     *mut *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn GNUNET_CONFIGURATION_get_value_yesno(cfg:
                                                    *const Struct_GNUNET_CONFIGURATION_Handle,
                                                section:
                                                    *const ::libc::c_char,
                                                option: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn GNUNET_CONFIGURATION_expand_dollar(cfg:
                                                  *const Struct_GNUNET_CONFIGURATION_Handle,
                                              orig: *mut ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn GNUNET_CONFIGURATION_set_value_number(cfg:
                                                     *mut Struct_GNUNET_CONFIGURATION_Handle,
                                                 section:
                                                     *const ::libc::c_char,
                                                 option:
                                                     *const ::libc::c_char,
                                                 number: ::libc::c_ulonglong)
     -> ();
    pub fn GNUNET_CONFIGURATION_set_value_string(cfg:
                                                     *mut Struct_GNUNET_CONFIGURATION_Handle,
                                                 section:
                                                     *const ::libc::c_char,
                                                 option:
                                                     *const ::libc::c_char,
                                                 value: *const ::libc::c_char)
     -> ();
    pub fn GNUNET_CONFIGURATION_remove_value_filename(cfg:
                                                          *mut Struct_GNUNET_CONFIGURATION_Handle,
                                                      section:
                                                          *const ::libc::c_char,
                                                      option:
                                                          *const ::libc::c_char,
                                                      value:
                                                          *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn GNUNET_CONFIGURATION_append_value_filename(cfg:
                                                          *mut Struct_GNUNET_CONFIGURATION_Handle,
                                                      section:
                                                          *const ::libc::c_char,
                                                      option:
                                                          *const ::libc::c_char,
                                                      value:
                                                          *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn GNUNET_DISK_handle_invalid(h: *const Struct_GNUNET_DISK_FileHandle)
     -> ::libc::c_int;
    pub fn GNUNET_DISK_file_test(fil: *const ::libc::c_char) -> ::libc::c_int;
    pub fn GNUNET_DISK_file_backup(fil: *const ::libc::c_char) -> ();
    pub fn GNUNET_DISK_file_seek(h: *const Struct_GNUNET_DISK_FileHandle,
                                 offset: off_t, whence: Enum_GNUNET_DISK_Seek)
     -> off_t;
    pub fn GNUNET_DISK_file_size(filename: *const ::libc::c_char,
                                 size: *mut uint64_t,
                                 include_symbolic_links: ::libc::c_int,
                                 single_file_mode: ::libc::c_int)
     -> ::libc::c_int;
    pub fn GNUNET_DISK_file_get_identifiers(filename: *const ::libc::c_char,
                                            dev: *mut uint64_t,
                                            ino: *mut uint64_t)
     -> ::libc::c_int;
    pub fn GNUNET_DISK_mktemp(t: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn GNUNET_DISK_mkdtemp(t: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn GNUNET_DISK_file_open(_fn: *const ::libc::c_char,
                                 flags: Enum_GNUNET_DISK_OpenFlags,
                                 perm: Enum_GNUNET_DISK_AccessPermissions)
     -> *mut Struct_GNUNET_DISK_FileHandle;
    pub fn GNUNET_DISK_file_handle_size(fh:
                                            *mut Struct_GNUNET_DISK_FileHandle,
                                        size: *mut off_t) -> ::libc::c_int;
    pub fn GNUNET_DISK_pipe(blocking_read: ::libc::c_int,
                            blocking_write: ::libc::c_int,
                            inherit_read: ::libc::c_int,
                            inherit_write: ::libc::c_int)
     -> *mut Struct_GNUNET_DISK_PipeHandle;
    pub fn GNUNET_DISK_pipe_from_fd(blocking_read: ::libc::c_int,
                                    blocking_write: ::libc::c_int,
                                    fd: *mut ::libc::c_int)
     -> *mut Struct_GNUNET_DISK_PipeHandle;
    pub fn GNUNET_DISK_pipe_close(p: *mut Struct_GNUNET_DISK_PipeHandle)
     -> ::libc::c_int;
    pub fn GNUNET_DISK_pipe_close_end(p: *mut Struct_GNUNET_DISK_PipeHandle,
                                      end: Enum_GNUNET_DISK_PipeEnd)
     -> ::libc::c_int;
    pub fn GNUNET_DISK_pipe_detach_end(p: *mut Struct_GNUNET_DISK_PipeHandle,
                                       end: Enum_GNUNET_DISK_PipeEnd)
     -> *mut Struct_GNUNET_DISK_FileHandle;
    pub fn GNUNET_DISK_file_close(h: *mut Struct_GNUNET_DISK_FileHandle)
     -> ::libc::c_int;
    pub fn GNUNET_DISK_pipe_handle(p: *const Struct_GNUNET_DISK_PipeHandle,
                                   n: Enum_GNUNET_DISK_PipeEnd)
     -> *const Struct_GNUNET_DISK_FileHandle;
    pub fn GNUNET_DISK_fix_permissions(_fn: *const ::libc::c_char,
                                       require_uid_match: ::libc::c_int,
                                       require_gid_match: ::libc::c_int)
     -> ();
    pub fn GNUNET_DISK_get_handle_from_int_fd(fno: ::libc::c_int)
     -> *mut Struct_GNUNET_DISK_FileHandle;
    pub fn GNUNET_DISK_get_handle_from_native(fd: *mut FILE)
     -> *mut Struct_GNUNET_DISK_FileHandle;
    pub fn GNUNET_DISK_file_read(h: *const Struct_GNUNET_DISK_FileHandle,
                                 result: *mut ::libc::c_void, len: size_t)
     -> ssize_t;
    pub fn GNUNET_DISK_file_read_non_blocking(h:
                                                  *const Struct_GNUNET_DISK_FileHandle,
                                              result: *mut ::libc::c_void,
                                              len: size_t) -> ssize_t;
    pub fn GNUNET_DISK_fn_read(_fn: *const ::libc::c_char,
                               result: *mut ::libc::c_void, len: size_t)
     -> ssize_t;
    pub fn GNUNET_DISK_file_write(h: *const Struct_GNUNET_DISK_FileHandle,
                                  buffer: *const ::libc::c_void, n: size_t)
     -> ssize_t;
    pub fn GNUNET_DISK_file_write_blocking(h:
                                               *const Struct_GNUNET_DISK_FileHandle,
                                           buffer: *const ::libc::c_void,
                                           n: size_t) -> ssize_t;
    pub fn GNUNET_DISK_fn_write(_fn: *const ::libc::c_char,
                                buffer: *const ::libc::c_void, n: size_t,
                                mode: Enum_GNUNET_DISK_AccessPermissions)
     -> ssize_t;
    pub fn GNUNET_DISK_file_copy(src: *const ::libc::c_char,
                                 dst: *const ::libc::c_char) -> ::libc::c_int;
    pub fn GNUNET_DISK_directory_scan(dir_name: *const ::libc::c_char,
                                      callback: GNUNET_FileNameCallback,
                                      callback_cls: *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn GNUNET_DISK_directory_iterator_next(iter:
                                                   *mut Struct_GNUNET_DISK_DirectoryIterator,
                                               can: ::libc::c_int)
     -> ::libc::c_int;
    pub fn GNUNET_DISK_directory_iterator_start(prio:
                                                    Enum_GNUNET_SCHEDULER_Priority,
                                                dir_name:
                                                    *const ::libc::c_char,
                                                callback:
                                                    GNUNET_DISK_DirectoryIteratorCallback,
                                                callback_cls:
                                                    *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn GNUNET_DISK_directory_create_for_file(filename:
                                                     *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn GNUNET_DISK_directory_test(fil: *const ::libc::c_char,
                                      is_readable: ::libc::c_int)
     -> ::libc::c_int;
    pub fn GNUNET_DISK_directory_remove(filename: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn GNUNET_DISK_directory_create(dir: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn GNUNET_DISK_file_lock(fh: *mut Struct_GNUNET_DISK_FileHandle,
                                 lock_start: off_t, lock_end: off_t,
                                 excl: ::libc::c_int) -> ::libc::c_int;
    pub fn GNUNET_DISK_file_unlock(fh: *mut Struct_GNUNET_DISK_FileHandle,
                                   unlock_start: off_t, unlock_end: off_t)
     -> ::libc::c_int;
    pub fn GNUNET_DISK_filename_canonicalize(_fn: *mut ::libc::c_char) -> ();
    pub fn GNUNET_DISK_file_change_owner(filename: *const ::libc::c_char,
                                         user: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn GNUNET_DISK_file_map(h: *const Struct_GNUNET_DISK_FileHandle,
                                m: *mut *mut Struct_GNUNET_DISK_MapHandle,
                                access: Enum_GNUNET_DISK_MapType, len: size_t)
     -> *mut ::libc::c_void;
    pub fn GNUNET_DISK_file_unmap(h: *mut Struct_GNUNET_DISK_MapHandle)
     -> ::libc::c_int;
    pub fn GNUNET_DISK_file_sync(h: *const Struct_GNUNET_DISK_FileHandle)
     -> ::libc::c_int;
    pub fn GNUNET_NETWORK_test_pf(pf: ::libc::c_int) -> ::libc::c_int;
    pub fn GNUNET_NETWORK_shorten_unixpath(unixpath: *mut ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn GNUNET_NETWORK_socket_accept(desc:
                                            *const Struct_GNUNET_NETWORK_Handle,
                                        address: *mut Struct_sockaddr,
                                        address_len: *mut socklen_t)
     -> *mut Struct_GNUNET_NETWORK_Handle;
    pub fn GNUNET_NETWORK_socket_box_native(fd: ::libc::c_int)
     -> *mut Struct_GNUNET_NETWORK_Handle;
    pub fn GNUNET_NETWORK_socket_set_blocking(fd:
                                                  *mut Struct_GNUNET_NETWORK_Handle,
                                              doBlock: ::libc::c_int)
     -> ::libc::c_int;
    pub fn GNUNET_NETWORK_socket_bind(desc: *mut Struct_GNUNET_NETWORK_Handle,
                                      address: *const Struct_sockaddr,
                                      address_len: socklen_t)
     -> ::libc::c_int;
    pub fn GNUNET_NETWORK_socket_close(desc:
                                           *mut Struct_GNUNET_NETWORK_Handle)
     -> ::libc::c_int;
    pub fn GNUNET_NETWORK_socket_free_memory_only_(desc:
                                                       *mut Struct_GNUNET_NETWORK_Handle)
     -> ();
    pub fn GNUNET_NETWORK_socket_connect(desc:
                                             *const Struct_GNUNET_NETWORK_Handle,
                                         address: *const Struct_sockaddr,
                                         address_len: socklen_t)
     -> ::libc::c_int;
    pub fn GNUNET_NETWORK_socket_getsockopt(desc:
                                                *const Struct_GNUNET_NETWORK_Handle,
                                            level: ::libc::c_int,
                                            optname: ::libc::c_int,
                                            optval: *mut ::libc::c_void,
                                            optlen: *mut socklen_t)
     -> ::libc::c_int;
    pub fn GNUNET_NETWORK_socket_listen(desc:
                                            *const Struct_GNUNET_NETWORK_Handle,
                                        backlog: ::libc::c_int)
     -> ::libc::c_int;
    pub fn GNUNET_NETWORK_socket_recvfrom_amount(desc:
                                                     *const Struct_GNUNET_NETWORK_Handle)
     -> ssize_t;
    pub fn GNUNET_NETWORK_socket_recvfrom(desc:
                                              *const Struct_GNUNET_NETWORK_Handle,
                                          buffer: *mut ::libc::c_void,
                                          length: size_t,
                                          src_addr: *mut Struct_sockaddr,
                                          addrlen: *mut socklen_t) -> ssize_t;
    pub fn GNUNET_NETWORK_socket_recv(desc:
                                          *const Struct_GNUNET_NETWORK_Handle,
                                      buffer: *mut ::libc::c_void,
                                      length: size_t) -> ssize_t;
    pub fn GNUNET_NETWORK_socket_select(rfds:
                                            *mut Struct_GNUNET_NETWORK_FDSet,
                                        wfds:
                                            *mut Struct_GNUNET_NETWORK_FDSet,
                                        efds:
                                            *mut Struct_GNUNET_NETWORK_FDSet,
                                        timeout: Struct_GNUNET_TIME_Relative)
     -> ::libc::c_int;
    pub fn GNUNET_NETWORK_socket_send(desc:
                                          *const Struct_GNUNET_NETWORK_Handle,
                                      buffer: *const ::libc::c_void,
                                      length: size_t) -> ssize_t;
    pub fn GNUNET_NETWORK_socket_sendto(desc:
                                            *const Struct_GNUNET_NETWORK_Handle,
                                        message: *const ::libc::c_void,
                                        length: size_t,
                                        dest_addr: *const Struct_sockaddr,
                                        dest_len: socklen_t) -> ssize_t;
    pub fn GNUNET_NETWORK_socket_setsockopt(fd:
                                                *mut Struct_GNUNET_NETWORK_Handle,
                                            level: ::libc::c_int,
                                            option_name: ::libc::c_int,
                                            option_value:
                                                *const ::libc::c_void,
                                            option_len: socklen_t)
     -> ::libc::c_int;
    pub fn GNUNET_NETWORK_socket_shutdown(desc:
                                              *mut Struct_GNUNET_NETWORK_Handle,
                                          how: ::libc::c_int)
     -> ::libc::c_int;
    pub fn GNUNET_NETWORK_socket_disable_corking(desc:
                                                     *mut Struct_GNUNET_NETWORK_Handle)
     -> ::libc::c_int;
    pub fn GNUNET_NETWORK_socket_create(domain: ::libc::c_int,
                                        _type: ::libc::c_int,
                                        protocol: ::libc::c_int)
     -> *mut Struct_GNUNET_NETWORK_Handle;
    pub fn GNUNET_NETWORK_fdset_zero(fds: *mut Struct_GNUNET_NETWORK_FDSet)
     -> ();
    pub fn GNUNET_NETWORK_fdset_set(fds: *mut Struct_GNUNET_NETWORK_FDSet,
                                    desc: *const Struct_GNUNET_NETWORK_Handle)
     -> ();
    pub fn GNUNET_NETWORK_fdset_isset(fds: *const Struct_GNUNET_NETWORK_FDSet,
                                      desc:
                                          *const Struct_GNUNET_NETWORK_Handle)
     -> ::libc::c_int;
    pub fn GNUNET_NETWORK_fdset_add(dst: *mut Struct_GNUNET_NETWORK_FDSet,
                                    src: *const Struct_GNUNET_NETWORK_FDSet)
     -> ();
    pub fn GNUNET_NETWORK_fdset_copy(to: *mut Struct_GNUNET_NETWORK_FDSet,
                                     from: *const Struct_GNUNET_NETWORK_FDSet)
     -> ();
    pub fn GNUNET_NETWORK_get_fd(desc: *mut Struct_GNUNET_NETWORK_Handle)
     -> ::libc::c_int;
    pub fn GNUNET_NETWORK_get_addr(desc: *mut Struct_GNUNET_NETWORK_Handle)
     -> *mut Struct_sockaddr;
    pub fn GNUNET_NETWORK_get_addrlen(desc: *mut Struct_GNUNET_NETWORK_Handle)
     -> socklen_t;
    pub fn GNUNET_NETWORK_fdset_copy_native(to:
                                                *mut Struct_GNUNET_NETWORK_FDSet,
                                            from: *const fd_set,
                                            nfds: ::libc::c_int) -> ();
    pub fn GNUNET_NETWORK_fdset_set_native(to:
                                               *mut Struct_GNUNET_NETWORK_FDSet,
                                           nfd: ::libc::c_int) -> ();
    pub fn GNUNET_NETWORK_fdset_test_native(to:
                                                *const Struct_GNUNET_NETWORK_FDSet,
                                            nfd: ::libc::c_int)
     -> ::libc::c_int;
    pub fn GNUNET_NETWORK_fdset_handle_set(fds:
                                               *mut Struct_GNUNET_NETWORK_FDSet,
                                           h:
                                               *const Struct_GNUNET_DISK_FileHandle)
     -> ();
    pub fn GNUNET_NETWORK_fdset_handle_isset(fds:
                                                 *const Struct_GNUNET_NETWORK_FDSet,
                                             h:
                                                 *const Struct_GNUNET_DISK_FileHandle)
     -> ::libc::c_int;
    pub fn GNUNET_NETWORK_fdset_overlap(fds1:
                                            *const Struct_GNUNET_NETWORK_FDSet,
                                        fds2:
                                            *const Struct_GNUNET_NETWORK_FDSet)
     -> ::libc::c_int;
    pub fn GNUNET_NETWORK_fdset_create() -> *mut Struct_GNUNET_NETWORK_FDSet;
    pub fn GNUNET_NETWORK_fdset_destroy(fds: *mut Struct_GNUNET_NETWORK_FDSet)
     -> ();
    pub fn GNUNET_SCHEDULER_run(task: GNUNET_SCHEDULER_TaskCallback,
                                task_cls: *mut ::libc::c_void) -> ();
    pub fn GNUNET_SCHEDULER_shutdown() -> ();
    pub fn GNUNET_SCHEDULER_get_load(p: Enum_GNUNET_SCHEDULER_Priority)
     -> ::libc::c_uint;
    pub fn GNUNET_SCHEDULER_get_reason() -> Enum_GNUNET_SCHEDULER_Reason;
    pub fn GNUNET_SCHEDULER_cancel(task: *mut Struct_GNUNET_SCHEDULER_Task)
     -> *mut ::libc::c_void;
    pub fn GNUNET_SCHEDULER_add_continuation(task:
                                                 GNUNET_SCHEDULER_TaskCallback,
                                             task_cls: *mut ::libc::c_void,
                                             reason:
                                                 Enum_GNUNET_SCHEDULER_Reason)
     -> ();
    pub fn GNUNET_SCHEDULER_add_continuation_with_priority(task:
                                                               GNUNET_SCHEDULER_TaskCallback,
                                                           task_cls:
                                                               *mut ::libc::c_void,
                                                           reason:
                                                               Enum_GNUNET_SCHEDULER_Reason,
                                                           priority:
                                                               Enum_GNUNET_SCHEDULER_Priority)
     -> ();
    pub fn GNUNET_SCHEDULER_add_with_priority(prio:
                                                  Enum_GNUNET_SCHEDULER_Priority,
                                              task:
                                                  GNUNET_SCHEDULER_TaskCallback,
                                              task_cls: *mut ::libc::c_void)
     -> *mut Struct_GNUNET_SCHEDULER_Task;
    pub fn GNUNET_SCHEDULER_add_now(task: GNUNET_SCHEDULER_TaskCallback,
                                    task_cls: *mut ::libc::c_void)
     -> *mut Struct_GNUNET_SCHEDULER_Task;
    pub fn GNUNET_SCHEDULER_add_now_with_lifeness(lifeness: ::libc::c_int,
                                                  task:
                                                      GNUNET_SCHEDULER_TaskCallback,
                                                  task_cls:
                                                      *mut ::libc::c_void)
     -> *mut Struct_GNUNET_SCHEDULER_Task;
    pub fn GNUNET_SCHEDULER_add_delayed(delay: Struct_GNUNET_TIME_Relative,
                                        task: GNUNET_SCHEDULER_TaskCallback,
                                        task_cls: *mut ::libc::c_void)
     -> *mut Struct_GNUNET_SCHEDULER_Task;
    pub fn GNUNET_SCHEDULER_add_delayed_with_priority(delay:
                                                          Struct_GNUNET_TIME_Relative,
                                                      priority:
                                                          Enum_GNUNET_SCHEDULER_Priority,
                                                      task:
                                                          GNUNET_SCHEDULER_TaskCallback,
                                                      task_cls:
                                                          *mut ::libc::c_void)
     -> *mut Struct_GNUNET_SCHEDULER_Task;
    pub fn GNUNET_SCHEDULER_add_read_net(delay: Struct_GNUNET_TIME_Relative,
                                         rfd:
                                             *mut Struct_GNUNET_NETWORK_Handle,
                                         task: GNUNET_SCHEDULER_TaskCallback,
                                         task_cls: *mut ::libc::c_void)
     -> *mut Struct_GNUNET_SCHEDULER_Task;
    pub fn GNUNET_SCHEDULER_add_read_net_with_priority(delay:
                                                           Struct_GNUNET_TIME_Relative,
                                                       priority:
                                                           Enum_GNUNET_SCHEDULER_Priority,
                                                       rfd:
                                                           *mut Struct_GNUNET_NETWORK_Handle,
                                                       task:
                                                           GNUNET_SCHEDULER_TaskCallback,
                                                       task_cls:
                                                           *mut ::libc::c_void)
     -> *mut Struct_GNUNET_SCHEDULER_Task;
    pub fn GNUNET_SCHEDULER_add_write_net(delay: Struct_GNUNET_TIME_Relative,
                                          wfd:
                                              *mut Struct_GNUNET_NETWORK_Handle,
                                          task: GNUNET_SCHEDULER_TaskCallback,
                                          task_cls: *mut ::libc::c_void)
     -> *mut Struct_GNUNET_SCHEDULER_Task;
    pub fn GNUNET_SCHEDULER_add_net_with_priority(delay:
                                                      Struct_GNUNET_TIME_Relative,
                                                  priority:
                                                      Enum_GNUNET_SCHEDULER_Priority,
                                                  fd:
                                                      *mut Struct_GNUNET_NETWORK_Handle,
                                                  on_read: ::libc::c_int,
                                                  on_write: ::libc::c_int,
                                                  task:
                                                      GNUNET_SCHEDULER_TaskCallback,
                                                  task_cls:
                                                      *mut ::libc::c_void)
     -> *mut Struct_GNUNET_SCHEDULER_Task;
    pub fn GNUNET_SCHEDULER_add_read_file(delay: Struct_GNUNET_TIME_Relative,
                                          rfd:
                                              *const Struct_GNUNET_DISK_FileHandle,
                                          task: GNUNET_SCHEDULER_TaskCallback,
                                          task_cls: *mut ::libc::c_void)
     -> *mut Struct_GNUNET_SCHEDULER_Task;
    pub fn GNUNET_SCHEDULER_add_write_file(delay: Struct_GNUNET_TIME_Relative,
                                           wfd:
                                               *const Struct_GNUNET_DISK_FileHandle,
                                           task:
                                               GNUNET_SCHEDULER_TaskCallback,
                                           task_cls: *mut ::libc::c_void)
     -> *mut Struct_GNUNET_SCHEDULER_Task;
    pub fn GNUNET_SCHEDULER_add_file_with_priority(delay:
                                                       Struct_GNUNET_TIME_Relative,
                                                   priority:
                                                       Enum_GNUNET_SCHEDULER_Priority,
                                                   fd:
                                                       *const Struct_GNUNET_DISK_FileHandle,
                                                   on_read: ::libc::c_int,
                                                   on_write: ::libc::c_int,
                                                   task:
                                                       GNUNET_SCHEDULER_TaskCallback,
                                                   task_cls:
                                                       *mut ::libc::c_void)
     -> *mut Struct_GNUNET_SCHEDULER_Task;
    pub fn GNUNET_SCHEDULER_add_select(prio: Enum_GNUNET_SCHEDULER_Priority,
                                       delay: Struct_GNUNET_TIME_Relative,
                                       rs: *const Struct_GNUNET_NETWORK_FDSet,
                                       ws: *const Struct_GNUNET_NETWORK_FDSet,
                                       task: GNUNET_SCHEDULER_TaskCallback,
                                       task_cls: *mut ::libc::c_void)
     -> *mut Struct_GNUNET_SCHEDULER_Task;
    pub fn GNUNET_SCHEDULER_set_select(new_select: GNUNET_SCHEDULER_select,
                                       new_select_cls: *mut ::libc::c_void)
     -> ();
    pub fn gpg_err_init() -> gpg_error_t;
    pub fn gpg_err_deinit(mode: ::libc::c_int) -> ();
    pub fn gpgrt_set_syscall_clamp(pre:
                                       ::std::option::Option<extern "C" fn()
                                                                 -> ()>,
                                   post:
                                       ::std::option::Option<extern "C" fn()
                                                                 -> ()>)
     -> ();
    pub fn gpgrt_set_alloc_func(f:
                                    ::std::option::Option<extern "C" fn
                                                              (a:
                                                                   *mut ::libc::c_void,
                                                               n: size_t)
                                                              ->
                                                                  *mut ::libc::c_void>)
     -> ();
    pub fn gpg_strerror(err: gpg_error_t) -> *const ::libc::c_char;
    pub fn gpg_strerror_r(err: gpg_error_t, buf: *mut ::libc::c_char,
                          buflen: size_t) -> ::libc::c_int;
    pub fn gpg_strsource(err: gpg_error_t) -> *const ::libc::c_char;
    pub fn gpg_err_code_from_errno(err: ::libc::c_int) -> gpg_err_code_t;
    pub fn gpg_err_code_to_errno(code: gpg_err_code_t) -> ::libc::c_int;
    pub fn gpg_err_code_from_syserror() -> gpg_err_code_t;
    pub fn gpg_err_set_errno(err: ::libc::c_int) -> ();
    pub fn gpgrt_check_version(req_version: *const ::libc::c_char)
     -> *const ::libc::c_char;
    pub fn gpg_error_check_version(req_version: *const ::libc::c_char)
     -> *const ::libc::c_char;
    pub fn gpgrt_lock_init(lockhd: *mut gpgrt_lock_t) -> gpg_err_code_t;
    pub fn gpgrt_lock_lock(lockhd: *mut gpgrt_lock_t) -> gpg_err_code_t;
    pub fn gpgrt_lock_trylock(lockhd: *mut gpgrt_lock_t) -> gpg_err_code_t;
    pub fn gpgrt_lock_unlock(lockhd: *mut gpgrt_lock_t) -> gpg_err_code_t;
    pub fn gpgrt_lock_destroy(lockhd: *mut gpgrt_lock_t) -> gpg_err_code_t;
    pub fn gpgrt_yield() -> gpg_err_code_t;
    pub fn gpgrt_fopen(path: *const ::libc::c_char,
                       mode: *const ::libc::c_char) -> gpgrt_stream_t;
    pub fn gpgrt_mopen(data: *mut ::libc::c_void, data_n: size_t,
                       data_len: size_t, grow: ::libc::c_uint,
                       func_realloc:
                           ::std::option::Option<extern "C" fn
                                                     (mem:
                                                          *mut ::libc::c_void,
                                                      size: size_t)
                                                     -> *mut ::libc::c_void>,
                       func_free:
                           ::std::option::Option<extern "C" fn
                                                     (mem:
                                                          *mut ::libc::c_void)
                                                     -> ()>,
                       mode: *const ::libc::c_char) -> gpgrt_stream_t;
    pub fn gpgrt_fopenmem(memlimit: size_t, mode: *const ::libc::c_char)
     -> gpgrt_stream_t;
    pub fn gpgrt_fopenmem_init(memlimit: size_t, mode: *const ::libc::c_char,
                               data: *const ::libc::c_void, datalen: size_t)
     -> gpgrt_stream_t;
    pub fn gpgrt_fdopen(filedes: ::libc::c_int, mode: *const ::libc::c_char)
     -> gpgrt_stream_t;
    pub fn gpgrt_fdopen_nc(filedes: ::libc::c_int,
                           mode: *const ::libc::c_char) -> gpgrt_stream_t;
    pub fn gpgrt_sysopen(syshd: *mut gpgrt_syshd_t,
                         mode: *const ::libc::c_char) -> gpgrt_stream_t;
    pub fn gpgrt_sysopen_nc(syshd: *mut gpgrt_syshd_t,
                            mode: *const ::libc::c_char) -> gpgrt_stream_t;
    pub fn gpgrt_fpopen(fp: *mut FILE, mode: *const ::libc::c_char)
     -> gpgrt_stream_t;
    pub fn gpgrt_fpopen_nc(fp: *mut FILE, mode: *const ::libc::c_char)
     -> gpgrt_stream_t;
    pub fn gpgrt_freopen(path: *const ::libc::c_char,
                         mode: *const ::libc::c_char, stream: gpgrt_stream_t)
     -> gpgrt_stream_t;
    pub fn gpgrt_fopencookie(cookie: *mut ::libc::c_void,
                             mode: *const ::libc::c_char,
                             functions: gpgrt_cookie_io_functions_t)
     -> gpgrt_stream_t;
    pub fn gpgrt_fclose(stream: gpgrt_stream_t) -> ::libc::c_int;
    pub fn gpgrt_fclose_snatch(stream: gpgrt_stream_t,
                               r_buffer: *mut *mut ::libc::c_void,
                               r_buflen: *mut size_t) -> ::libc::c_int;
    pub fn gpgrt_onclose(stream: gpgrt_stream_t, mode: ::libc::c_int,
                         fnc:
                             ::std::option::Option<extern "C" fn
                                                       (arg1: gpgrt_stream_t,
                                                        arg2:
                                                            *mut ::libc::c_void)
                                                       -> ()>,
                         fnc_value: *mut ::libc::c_void) -> ::libc::c_int;
    pub fn gpgrt_fileno(stream: gpgrt_stream_t) -> ::libc::c_int;
    pub fn gpgrt_fileno_unlocked(stream: gpgrt_stream_t) -> ::libc::c_int;
    pub fn gpgrt_syshd(stream: gpgrt_stream_t, syshd: *mut gpgrt_syshd_t)
     -> ::libc::c_int;
    pub fn gpgrt_syshd_unlocked(stream: gpgrt_stream_t,
                                syshd: *mut gpgrt_syshd_t) -> ::libc::c_int;
    pub fn _gpgrt_set_std_fd(no: ::libc::c_int, fd: ::libc::c_int) -> ();
    pub fn _gpgrt_get_std_stream(fd: ::libc::c_int) -> gpgrt_stream_t;
    pub fn gpgrt_flockfile(stream: gpgrt_stream_t) -> ();
    pub fn gpgrt_ftrylockfile(stream: gpgrt_stream_t) -> ::libc::c_int;
    pub fn gpgrt_funlockfile(stream: gpgrt_stream_t) -> ();
    pub fn gpgrt_feof(stream: gpgrt_stream_t) -> ::libc::c_int;
    pub fn gpgrt_feof_unlocked(stream: gpgrt_stream_t) -> ::libc::c_int;
    pub fn gpgrt_ferror(stream: gpgrt_stream_t) -> ::libc::c_int;
    pub fn gpgrt_ferror_unlocked(stream: gpgrt_stream_t) -> ::libc::c_int;
    pub fn gpgrt_clearerr(stream: gpgrt_stream_t) -> ();
    pub fn gpgrt_clearerr_unlocked(stream: gpgrt_stream_t) -> ();
    pub fn gpgrt_fflush(stream: gpgrt_stream_t) -> ::libc::c_int;
    pub fn gpgrt_fseek(stream: gpgrt_stream_t, offset: ::libc::c_long,
                       whence: ::libc::c_int) -> ::libc::c_int;
    pub fn gpgrt_fseeko(stream: gpgrt_stream_t, offset: off_t,
                        whence: ::libc::c_int) -> ::libc::c_int;
    pub fn gpgrt_ftell(stream: gpgrt_stream_t) -> ::libc::c_long;
    pub fn gpgrt_ftello(stream: gpgrt_stream_t) -> off_t;
    pub fn gpgrt_rewind(stream: gpgrt_stream_t) -> ();
    pub fn gpgrt_fgetc(stream: gpgrt_stream_t) -> ::libc::c_int;
    pub fn gpgrt_fputc(c: ::libc::c_int, stream: gpgrt_stream_t)
     -> ::libc::c_int;
    pub fn _gpgrt_getc_underflow(stream: gpgrt_stream_t) -> ::libc::c_int;
    pub fn _gpgrt_putc_overflow(c: ::libc::c_int, stream: gpgrt_stream_t)
     -> ::libc::c_int;
    pub fn gpgrt_ungetc(c: ::libc::c_int, stream: gpgrt_stream_t)
     -> ::libc::c_int;
    pub fn gpgrt_read(stream: gpgrt_stream_t, buffer: *mut ::libc::c_void,
                      bytes_to_read: size_t, bytes_read: *mut size_t)
     -> ::libc::c_int;
    pub fn gpgrt_write(stream: gpgrt_stream_t, buffer: *const ::libc::c_void,
                       bytes_to_write: size_t, bytes_written: *mut size_t)
     -> ::libc::c_int;
    pub fn gpgrt_write_sanitized(stream: gpgrt_stream_t,
                                 buffer: *const ::libc::c_void,
                                 length: size_t,
                                 delimiters: *const ::libc::c_char,
                                 bytes_written: *mut size_t) -> ::libc::c_int;
    pub fn gpgrt_write_hexstring(stream: gpgrt_stream_t,
                                 buffer: *const ::libc::c_void,
                                 length: size_t, reserved: ::libc::c_int,
                                 bytes_written: *mut size_t) -> ::libc::c_int;
    pub fn gpgrt_fread(ptr: *mut ::libc::c_void, size: size_t, nitems: size_t,
                       stream: gpgrt_stream_t) -> size_t;
    pub fn gpgrt_fwrite(ptr: *const ::libc::c_void, size: size_t,
                        memb: size_t, stream: gpgrt_stream_t) -> size_t;
    pub fn gpgrt_fgets(s: *mut ::libc::c_char, n: ::libc::c_int,
                       stream: gpgrt_stream_t) -> *mut ::libc::c_char;
    pub fn gpgrt_fputs(s: *const ::libc::c_char, stream: gpgrt_stream_t)
     -> ::libc::c_int;
    pub fn gpgrt_fputs_unlocked(s: *const ::libc::c_char,
                                stream: gpgrt_stream_t) -> ::libc::c_int;
    pub fn gpgrt_getline(lineptr: *mut *mut ::libc::c_char, n: *mut size_t,
                         stream: gpgrt_stream_t) -> ssize_t;
    pub fn gpgrt_read_line(stream: gpgrt_stream_t,
                           addr_of_buffer: *mut *mut ::libc::c_char,
                           length_of_buffer: *mut size_t,
                           max_length: *mut size_t) -> ssize_t;
    pub fn gpgrt_free(a: *mut ::libc::c_void) -> ();
    pub fn gpgrt_fprintf(stream: gpgrt_stream_t,
                         format: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn gpgrt_fprintf_unlocked(stream: gpgrt_stream_t,
                                  format: *const ::libc::c_char, ...)
     -> ::libc::c_int;
    pub fn gpgrt_printf(format: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn gpgrt_printf_unlocked(format: *const ::libc::c_char, ...)
     -> ::libc::c_int;
    pub fn gpgrt_vfprintf(stream: gpgrt_stream_t,
                          format: *const ::libc::c_char, ap: va_list)
     -> ::libc::c_int;
    pub fn gpgrt_vfprintf_unlocked(stream: gpgrt_stream_t,
                                   format: *const ::libc::c_char, ap: va_list)
     -> ::libc::c_int;
    pub fn gpgrt_setvbuf(stream: gpgrt_stream_t, buf: *mut ::libc::c_char,
                         mode: ::libc::c_int, size: size_t) -> ::libc::c_int;
    pub fn gpgrt_setbuf(stream: gpgrt_stream_t, buf: *mut ::libc::c_char)
     -> ();
    pub fn gpgrt_set_binary(stream: gpgrt_stream_t) -> ();
    pub fn gpgrt_tmpfile() -> gpgrt_stream_t;
    pub fn gpgrt_opaque_set(stream: gpgrt_stream_t,
                            opaque: *mut ::libc::c_void) -> ();
    pub fn gpgrt_opaque_get(stream: gpgrt_stream_t) -> *mut ::libc::c_void;
    pub fn gpgrt_fname_set(stream: gpgrt_stream_t,
                           fname: *const ::libc::c_char) -> ();
    pub fn gpgrt_fname_get(stream: gpgrt_stream_t) -> *const ::libc::c_char;
    pub fn gpgrt_asprintf(r_buf: *mut *mut ::libc::c_char,
                          format: *const ::libc::c_char, ...)
     -> ::libc::c_int;
    pub fn gpgrt_vasprintf(r_buf: *mut *mut ::libc::c_char,
                           format: *const ::libc::c_char, ap: va_list)
     -> ::libc::c_int;
    pub fn gpgrt_bsprintf(format: *const ::libc::c_char, ...)
     -> *mut ::libc::c_char;
    pub fn gpgrt_vbsprintf(format: *const ::libc::c_char, ap: va_list)
     -> *mut ::libc::c_char;
    pub fn gpgrt_snprintf(buf: *mut ::libc::c_char, bufsize: size_t,
                          format: *const ::libc::c_char, ...)
     -> ::libc::c_int;
    pub fn gpgrt_vsnprintf(buf: *mut ::libc::c_char, bufsize: size_t,
                           format: *const ::libc::c_char, arg_ptr: va_list)
     -> ::libc::c_int;
    pub fn gettimeofday(__tv: *mut Struct_timeval, __tz: __timezone_ptr_t)
     -> ::libc::c_int;
    pub fn settimeofday(__tv: *const Struct_timeval,
                        __tz: *const Struct_timezone) -> ::libc::c_int;
    pub fn adjtime(__delta: *const Struct_timeval,
                   __olddelta: *mut Struct_timeval) -> ::libc::c_int;
    pub fn getitimer(__which: __itimer_which_t,
                     __value: *mut Struct_itimerval) -> ::libc::c_int;
    pub fn setitimer(__which: __itimer_which_t,
                     __new: *const Struct_itimerval,
                     __old: *mut Struct_itimerval) -> ::libc::c_int;
    pub fn utimes(__file: *const ::libc::c_char, __tvp: *mut Struct_timeval)
     -> ::libc::c_int;
    pub fn lutimes(__file: *const ::libc::c_char, __tvp: *mut Struct_timeval)
     -> ::libc::c_int;
    pub fn futimes(__fd: ::libc::c_int, __tvp: *mut Struct_timeval)
     -> ::libc::c_int;
    pub fn gcry_strerror(err: gcry_error_t) -> *const ::libc::c_char;
    pub fn gcry_strsource(err: gcry_error_t) -> *const ::libc::c_char;
    pub fn gcry_err_code_from_errno(err: ::libc::c_int) -> gcry_err_code_t;
    pub fn gcry_err_code_to_errno(code: gcry_err_code_t) -> ::libc::c_int;
    pub fn gcry_err_make_from_errno(source: gcry_err_source_t,
                                    err: ::libc::c_int) -> gcry_error_t;
    pub fn gcry_error_from_errno(err: ::libc::c_int) -> gcry_err_code_t;
    pub fn gcry_check_version(req_version: *const ::libc::c_char)
     -> *const ::libc::c_char;
    pub fn gcry_control(CMD: Enum_gcry_ctl_cmds, ...) -> gcry_error_t;
    pub fn gcry_sexp_new(retsexp: *mut gcry_sexp_t,
                         buffer: *const ::libc::c_void, length: size_t,
                         autodetect: ::libc::c_int) -> gcry_error_t;
    pub fn gcry_sexp_create(retsexp: *mut gcry_sexp_t,
                            buffer: *mut ::libc::c_void, length: size_t,
                            autodetect: ::libc::c_int,
                            freefnc:
                                ::std::option::Option<extern "C" fn
                                                          (arg1:
                                                               *mut ::libc::c_void)
                                                          -> ()>)
     -> gcry_error_t;
    pub fn gcry_sexp_sscan(retsexp: *mut gcry_sexp_t, erroff: *mut size_t,
                           buffer: *const ::libc::c_char, length: size_t)
     -> gcry_error_t;
    pub fn gcry_sexp_build(retsexp: *mut gcry_sexp_t, erroff: *mut size_t,
                           format: *const ::libc::c_char, ...)
     -> gcry_error_t;
    pub fn gcry_sexp_build_array(retsexp: *mut gcry_sexp_t,
                                 erroff: *mut size_t,
                                 format: *const ::libc::c_char,
                                 arg_list: *mut *mut ::libc::c_void)
     -> gcry_error_t;
    pub fn gcry_sexp_release(sexp: gcry_sexp_t) -> ();
    pub fn gcry_sexp_canon_len(buffer: *const ::libc::c_uchar, length: size_t,
                               erroff: *mut size_t,
                               errcode: *mut gcry_error_t) -> size_t;
    pub fn gcry_sexp_sprint(sexp: gcry_sexp_t, mode: ::libc::c_int,
                            buffer: *mut ::libc::c_void, maxlength: size_t)
     -> size_t;
    pub fn gcry_sexp_dump(a: gcry_sexp_t) -> ();
    pub fn gcry_sexp_cons(a: gcry_sexp_t, b: gcry_sexp_t) -> gcry_sexp_t;
    pub fn gcry_sexp_alist(array: *const gcry_sexp_t) -> gcry_sexp_t;
    pub fn gcry_sexp_vlist(a: gcry_sexp_t, ...) -> gcry_sexp_t;
    pub fn gcry_sexp_append(a: gcry_sexp_t, n: gcry_sexp_t) -> gcry_sexp_t;
    pub fn gcry_sexp_prepend(a: gcry_sexp_t, n: gcry_sexp_t) -> gcry_sexp_t;
    pub fn gcry_sexp_find_token(list: gcry_sexp_t, tok: *const ::libc::c_char,
                                toklen: size_t) -> gcry_sexp_t;
    pub fn gcry_sexp_length(list: gcry_sexp_t) -> ::libc::c_int;
    pub fn gcry_sexp_nth(list: gcry_sexp_t, number: ::libc::c_int)
     -> gcry_sexp_t;
    pub fn gcry_sexp_car(list: gcry_sexp_t) -> gcry_sexp_t;
    pub fn gcry_sexp_cdr(list: gcry_sexp_t) -> gcry_sexp_t;
    pub fn gcry_sexp_cadr(list: gcry_sexp_t) -> gcry_sexp_t;
    pub fn gcry_sexp_nth_data(list: gcry_sexp_t, number: ::libc::c_int,
                              datalen: *mut size_t) -> *const ::libc::c_char;
    pub fn gcry_sexp_nth_buffer(list: gcry_sexp_t, number: ::libc::c_int,
                                rlength: *mut size_t) -> *mut ::libc::c_void;
    pub fn gcry_sexp_nth_string(list: gcry_sexp_t, number: ::libc::c_int)
     -> *mut ::libc::c_char;
    pub fn gcry_sexp_nth_mpi(list: gcry_sexp_t, number: ::libc::c_int,
                             mpifmt: ::libc::c_int) -> gcry_mpi_t;
    pub fn gcry_sexp_extract_param(sexp: gcry_sexp_t,
                                   path: *const ::libc::c_char,
                                   list: *const ::libc::c_char, ...)
     -> gpg_error_t;
    pub fn gcry_mpi_new(nbits: ::libc::c_uint) -> gcry_mpi_t;
    pub fn gcry_mpi_snew(nbits: ::libc::c_uint) -> gcry_mpi_t;
    pub fn gcry_mpi_release(a: gcry_mpi_t) -> ();
    pub fn gcry_mpi_copy(a: gcry_mpi_t) -> gcry_mpi_t;
    pub fn gcry_mpi_snatch(w: gcry_mpi_t, u: gcry_mpi_t) -> ();
    pub fn gcry_mpi_set(w: gcry_mpi_t, u: gcry_mpi_t) -> gcry_mpi_t;
    pub fn gcry_mpi_set_ui(w: gcry_mpi_t, u: ::libc::c_ulong) -> gcry_mpi_t;
    pub fn gcry_mpi_swap(a: gcry_mpi_t, b: gcry_mpi_t) -> ();
    pub fn gcry_mpi_is_neg(a: gcry_mpi_t) -> ::libc::c_int;
    pub fn gcry_mpi_neg(w: gcry_mpi_t, u: gcry_mpi_t) -> ();
    pub fn gcry_mpi_abs(w: gcry_mpi_t) -> ();
    pub fn gcry_mpi_cmp(u: gcry_mpi_t, v: gcry_mpi_t) -> ::libc::c_int;
    pub fn gcry_mpi_cmp_ui(u: gcry_mpi_t, v: ::libc::c_ulong)
     -> ::libc::c_int;
    pub fn gcry_mpi_scan(ret_mpi: *mut gcry_mpi_t,
                         format: Enum_gcry_mpi_format,
                         buffer: *const ::libc::c_void, buflen: size_t,
                         nscanned: *mut size_t) -> gcry_error_t;
    pub fn gcry_mpi_print(format: Enum_gcry_mpi_format,
                          buffer: *mut ::libc::c_uchar, buflen: size_t,
                          nwritten: *mut size_t, a: gcry_mpi_t)
     -> gcry_error_t;
    pub fn gcry_mpi_aprint(format: Enum_gcry_mpi_format,
                           buffer: *mut *mut ::libc::c_uchar,
                           nwritten: *mut size_t, a: gcry_mpi_t)
     -> gcry_error_t;
    pub fn gcry_mpi_dump(a: gcry_mpi_t) -> ();
    pub fn gcry_mpi_add(w: gcry_mpi_t, u: gcry_mpi_t, v: gcry_mpi_t) -> ();
    pub fn gcry_mpi_add_ui(w: gcry_mpi_t, u: gcry_mpi_t, v: ::libc::c_ulong)
     -> ();
    pub fn gcry_mpi_addm(w: gcry_mpi_t, u: gcry_mpi_t, v: gcry_mpi_t,
                         m: gcry_mpi_t) -> ();
    pub fn gcry_mpi_sub(w: gcry_mpi_t, u: gcry_mpi_t, v: gcry_mpi_t) -> ();
    pub fn gcry_mpi_sub_ui(w: gcry_mpi_t, u: gcry_mpi_t, v: ::libc::c_ulong)
     -> ();
    pub fn gcry_mpi_subm(w: gcry_mpi_t, u: gcry_mpi_t, v: gcry_mpi_t,
                         m: gcry_mpi_t) -> ();
    pub fn gcry_mpi_mul(w: gcry_mpi_t, u: gcry_mpi_t, v: gcry_mpi_t) -> ();
    pub fn gcry_mpi_mul_ui(w: gcry_mpi_t, u: gcry_mpi_t, v: ::libc::c_ulong)
     -> ();
    pub fn gcry_mpi_mulm(w: gcry_mpi_t, u: gcry_mpi_t, v: gcry_mpi_t,
                         m: gcry_mpi_t) -> ();
    pub fn gcry_mpi_mul_2exp(w: gcry_mpi_t, u: gcry_mpi_t,
                             cnt: ::libc::c_ulong) -> ();
    pub fn gcry_mpi_div(q: gcry_mpi_t, r: gcry_mpi_t, dividend: gcry_mpi_t,
                        divisor: gcry_mpi_t, round: ::libc::c_int) -> ();
    pub fn gcry_mpi_mod(r: gcry_mpi_t, dividend: gcry_mpi_t,
                        divisor: gcry_mpi_t) -> ();
    pub fn gcry_mpi_powm(w: gcry_mpi_t, b: gcry_mpi_t, e: gcry_mpi_t,
                         m: gcry_mpi_t) -> ();
    pub fn gcry_mpi_gcd(g: gcry_mpi_t, a: gcry_mpi_t, b: gcry_mpi_t)
     -> ::libc::c_int;
    pub fn gcry_mpi_invm(x: gcry_mpi_t, a: gcry_mpi_t, m: gcry_mpi_t)
     -> ::libc::c_int;
    pub fn gcry_mpi_point_new(nbits: ::libc::c_uint) -> gcry_mpi_point_t;
    pub fn gcry_mpi_point_release(point: gcry_mpi_point_t) -> ();
    pub fn gcry_mpi_point_get(x: gcry_mpi_t, y: gcry_mpi_t, z: gcry_mpi_t,
                              point: gcry_mpi_point_t) -> ();
    pub fn gcry_mpi_point_snatch_get(x: gcry_mpi_t, y: gcry_mpi_t,
                                     z: gcry_mpi_t, point: gcry_mpi_point_t)
     -> ();
    pub fn gcry_mpi_point_set(point: gcry_mpi_point_t, x: gcry_mpi_t,
                              y: gcry_mpi_t, z: gcry_mpi_t)
     -> gcry_mpi_point_t;
    pub fn gcry_mpi_point_snatch_set(point: gcry_mpi_point_t, x: gcry_mpi_t,
                                     y: gcry_mpi_t, z: gcry_mpi_t)
     -> gcry_mpi_point_t;
    pub fn gcry_mpi_ec_new(r_ctx: *mut gcry_ctx_t, keyparam: gcry_sexp_t,
                           curvename: *const ::libc::c_char) -> gpg_error_t;
    pub fn gcry_mpi_ec_get_mpi(name: *const ::libc::c_char, ctx: gcry_ctx_t,
                               copy: ::libc::c_int) -> gcry_mpi_t;
    pub fn gcry_mpi_ec_get_point(name: *const ::libc::c_char, ctx: gcry_ctx_t,
                                 copy: ::libc::c_int) -> gcry_mpi_point_t;
    pub fn gcry_mpi_ec_set_mpi(name: *const ::libc::c_char,
                               newvalue: gcry_mpi_t, ctx: gcry_ctx_t)
     -> gpg_error_t;
    pub fn gcry_mpi_ec_set_point(name: *const ::libc::c_char,
                                 newvalue: gcry_mpi_point_t, ctx: gcry_ctx_t)
     -> gpg_error_t;
    pub fn gcry_mpi_ec_get_affine(x: gcry_mpi_t, y: gcry_mpi_t,
                                  point: gcry_mpi_point_t, ctx: gcry_ctx_t)
     -> ::libc::c_int;
    pub fn gcry_mpi_ec_dup(w: gcry_mpi_point_t, u: gcry_mpi_point_t,
                           ctx: gcry_ctx_t) -> ();
    pub fn gcry_mpi_ec_add(w: gcry_mpi_point_t, u: gcry_mpi_point_t,
                           v: gcry_mpi_point_t, ctx: gcry_ctx_t) -> ();
    pub fn gcry_mpi_ec_mul(w: gcry_mpi_point_t, n: gcry_mpi_t,
                           u: gcry_mpi_point_t, ctx: gcry_ctx_t) -> ();
    pub fn gcry_mpi_ec_curve_point(w: gcry_mpi_point_t, ctx: gcry_ctx_t)
     -> ::libc::c_int;
    pub fn gcry_mpi_get_nbits(a: gcry_mpi_t) -> ::libc::c_uint;
    pub fn gcry_mpi_test_bit(a: gcry_mpi_t, n: ::libc::c_uint)
     -> ::libc::c_int;
    pub fn gcry_mpi_set_bit(a: gcry_mpi_t, n: ::libc::c_uint) -> ();
    pub fn gcry_mpi_clear_bit(a: gcry_mpi_t, n: ::libc::c_uint) -> ();
    pub fn gcry_mpi_set_highbit(a: gcry_mpi_t, n: ::libc::c_uint) -> ();
    pub fn gcry_mpi_clear_highbit(a: gcry_mpi_t, n: ::libc::c_uint) -> ();
    pub fn gcry_mpi_rshift(x: gcry_mpi_t, a: gcry_mpi_t, n: ::libc::c_uint)
     -> ();
    pub fn gcry_mpi_lshift(x: gcry_mpi_t, a: gcry_mpi_t, n: ::libc::c_uint)
     -> ();
    pub fn gcry_mpi_set_opaque(a: gcry_mpi_t, p: *mut ::libc::c_void,
                               nbits: ::libc::c_uint) -> gcry_mpi_t;
    pub fn gcry_mpi_set_opaque_copy(a: gcry_mpi_t, p: *const ::libc::c_void,
                                    nbits: ::libc::c_uint) -> gcry_mpi_t;
    pub fn gcry_mpi_get_opaque(a: gcry_mpi_t, nbits: *mut ::libc::c_uint)
     -> *mut ::libc::c_void;
    pub fn gcry_mpi_set_flag(a: gcry_mpi_t, flag: Enum_gcry_mpi_flag) -> ();
    pub fn gcry_mpi_clear_flag(a: gcry_mpi_t, flag: Enum_gcry_mpi_flag) -> ();
    pub fn gcry_mpi_get_flag(a: gcry_mpi_t, flag: Enum_gcry_mpi_flag)
     -> ::libc::c_int;
    pub fn _gcry_mpi_get_const(no: ::libc::c_int) -> gcry_mpi_t;
    pub fn gcry_cipher_open(handle: *mut gcry_cipher_hd_t,
                            algo: ::libc::c_int, mode: ::libc::c_int,
                            flags: ::libc::c_uint) -> gcry_error_t;
    pub fn gcry_cipher_close(h: gcry_cipher_hd_t) -> ();
    pub fn gcry_cipher_ctl(h: gcry_cipher_hd_t, cmd: ::libc::c_int,
                           buffer: *mut ::libc::c_void, buflen: size_t)
     -> gcry_error_t;
    pub fn gcry_cipher_info(h: gcry_cipher_hd_t, what: ::libc::c_int,
                            buffer: *mut ::libc::c_void, nbytes: *mut size_t)
     -> gcry_error_t;
    pub fn gcry_cipher_algo_info(algo: ::libc::c_int, what: ::libc::c_int,
                                 buffer: *mut ::libc::c_void,
                                 nbytes: *mut size_t) -> gcry_error_t;
    pub fn gcry_cipher_algo_name(algorithm: ::libc::c_int)
     -> *const ::libc::c_char;
    pub fn gcry_cipher_map_name(name: *const ::libc::c_char) -> ::libc::c_int;
    pub fn gcry_cipher_mode_from_oid(string: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn gcry_cipher_encrypt(h: gcry_cipher_hd_t, out: *mut ::libc::c_void,
                               outsize: size_t, _in: *const ::libc::c_void,
                               inlen: size_t) -> gcry_error_t;
    pub fn gcry_cipher_decrypt(h: gcry_cipher_hd_t, out: *mut ::libc::c_void,
                               outsize: size_t, _in: *const ::libc::c_void,
                               inlen: size_t) -> gcry_error_t;
    pub fn gcry_cipher_setkey(hd: gcry_cipher_hd_t,
                              key: *const ::libc::c_void, keylen: size_t)
     -> gcry_error_t;
    pub fn gcry_cipher_setiv(hd: gcry_cipher_hd_t, iv: *const ::libc::c_void,
                             ivlen: size_t) -> gcry_error_t;
    pub fn gcry_cipher_authenticate(hd: gcry_cipher_hd_t,
                                    abuf: *const ::libc::c_void,
                                    abuflen: size_t) -> gcry_error_t;
    pub fn gcry_cipher_gettag(hd: gcry_cipher_hd_t,
                              outtag: *mut ::libc::c_void, taglen: size_t)
     -> gcry_error_t;
    pub fn gcry_cipher_checktag(hd: gcry_cipher_hd_t,
                                intag: *const ::libc::c_void, taglen: size_t)
     -> gcry_error_t;
    pub fn gcry_cipher_setctr(hd: gcry_cipher_hd_t,
                              ctr: *const ::libc::c_void, ctrlen: size_t)
     -> gpg_error_t;
    pub fn gcry_cipher_get_algo_keylen(algo: ::libc::c_int) -> size_t;
    pub fn gcry_cipher_get_algo_blklen(algo: ::libc::c_int) -> size_t;
    pub fn gcry_pk_encrypt(result: *mut gcry_sexp_t, data: gcry_sexp_t,
                           pkey: gcry_sexp_t) -> gcry_error_t;
    pub fn gcry_pk_decrypt(result: *mut gcry_sexp_t, data: gcry_sexp_t,
                           skey: gcry_sexp_t) -> gcry_error_t;
    pub fn gcry_pk_sign(result: *mut gcry_sexp_t, data: gcry_sexp_t,
                        skey: gcry_sexp_t) -> gcry_error_t;
    pub fn gcry_pk_verify(sigval: gcry_sexp_t, data: gcry_sexp_t,
                          pkey: gcry_sexp_t) -> gcry_error_t;
    pub fn gcry_pk_testkey(key: gcry_sexp_t) -> gcry_error_t;
    pub fn gcry_pk_genkey(r_key: *mut gcry_sexp_t, s_parms: gcry_sexp_t)
     -> gcry_error_t;
    pub fn gcry_pk_ctl(cmd: ::libc::c_int, buffer: *mut ::libc::c_void,
                       buflen: size_t) -> gcry_error_t;
    pub fn gcry_pk_algo_info(algo: ::libc::c_int, what: ::libc::c_int,
                             buffer: *mut ::libc::c_void, nbytes: *mut size_t)
     -> gcry_error_t;
    pub fn gcry_pk_algo_name(algorithm: ::libc::c_int)
     -> *const ::libc::c_char;
    pub fn gcry_pk_map_name(name: *const ::libc::c_char) -> ::libc::c_int;
    pub fn gcry_pk_get_nbits(key: gcry_sexp_t) -> ::libc::c_uint;
    pub fn gcry_pk_get_keygrip(key: gcry_sexp_t, array: *mut ::libc::c_uchar)
     -> *mut ::libc::c_uchar;
    pub fn gcry_pk_get_curve(key: gcry_sexp_t, iterator: ::libc::c_int,
                             r_nbits: *mut ::libc::c_uint)
     -> *const ::libc::c_char;
    pub fn gcry_pk_get_param(algo: ::libc::c_int, name: *const ::libc::c_char)
     -> gcry_sexp_t;
    pub fn gcry_pubkey_get_sexp(r_sexp: *mut gcry_sexp_t, mode: ::libc::c_int,
                                ctx: gcry_ctx_t) -> gcry_error_t;
    pub fn gcry_md_open(h: *mut gcry_md_hd_t, algo: ::libc::c_int,
                        flags: ::libc::c_uint) -> gcry_error_t;
    pub fn gcry_md_close(hd: gcry_md_hd_t) -> ();
    pub fn gcry_md_enable(hd: gcry_md_hd_t, algo: ::libc::c_int)
     -> gcry_error_t;
    pub fn gcry_md_copy(bhd: *mut gcry_md_hd_t, ahd: gcry_md_hd_t)
     -> gcry_error_t;
    pub fn gcry_md_reset(hd: gcry_md_hd_t) -> ();
    pub fn gcry_md_ctl(hd: gcry_md_hd_t, cmd: ::libc::c_int,
                       buffer: *mut ::libc::c_void, buflen: size_t)
     -> gcry_error_t;
    pub fn gcry_md_write(hd: gcry_md_hd_t, buffer: *const ::libc::c_void,
                         length: size_t) -> ();
    pub fn gcry_md_read(hd: gcry_md_hd_t, algo: ::libc::c_int)
     -> *mut ::libc::c_uchar;
    pub fn gcry_md_hash_buffer(algo: ::libc::c_int,
                               digest: *mut ::libc::c_void,
                               buffer: *const ::libc::c_void, length: size_t)
     -> ();
    pub fn gcry_md_hash_buffers(algo: ::libc::c_int, flags: ::libc::c_uint,
                                digest: *mut ::libc::c_void,
                                iov: *const gcry_buffer_t,
                                iovcnt: ::libc::c_int) -> gpg_error_t;
    pub fn gcry_md_get_algo(hd: gcry_md_hd_t) -> ::libc::c_int;
    pub fn gcry_md_get_algo_dlen(algo: ::libc::c_int) -> ::libc::c_uint;
    pub fn gcry_md_is_enabled(a: gcry_md_hd_t, algo: ::libc::c_int)
     -> ::libc::c_int;
    pub fn gcry_md_is_secure(a: gcry_md_hd_t) -> ::libc::c_int;
    pub fn gcry_md_info(h: gcry_md_hd_t, what: ::libc::c_int,
                        buffer: *mut ::libc::c_void, nbytes: *mut size_t)
     -> gcry_error_t;
    pub fn gcry_md_algo_info(algo: ::libc::c_int, what: ::libc::c_int,
                             buffer: *mut ::libc::c_void, nbytes: *mut size_t)
     -> gcry_error_t;
    pub fn gcry_md_algo_name(algo: ::libc::c_int) -> *const ::libc::c_char;
    pub fn gcry_md_map_name(name: *const ::libc::c_char) -> ::libc::c_int;
    pub fn gcry_md_setkey(hd: gcry_md_hd_t, key: *const ::libc::c_void,
                          keylen: size_t) -> gcry_error_t;
    pub fn gcry_md_debug(hd: gcry_md_hd_t, suffix: *const ::libc::c_char)
     -> ();
    pub fn gcry_mac_open(handle: *mut gcry_mac_hd_t, algo: ::libc::c_int,
                         flags: ::libc::c_uint, ctx: gcry_ctx_t)
     -> gcry_error_t;
    pub fn gcry_mac_close(h: gcry_mac_hd_t) -> ();
    pub fn gcry_mac_ctl(h: gcry_mac_hd_t, cmd: ::libc::c_int,
                        buffer: *mut ::libc::c_void, buflen: size_t)
     -> gcry_error_t;
    pub fn gcry_mac_algo_info(algo: ::libc::c_int, what: ::libc::c_int,
                              buffer: *mut ::libc::c_void,
                              nbytes: *mut size_t) -> gcry_error_t;
    pub fn gcry_mac_setkey(hd: gcry_mac_hd_t, key: *const ::libc::c_void,
                           keylen: size_t) -> gcry_error_t;
    pub fn gcry_mac_setiv(hd: gcry_mac_hd_t, iv: *const ::libc::c_void,
                          ivlen: size_t) -> gcry_error_t;
    pub fn gcry_mac_write(hd: gcry_mac_hd_t, buffer: *const ::libc::c_void,
                          length: size_t) -> gcry_error_t;
    pub fn gcry_mac_read(hd: gcry_mac_hd_t, buffer: *mut ::libc::c_void,
                         buflen: *mut size_t) -> gcry_error_t;
    pub fn gcry_mac_verify(hd: gcry_mac_hd_t, buffer: *const ::libc::c_void,
                           buflen: size_t) -> gcry_error_t;
    pub fn gcry_mac_get_algo_maclen(algo: ::libc::c_int) -> ::libc::c_uint;
    pub fn gcry_mac_get_algo_keylen(algo: ::libc::c_int) -> ::libc::c_uint;
    pub fn gcry_mac_algo_name(algorithm: ::libc::c_int)
     -> *const ::libc::c_char;
    pub fn gcry_mac_map_name(name: *const ::libc::c_char) -> ::libc::c_int;
    pub fn gcry_kdf_derive(passphrase: *const ::libc::c_void,
                           passphraselen: size_t, algo: ::libc::c_int,
                           subalgo: ::libc::c_int,
                           salt: *const ::libc::c_void, saltlen: size_t,
                           iterations: ::libc::c_ulong, keysize: size_t,
                           keybuffer: *mut ::libc::c_void) -> gpg_error_t;
    pub fn gcry_randomize(buffer: *mut ::libc::c_void, length: size_t,
                          level: Enum_gcry_random_level) -> ();
    pub fn gcry_random_add_bytes(buffer: *const ::libc::c_void,
                                 length: size_t, quality: ::libc::c_int)
     -> gcry_error_t;
    pub fn gcry_random_bytes(nbytes: size_t, level: Enum_gcry_random_level)
     -> *mut ::libc::c_void;
    pub fn gcry_random_bytes_secure(nbytes: size_t,
                                    level: Enum_gcry_random_level)
     -> *mut ::libc::c_void;
    pub fn gcry_mpi_randomize(w: gcry_mpi_t, nbits: ::libc::c_uint,
                              level: Enum_gcry_random_level) -> ();
    pub fn gcry_create_nonce(buffer: *mut ::libc::c_void, length: size_t)
     -> ();
    pub fn gcry_prime_generate(prime: *mut gcry_mpi_t,
                               prime_bits: ::libc::c_uint,
                               factor_bits: ::libc::c_uint,
                               factors: *mut *mut gcry_mpi_t,
                               cb_func: gcry_prime_check_func_t,
                               cb_arg: *mut ::libc::c_void,
                               random_level: gcry_random_level_t,
                               flags: ::libc::c_uint) -> gcry_error_t;
    pub fn gcry_prime_group_generator(r_g: *mut gcry_mpi_t, prime: gcry_mpi_t,
                                      factors: *mut gcry_mpi_t,
                                      start_g: gcry_mpi_t) -> gcry_error_t;
    pub fn gcry_prime_release_factors(factors: *mut gcry_mpi_t) -> ();
    pub fn gcry_prime_check(x: gcry_mpi_t, flags: ::libc::c_uint)
     -> gcry_error_t;
    pub fn gcry_ctx_release(ctx: gcry_ctx_t) -> ();
    pub fn gcry_log_debug(fmt: *const ::libc::c_char, ...) -> ();
    pub fn gcry_log_debughex(text: *const ::libc::c_char,
                             buffer: *const ::libc::c_void, length: size_t)
     -> ();
    pub fn gcry_log_debugmpi(text: *const ::libc::c_char, mpi: gcry_mpi_t)
     -> ();
    pub fn gcry_log_debugpnt(text: *const ::libc::c_char,
                             point: gcry_mpi_point_t, ctx: gcry_ctx_t) -> ();
    pub fn gcry_log_debugsxp(text: *const ::libc::c_char, sexp: gcry_sexp_t)
     -> ();
    pub fn gcry_set_progress_handler(cb: gcry_handler_progress_t,
                                     cb_data: *mut ::libc::c_void) -> ();
    pub fn gcry_set_allocation_handler(func_alloc: gcry_handler_alloc_t,
                                       func_alloc_secure:
                                           gcry_handler_alloc_t,
                                       func_secure_check:
                                           gcry_handler_secure_check_t,
                                       func_realloc: gcry_handler_realloc_t,
                                       func_free: gcry_handler_free_t) -> ();
    pub fn gcry_set_outofcore_handler(h: gcry_handler_no_mem_t,
                                      opaque: *mut ::libc::c_void) -> ();
    pub fn gcry_set_fatalerror_handler(fnc: gcry_handler_error_t,
                                       opaque: *mut ::libc::c_void) -> ();
    pub fn gcry_set_log_handler(f: gcry_handler_log_t,
                                opaque: *mut ::libc::c_void) -> ();
    pub fn gcry_set_gettext_handler(f:
                                        ::std::option::Option<extern "C" fn
                                                                  (arg1:
                                                                       *const ::libc::c_char)
                                                                  ->
                                                                      *const ::libc::c_char>)
     -> ();
    pub fn gcry_malloc(n: size_t) -> *mut ::libc::c_void;
    pub fn gcry_calloc(n: size_t, m: size_t) -> *mut ::libc::c_void;
    pub fn gcry_malloc_secure(n: size_t) -> *mut ::libc::c_void;
    pub fn gcry_calloc_secure(n: size_t, m: size_t) -> *mut ::libc::c_void;
    pub fn gcry_realloc(a: *mut ::libc::c_void, n: size_t)
     -> *mut ::libc::c_void;
    pub fn gcry_strdup(string: *const ::libc::c_char) -> *mut ::libc::c_char;
    pub fn gcry_xmalloc(n: size_t) -> *mut ::libc::c_void;
    pub fn gcry_xcalloc(n: size_t, m: size_t) -> *mut ::libc::c_void;
    pub fn gcry_xmalloc_secure(n: size_t) -> *mut ::libc::c_void;
    pub fn gcry_xcalloc_secure(n: size_t, m: size_t) -> *mut ::libc::c_void;
    pub fn gcry_xrealloc(a: *mut ::libc::c_void, n: size_t)
     -> *mut ::libc::c_void;
    pub fn gcry_xstrdup(a: *const ::libc::c_char) -> *mut ::libc::c_char;
    pub fn gcry_free(a: *mut ::libc::c_void) -> ();
    pub fn gcry_is_secure(a: *const ::libc::c_void) -> ::libc::c_int;
    pub fn GNUNET_CRYPTO_seed_weak_random(seed: int32_t) -> ();
    pub fn GNUNET_CRYPTO_crc16_step(sum: uint32_t, buf: *const ::libc::c_void,
                                    len: size_t) -> uint32_t;
    pub fn GNUNET_CRYPTO_crc16_finish(sum: uint32_t) -> uint16_t;
    pub fn GNUNET_CRYPTO_crc16_n(buf: *const ::libc::c_void, len: size_t)
     -> uint16_t;
    pub fn GNUNET_CRYPTO_crc32_n(buf: *const ::libc::c_void, len: size_t)
     -> int32_t;
    pub fn GNUNET_CRYPTO_random_block(mode: Enum_GNUNET_CRYPTO_Quality,
                                      buffer: *mut ::libc::c_void,
                                      length: size_t) -> ();
    pub fn GNUNET_CRYPTO_random_u32(mode: Enum_GNUNET_CRYPTO_Quality,
                                    i: uint32_t) -> uint32_t;
    pub fn GNUNET_CRYPTO_random_u64(mode: Enum_GNUNET_CRYPTO_Quality,
                                    max: uint64_t) -> uint64_t;
    pub fn GNUNET_CRYPTO_random_permute(mode: Enum_GNUNET_CRYPTO_Quality,
                                        n: ::libc::c_uint)
     -> *mut ::libc::c_uint;
    pub fn GNUNET_CRYPTO_symmetric_create_session_key(key:
                                                          *mut Struct_GNUNET_CRYPTO_SymmetricSessionKey)
     -> ();
    pub fn GNUNET_CRYPTO_symmetric_encrypt(block: *const ::libc::c_void,
                                           size: size_t,
                                           sessionkey:
                                               *const Struct_GNUNET_CRYPTO_SymmetricSessionKey,
                                           iv:
                                               *const Struct_GNUNET_CRYPTO_SymmetricInitializationVector,
                                           result: *mut ::libc::c_void)
     -> ssize_t;
    pub fn GNUNET_CRYPTO_symmetric_decrypt(block: *const ::libc::c_void,
                                           size: size_t,
                                           sessionkey:
                                               *const Struct_GNUNET_CRYPTO_SymmetricSessionKey,
                                           iv:
                                               *const Struct_GNUNET_CRYPTO_SymmetricInitializationVector,
                                           result: *mut ::libc::c_void)
     -> ssize_t;
    pub fn GNUNET_CRYPTO_symmetric_derive_iv(iv:
                                                 *mut Struct_GNUNET_CRYPTO_SymmetricInitializationVector,
                                             skey:
                                                 *const Struct_GNUNET_CRYPTO_SymmetricSessionKey,
                                             salt: *const ::libc::c_void,
                                             salt_len: size_t, ...) -> ();
    pub fn GNUNET_CRYPTO_symmetric_derive_iv_v(iv:
                                                   *mut Struct_GNUNET_CRYPTO_SymmetricInitializationVector,
                                               skey:
                                                   *const Struct_GNUNET_CRYPTO_SymmetricSessionKey,
                                               salt: *const ::libc::c_void,
                                               salt_len: size_t,
                                               argp: va_list) -> ();
    pub fn GNUNET_CRYPTO_hash_to_enc(block: *const Struct_GNUNET_HashCode,
                                     result:
                                         *mut Struct_GNUNET_CRYPTO_HashAsciiEncoded)
     -> ();
    pub fn GNUNET_CRYPTO_hash_from_string2(enc: *const ::libc::c_char,
                                           enclen: size_t,
                                           result:
                                               *mut Struct_GNUNET_HashCode)
     -> ::libc::c_int;
    pub fn GNUNET_CRYPTO_hash_distance_u32(a: *const Struct_GNUNET_HashCode,
                                           b: *const Struct_GNUNET_HashCode)
     -> uint32_t;
    pub fn GNUNET_CRYPTO_hash(block: *const ::libc::c_void, size: size_t,
                              ret: *mut Struct_GNUNET_HashCode) -> ();
    pub fn GNUNET_CRYPTO_hash_context_start()
     -> *mut Struct_GNUNET_HashContext;
    pub fn GNUNET_CRYPTO_hash_context_read(hc: *mut Struct_GNUNET_HashContext,
                                           buf: *const ::libc::c_void,
                                           size: size_t) -> ();
    pub fn GNUNET_CRYPTO_hash_context_finish(hc:
                                                 *mut Struct_GNUNET_HashContext,
                                             r_hash:
                                                 *mut Struct_GNUNET_HashCode)
     -> ();
    pub fn GNUNET_CRYPTO_hash_context_abort(hc:
                                                *mut Struct_GNUNET_HashContext)
     -> ();
    pub fn GNUNET_CRYPTO_hmac(key: *const Struct_GNUNET_CRYPTO_AuthKey,
                              plaintext: *const ::libc::c_void,
                              plaintext_len: size_t,
                              hmac: *mut Struct_GNUNET_HashCode) -> ();
    pub fn GNUNET_CRYPTO_hash_file(priority: Enum_GNUNET_SCHEDULER_Priority,
                                   filename: *const ::libc::c_char,
                                   blocksize: size_t,
                                   callback:
                                       GNUNET_CRYPTO_HashCompletedCallback,
                                   callback_cls: *mut ::libc::c_void)
     -> *mut Struct_GNUNET_CRYPTO_FileHashContext;
    pub fn GNUNET_CRYPTO_hash_file_cancel(fhc:
                                              *mut Struct_GNUNET_CRYPTO_FileHashContext)
     -> ();
    pub fn GNUNET_CRYPTO_hash_create_random(mode: Enum_GNUNET_CRYPTO_Quality,
                                            result:
                                                *mut Struct_GNUNET_HashCode)
     -> ();
    pub fn GNUNET_CRYPTO_hash_difference(a: *const Struct_GNUNET_HashCode,
                                         b: *const Struct_GNUNET_HashCode,
                                         result: *mut Struct_GNUNET_HashCode)
     -> ();
    pub fn GNUNET_CRYPTO_hash_sum(a: *const Struct_GNUNET_HashCode,
                                  delta: *const Struct_GNUNET_HashCode,
                                  result: *mut Struct_GNUNET_HashCode) -> ();
    pub fn GNUNET_CRYPTO_hash_xor(a: *const Struct_GNUNET_HashCode,
                                  b: *const Struct_GNUNET_HashCode,
                                  result: *mut Struct_GNUNET_HashCode) -> ();
    pub fn GNUNET_CRYPTO_hash_to_aes_key(hc: *const Struct_GNUNET_HashCode,
                                         skey:
                                             *mut Struct_GNUNET_CRYPTO_SymmetricSessionKey,
                                         iv:
                                             *mut Struct_GNUNET_CRYPTO_SymmetricInitializationVector)
     -> ();
    pub fn GNUNET_CRYPTO_hash_get_bit(code: *const Struct_GNUNET_HashCode,
                                      bit: ::libc::c_uint) -> ::libc::c_int;
    pub fn GNUNET_CRYPTO_hash_matching_bits(first:
                                                *const Struct_GNUNET_HashCode,
                                            second:
                                                *const Struct_GNUNET_HashCode)
     -> ::libc::c_uint;
    pub fn GNUNET_CRYPTO_hash_cmp(h1: *const Struct_GNUNET_HashCode,
                                  h2: *const Struct_GNUNET_HashCode)
     -> ::libc::c_int;
    pub fn GNUNET_CRYPTO_hash_xorcmp(h1: *const Struct_GNUNET_HashCode,
                                     h2: *const Struct_GNUNET_HashCode,
                                     target: *const Struct_GNUNET_HashCode)
     -> ::libc::c_int;
    pub fn GNUNET_CRYPTO_hmac_derive_key_v(key:
                                               *mut Struct_GNUNET_CRYPTO_AuthKey,
                                           rkey:
                                               *const Struct_GNUNET_CRYPTO_SymmetricSessionKey,
                                           salt: *const ::libc::c_void,
                                           salt_len: size_t, argp: va_list)
     -> ();
    pub fn GNUNET_CRYPTO_hmac_derive_key(key:
                                             *mut Struct_GNUNET_CRYPTO_AuthKey,
                                         rkey:
                                             *const Struct_GNUNET_CRYPTO_SymmetricSessionKey,
                                         salt: *const ::libc::c_void,
                                         salt_len: size_t, ...) -> ();
    pub fn GNUNET_CRYPTO_hkdf(result: *mut ::libc::c_void, out_len: size_t,
                              xtr_algo: ::libc::c_int,
                              prf_algo: ::libc::c_int,
                              xts: *const ::libc::c_void, xts_len: size_t,
                              skm: *const ::libc::c_void,
                              skm_len: size_t, ...) -> ::libc::c_int;
    pub fn GNUNET_CRYPTO_hkdf_v(result: *mut ::libc::c_void, out_len: size_t,
                                xtr_algo: ::libc::c_int,
                                prf_algo: ::libc::c_int,
                                xts: *const ::libc::c_void, xts_len: size_t,
                                skm: *const ::libc::c_void, skm_len: size_t,
                                argp: va_list) -> ::libc::c_int;
    pub fn GNUNET_CRYPTO_kdf_v(result: *mut ::libc::c_void, out_len: size_t,
                               xts: *const ::libc::c_void, xts_len: size_t,
                               skm: *const ::libc::c_void, skm_len: size_t,
                               argp: va_list) -> ::libc::c_int;
    pub fn GNUNET_CRYPTO_kdf(result: *mut ::libc::c_void, out_len: size_t,
                             xts: *const ::libc::c_void, xts_len: size_t,
                             skm: *const ::libc::c_void, skm_len: size_t, ...)
     -> ::libc::c_int;
    pub fn GNUNET_CRYPTO_ecdsa_key_get_public(_priv:
                                                  *const Struct_GNUNET_CRYPTO_EcdsaPrivateKey,
                                              _pub:
                                                  *mut Struct_GNUNET_CRYPTO_EcdsaPublicKey)
     -> ();
    pub fn GNUNET_CRYPTO_eddsa_key_get_public(_priv:
                                                  *const Struct_GNUNET_CRYPTO_EddsaPrivateKey,
                                              _pub:
                                                  *mut Struct_GNUNET_CRYPTO_EddsaPublicKey)
     -> ();
    pub fn GNUNET_CRYPTO_ecdhe_key_get_public(_priv:
                                                  *const Struct_GNUNET_CRYPTO_EcdhePrivateKey,
                                              _pub:
                                                  *mut Struct_GNUNET_CRYPTO_EcdhePublicKey)
     -> ();
    pub fn GNUNET_CRYPTO_ecdsa_public_key_to_string(_pub:
                                                        *const Struct_GNUNET_CRYPTO_EcdsaPublicKey)
     -> *mut ::libc::c_char;
    pub fn GNUNET_CRYPTO_eddsa_public_key_to_string(_pub:
                                                        *const Struct_GNUNET_CRYPTO_EddsaPublicKey)
     -> *mut ::libc::c_char;
    pub fn GNUNET_CRYPTO_ecdsa_public_key_from_string(enc:
                                                          *const ::libc::c_char,
                                                      enclen: size_t,
                                                      _pub:
                                                          *mut Struct_GNUNET_CRYPTO_EcdsaPublicKey)
     -> ::libc::c_int;
    pub fn GNUNET_CRYPTO_eddsa_public_key_from_string(enc:
                                                          *const ::libc::c_char,
                                                      enclen: size_t,
                                                      _pub:
                                                          *mut Struct_GNUNET_CRYPTO_EddsaPublicKey)
     -> ::libc::c_int;
    pub fn GNUNET_CRYPTO_ecdsa_key_create_from_file(filename:
                                                        *const ::libc::c_char)
     -> *mut Struct_GNUNET_CRYPTO_EcdsaPrivateKey;
    pub fn GNUNET_CRYPTO_eddsa_key_create_from_file(filename:
                                                        *const ::libc::c_char)
     -> *mut Struct_GNUNET_CRYPTO_EddsaPrivateKey;
    pub fn GNUNET_CRYPTO_eddsa_key_create_from_configuration(cfg:
                                                                 *const Struct_GNUNET_CONFIGURATION_Handle)
     -> *mut Struct_GNUNET_CRYPTO_EddsaPrivateKey;
    pub fn GNUNET_CRYPTO_ecdsa_key_create()
     -> *mut Struct_GNUNET_CRYPTO_EcdsaPrivateKey;
    pub fn GNUNET_CRYPTO_eddsa_key_create()
     -> *mut Struct_GNUNET_CRYPTO_EddsaPrivateKey;
    pub fn GNUNET_CRYPTO_ecdhe_key_create()
     -> *mut Struct_GNUNET_CRYPTO_EcdhePrivateKey;
    pub fn GNUNET_CRYPTO_eddsa_key_clear(pk:
                                             *mut Struct_GNUNET_CRYPTO_EddsaPrivateKey)
     -> ();
    pub fn GNUNET_CRYPTO_ecdsa_key_clear(pk:
                                             *mut Struct_GNUNET_CRYPTO_EcdsaPrivateKey)
     -> ();
    pub fn GNUNET_CRYPTO_ecdhe_key_clear(pk:
                                             *mut Struct_GNUNET_CRYPTO_EcdhePrivateKey)
     -> ();
    pub fn GNUNET_CRYPTO_ecdsa_key_get_anonymous()
     -> *const Struct_GNUNET_CRYPTO_EcdsaPrivateKey;
    pub fn GNUNET_CRYPTO_eddsa_setup_hostkey(cfg_name: *const ::libc::c_char)
     -> ();
    pub fn GNUNET_CRYPTO_get_peer_identity(cfg:
                                               *const Struct_GNUNET_CONFIGURATION_Handle,
                                           dst:
                                               *mut Struct_GNUNET_PeerIdentity)
     -> ::libc::c_int;
    pub fn GNUNET_CRYPTO_cmp_peer_identity(first:
                                               *const Struct_GNUNET_PeerIdentity,
                                           second:
                                               *const Struct_GNUNET_PeerIdentity)
     -> ::libc::c_int;
    pub fn GNUNET_CRYPTO_ecc_ecdh(_priv:
                                      *const Struct_GNUNET_CRYPTO_EcdhePrivateKey,
                                  _pub:
                                      *const Struct_GNUNET_CRYPTO_EcdhePublicKey,
                                  key_material: *mut Struct_GNUNET_HashCode)
     -> ::libc::c_int;
    pub fn GNUNET_CRYPTO_eddsa_sign(_priv:
                                        *const Struct_GNUNET_CRYPTO_EddsaPrivateKey,
                                    purpose:
                                        *const Struct_GNUNET_CRYPTO_EccSignaturePurpose,
                                    sig:
                                        *mut Struct_GNUNET_CRYPTO_EddsaSignature)
     -> ::libc::c_int;
    pub fn GNUNET_CRYPTO_ecdsa_sign(_priv:
                                        *const Struct_GNUNET_CRYPTO_EcdsaPrivateKey,
                                    purpose:
                                        *const Struct_GNUNET_CRYPTO_EccSignaturePurpose,
                                    sig:
                                        *mut Struct_GNUNET_CRYPTO_EcdsaSignature)
     -> ::libc::c_int;
    pub fn GNUNET_CRYPTO_eddsa_verify(purpose: uint32_t,
                                      validate:
                                          *const Struct_GNUNET_CRYPTO_EccSignaturePurpose,
                                      sig:
                                          *const Struct_GNUNET_CRYPTO_EddsaSignature,
                                      _pub:
                                          *const Struct_GNUNET_CRYPTO_EddsaPublicKey)
     -> ::libc::c_int;
    pub fn GNUNET_CRYPTO_ecdsa_verify(purpose: uint32_t,
                                      validate:
                                          *const Struct_GNUNET_CRYPTO_EccSignaturePurpose,
                                      sig:
                                          *const Struct_GNUNET_CRYPTO_EcdsaSignature,
                                      _pub:
                                          *const Struct_GNUNET_CRYPTO_EcdsaPublicKey)
     -> ::libc::c_int;
    pub fn GNUNET_CRYPTO_ecdsa_private_key_derive(_priv:
                                                      *const Struct_GNUNET_CRYPTO_EcdsaPrivateKey,
                                                  label:
                                                      *const ::libc::c_char,
                                                  context:
                                                      *const ::libc::c_char)
     -> *mut Struct_GNUNET_CRYPTO_EcdsaPrivateKey;
    pub fn GNUNET_CRYPTO_ecdsa_public_key_derive(_pub:
                                                     *const Struct_GNUNET_CRYPTO_EcdsaPublicKey,
                                                 label: *const ::libc::c_char,
                                                 context:
                                                     *const ::libc::c_char,
                                                 result:
                                                     *mut Struct_GNUNET_CRYPTO_EcdsaPublicKey)
     -> ();
    pub fn GNUNET_CRYPTO_mpi_print_unsigned(buf: *mut ::libc::c_void,
                                            size: size_t, val: gcry_mpi_t)
     -> ();
    pub fn GNUNET_CRYPTO_mpi_scan_unsigned(result: *mut gcry_mpi_t,
                                           data: *const ::libc::c_void,
                                           size: size_t) -> ();
    pub fn GNUNET_CRYPTO_paillier_create(public_key:
                                             *mut Struct_GNUNET_CRYPTO_PaillierPublicKey,
                                         private_key:
                                             *mut Struct_GNUNET_CRYPTO_PaillierPrivateKey)
     -> ();
    pub fn GNUNET_CRYPTO_paillier_encrypt(public_key:
                                              *const Struct_GNUNET_CRYPTO_PaillierPublicKey,
                                          m: gcry_mpi_t,
                                          desired_ops: ::libc::c_int,
                                          ciphertext:
                                              *mut Struct_GNUNET_CRYPTO_PaillierCiphertext)
     -> ::libc::c_int;
    pub fn GNUNET_CRYPTO_paillier_decrypt(private_key:
                                              *const Struct_GNUNET_CRYPTO_PaillierPrivateKey,
                                          public_key:
                                              *const Struct_GNUNET_CRYPTO_PaillierPublicKey,
                                          ciphertext:
                                              *const Struct_GNUNET_CRYPTO_PaillierCiphertext,
                                          m: gcry_mpi_t) -> ();
    pub fn GNUNET_CRYPTO_paillier_hom_add(public_key:
                                              *const Struct_GNUNET_CRYPTO_PaillierPublicKey,
                                          c1:
                                              *const Struct_GNUNET_CRYPTO_PaillierCiphertext,
                                          c2:
                                              *const Struct_GNUNET_CRYPTO_PaillierCiphertext,
                                          result:
                                              *mut Struct_GNUNET_CRYPTO_PaillierCiphertext)
     -> ::libc::c_int;
    pub fn GNUNET_CRYPTO_paillier_hom_get_remaining(c:
                                                        *const Struct_GNUNET_CRYPTO_PaillierCiphertext)
     -> ::libc::c_int;
    pub fn GNUNET_CRYPTO_rsa_private_key_create(len: ::libc::c_uint)
     -> *mut Struct_GNUNET_CRYPTO_rsa_PrivateKey;
    pub fn GNUNET_CRYPTO_rsa_private_key_free(key:
                                                  *mut Struct_GNUNET_CRYPTO_rsa_PrivateKey)
     -> ();
    pub fn GNUNET_CRYPTO_rsa_private_key_encode(key:
                                                    *const Struct_GNUNET_CRYPTO_rsa_PrivateKey,
                                                buffer:
                                                    *mut *mut ::libc::c_char)
     -> size_t;
    pub fn GNUNET_CRYPTO_rsa_private_key_decode(buf: *const ::libc::c_char,
                                                len: size_t)
     -> *mut Struct_GNUNET_CRYPTO_rsa_PrivateKey;
    pub fn GNUNET_CRYPTO_rsa_private_key_get_public(_priv:
                                                        *const Struct_GNUNET_CRYPTO_rsa_PrivateKey)
     -> *mut Struct_GNUNET_CRYPTO_rsa_PublicKey;
    pub fn GNUNET_CRYPTO_rsa_public_key_free(key:
                                                 *mut Struct_GNUNET_CRYPTO_rsa_PublicKey)
     -> ();
    pub fn GNUNET_CRYPTO_rsa_public_key_encode(key:
                                                   *const Struct_GNUNET_CRYPTO_rsa_PublicKey,
                                               buffer:
                                                   *mut *mut ::libc::c_char)
     -> size_t;
    pub fn GNUNET_CRYPTO_rsa_public_key_decode(buf: *const ::libc::c_char,
                                               len: size_t)
     -> *mut Struct_GNUNET_CRYPTO_rsa_PublicKey;
    pub fn GNUNET_CRYPTO_rsa_blinding_key_create(len: ::libc::c_uint)
     -> *mut Struct_GNUNET_CRYPTO_rsa_BlindingKey;
    pub fn GNUNET_CRYPTO_rsa_blinding_key_free(bkey:
                                                   *mut Struct_GNUNET_CRYPTO_rsa_BlindingKey)
     -> ();
    pub fn GNUNET_CRYPTO_rsa_blinding_key_encode(bkey:
                                                     *const Struct_GNUNET_CRYPTO_rsa_BlindingKey,
                                                 buffer:
                                                     *mut *mut ::libc::c_char)
     -> size_t;
    pub fn GNUNET_CRYPTO_rsa_blinding_key_decode(buf: *const ::libc::c_char,
                                                 len: size_t)
     -> *mut Struct_GNUNET_CRYPTO_rsa_BlindingKey;
    pub fn GNUNET_CRYPTO_rsa_blind(hash: *const Struct_GNUNET_HashCode,
                                   bkey:
                                       *mut Struct_GNUNET_CRYPTO_rsa_BlindingKey,
                                   pkey:
                                       *mut Struct_GNUNET_CRYPTO_rsa_PublicKey,
                                   buffer: *mut *mut ::libc::c_char)
     -> size_t;
    pub fn GNUNET_CRYPTO_rsa_sign(key:
                                      *const Struct_GNUNET_CRYPTO_rsa_PrivateKey,
                                  msg: *const ::libc::c_void, msg_len: size_t)
     -> *mut Struct_GNUNET_CRYPTO_rsa_Signature;
    pub fn GNUNET_CRYPTO_rsa_signature_free(sig:
                                                *mut Struct_GNUNET_CRYPTO_rsa_Signature)
     -> ();
    pub fn GNUNET_CRYPTO_rsa_signature_encode(sig:
                                                  *const Struct_GNUNET_CRYPTO_rsa_Signature,
                                              buffer:
                                                  *mut *mut ::libc::c_char)
     -> size_t;
    pub fn GNUNET_CRYPTO_rsa_signature_decode(buf: *const ::libc::c_char,
                                              len: size_t)
     -> *mut Struct_GNUNET_CRYPTO_rsa_Signature;
    pub fn GNUNET_CRYPTO_rsa_unblind(sig:
                                         *mut Struct_GNUNET_CRYPTO_rsa_Signature,
                                     bkey:
                                         *mut Struct_GNUNET_CRYPTO_rsa_BlindingKey,
                                     pkey:
                                         *mut Struct_GNUNET_CRYPTO_rsa_PublicKey)
     -> *mut Struct_GNUNET_CRYPTO_rsa_Signature;
    pub fn GNUNET_CRYPTO_rsa_verify(hash: *const Struct_GNUNET_HashCode,
                                    sig:
                                        *const Struct_GNUNET_CRYPTO_rsa_Signature,
                                    public_key:
                                        *const Struct_GNUNET_CRYPTO_rsa_PublicKey)
     -> ::libc::c_int;
    pub fn GNUNET_BANDWIDTH_value_init(bytes_per_second: uint32_t)
     -> Struct_GNUNET_BANDWIDTH_Value32NBO;
    pub fn GNUNET_BANDWIDTH_value_get_available_until(bps:
                                                          Struct_GNUNET_BANDWIDTH_Value32NBO,
                                                      deadline:
                                                          Struct_GNUNET_TIME_Relative)
     -> uint64_t;
    pub fn GNUNET_BANDWIDTH_value_get_delay_for(bps:
                                                    Struct_GNUNET_BANDWIDTH_Value32NBO,
                                                size: uint64_t)
     -> Struct_GNUNET_TIME_Relative;
    pub fn GNUNET_BANDWIDTH_value_min(b1: Struct_GNUNET_BANDWIDTH_Value32NBO,
                                      b2: Struct_GNUNET_BANDWIDTH_Value32NBO)
     -> Struct_GNUNET_BANDWIDTH_Value32NBO;
    pub fn GNUNET_BANDWIDTH_tracker_init(av:
                                             *mut Struct_GNUNET_BANDWIDTH_Tracker,
                                         update_cb:
                                             GNUNET_BANDWIDTH_TrackerUpdateCallback,
                                         update_cb_cls: *mut ::libc::c_void,
                                         bytes_per_second_limit:
                                             Struct_GNUNET_BANDWIDTH_Value32NBO,
                                         max_carry_s: uint32_t) -> ();
    pub fn GNUNET_BANDWIDTH_tracker_init2(av:
                                              *mut Struct_GNUNET_BANDWIDTH_Tracker,
                                          update_cb:
                                              GNUNET_BANDWIDTH_TrackerUpdateCallback,
                                          update_cb_cls: *mut ::libc::c_void,
                                          bytes_per_second_limit:
                                              Struct_GNUNET_BANDWIDTH_Value32NBO,
                                          max_carry_s: uint32_t,
                                          excess_cb:
                                              GNUNET_BANDWIDTH_ExcessNotificationCallback,
                                          excess_cb_cls: *mut ::libc::c_void)
     -> ();
    pub fn GNUNET_BANDWIDTH_tracker_notification_stop(av:
                                                          *mut Struct_GNUNET_BANDWIDTH_Tracker)
     -> ();
    pub fn GNUNET_BANDWIDTH_tracker_consume(av:
                                                *mut Struct_GNUNET_BANDWIDTH_Tracker,
                                            size: ssize_t) -> ::libc::c_int;
    pub fn GNUNET_BANDWIDTH_tracker_get_delay(av:
                                                  *mut Struct_GNUNET_BANDWIDTH_Tracker,
                                              size: size_t)
     -> Struct_GNUNET_TIME_Relative;
    pub fn GNUNET_BANDWIDTH_tracker_get_available(av:
                                                      *mut Struct_GNUNET_BANDWIDTH_Tracker)
     -> int64_t;
    pub fn GNUNET_BANDWIDTH_tracker_update_quota(av:
                                                     *mut Struct_GNUNET_BANDWIDTH_Tracker,
                                                 bytes_per_second_limit:
                                                     Struct_GNUNET_BANDWIDTH_Value32NBO)
     -> ();
    pub fn EXTRACTOR_metatype_to_string(_type: Enum_EXTRACTOR_MetaType)
     -> *const ::libc::c_char;
    pub fn EXTRACTOR_metatype_to_description(_type: Enum_EXTRACTOR_MetaType)
     -> *const ::libc::c_char;
    pub fn EXTRACTOR_metatype_get_max() -> Enum_EXTRACTOR_MetaType;
    pub fn EXTRACTOR_plugin_add_defaults(flags: Enum_EXTRACTOR_Options)
     -> *mut Struct_EXTRACTOR_PluginList;
    pub fn EXTRACTOR_plugin_add(prev: *mut Struct_EXTRACTOR_PluginList,
                                library: *const ::libc::c_char,
                                options: *const ::libc::c_char,
                                flags: Enum_EXTRACTOR_Options)
     -> *mut Struct_EXTRACTOR_PluginList;
    pub fn EXTRACTOR_plugin_add_config(prev: *mut Struct_EXTRACTOR_PluginList,
                                       config: *const ::libc::c_char,
                                       flags: Enum_EXTRACTOR_Options)
     -> *mut Struct_EXTRACTOR_PluginList;
    pub fn EXTRACTOR_plugin_remove(prev: *mut Struct_EXTRACTOR_PluginList,
                                   library: *const ::libc::c_char)
     -> *mut Struct_EXTRACTOR_PluginList;
    pub fn EXTRACTOR_plugin_remove_all(plugins:
                                           *mut Struct_EXTRACTOR_PluginList)
     -> ();
    pub fn EXTRACTOR_extract(plugins: *mut Struct_EXTRACTOR_PluginList,
                             filename: *const ::libc::c_char,
                             data: *const ::libc::c_void, size: size_t,
                             _proc: EXTRACTOR_MetaDataProcessor,
                             proc_cls: *mut ::libc::c_void) -> ();
    pub fn EXTRACTOR_meta_data_print(handle: *mut ::libc::c_void,
                                     plugin_name: *const ::libc::c_char,
                                     _type: Enum_EXTRACTOR_MetaType,
                                     format: Enum_EXTRACTOR_MetaFormat,
                                     data_mime_type: *const ::libc::c_char,
                                     data: *const ::libc::c_char,
                                     data_len: size_t) -> ::libc::c_int;
    pub fn GNUNET_CONTAINER_bloomfilter_load(filename: *const ::libc::c_char,
                                             size: size_t, k: ::libc::c_uint)
     -> *mut Struct_GNUNET_CONTAINER_BloomFilter;
    pub fn GNUNET_CONTAINER_bloomfilter_init(data: *const ::libc::c_char,
                                             size: size_t, k: ::libc::c_uint)
     -> *mut Struct_GNUNET_CONTAINER_BloomFilter;
    pub fn GNUNET_CONTAINER_bloomfilter_get_raw_data(bf:
                                                         *const Struct_GNUNET_CONTAINER_BloomFilter,
                                                     data:
                                                         *mut ::libc::c_char,
                                                     size: size_t)
     -> ::libc::c_int;
    pub fn GNUNET_CONTAINER_bloomfilter_test(bf:
                                                 *const Struct_GNUNET_CONTAINER_BloomFilter,
                                             e: *const Struct_GNUNET_HashCode)
     -> ::libc::c_int;
    pub fn GNUNET_CONTAINER_bloomfilter_add(bf:
                                                *mut Struct_GNUNET_CONTAINER_BloomFilter,
                                            e: *const Struct_GNUNET_HashCode)
     -> ();
    pub fn GNUNET_CONTAINER_bloomfilter_remove(bf:
                                                   *mut Struct_GNUNET_CONTAINER_BloomFilter,
                                               e:
                                                   *const Struct_GNUNET_HashCode)
     -> ();
    pub fn GNUNET_CONTAINER_bloomfilter_copy(bf:
                                                 *const Struct_GNUNET_CONTAINER_BloomFilter)
     -> *mut Struct_GNUNET_CONTAINER_BloomFilter;
    pub fn GNUNET_CONTAINER_bloomfilter_free(bf:
                                                 *mut Struct_GNUNET_CONTAINER_BloomFilter)
     -> ();
    pub fn GNUNET_CONTAINER_bloomfilter_get_element_addresses(bf:
                                                                  *const Struct_GNUNET_CONTAINER_BloomFilter)
     -> size_t;
    pub fn GNUNET_CONTAINER_bloomfilter_get_size(bf:
                                                     *const Struct_GNUNET_CONTAINER_BloomFilter)
     -> size_t;
    pub fn GNUNET_CONTAINER_bloomfilter_clear(bf:
                                                  *mut Struct_GNUNET_CONTAINER_BloomFilter)
     -> ();
    pub fn GNUNET_CONTAINER_bloomfilter_or(bf:
                                               *mut Struct_GNUNET_CONTAINER_BloomFilter,
                                           data: *const ::libc::c_char,
                                           size: size_t) -> ::libc::c_int;
    pub fn GNUNET_CONTAINER_bloomfilter_or2(bf:
                                                *mut Struct_GNUNET_CONTAINER_BloomFilter,
                                            to_or:
                                                *const Struct_GNUNET_CONTAINER_BloomFilter)
     -> ::libc::c_int;
    pub fn GNUNET_CONTAINER_bloomfilter_resize(bf:
                                                   *mut Struct_GNUNET_CONTAINER_BloomFilter,
                                               iterator:
                                                   GNUNET_CONTAINER_HashCodeIterator,
                                               iterator_cls:
                                                   *mut ::libc::c_void,
                                               size: size_t,
                                               k: ::libc::c_uint) -> ();
    pub fn GNUNET_CONTAINER_meta_data_create()
     -> *mut Struct_GNUNET_CONTAINER_MetaData;
    pub fn GNUNET_CONTAINER_meta_data_duplicate(md:
                                                    *const Struct_GNUNET_CONTAINER_MetaData)
     -> *mut Struct_GNUNET_CONTAINER_MetaData;
    pub fn GNUNET_CONTAINER_meta_data_destroy(md:
                                                  *mut Struct_GNUNET_CONTAINER_MetaData)
     -> ();
    pub fn GNUNET_CONTAINER_meta_data_test_equal(md1:
                                                     *const Struct_GNUNET_CONTAINER_MetaData,
                                                 md2:
                                                     *const Struct_GNUNET_CONTAINER_MetaData)
     -> ::libc::c_int;
    pub fn GNUNET_CONTAINER_meta_data_insert(md:
                                                 *mut Struct_GNUNET_CONTAINER_MetaData,
                                             plugin_name:
                                                 *const ::libc::c_char,
                                             _type: Enum_EXTRACTOR_MetaType,
                                             format:
                                                 Enum_EXTRACTOR_MetaFormat,
                                             data_mime_type:
                                                 *const ::libc::c_char,
                                             data: *const ::libc::c_char,
                                             data_size: size_t)
     -> ::libc::c_int;
    pub fn GNUNET_CONTAINER_meta_data_merge(md:
                                                *mut Struct_GNUNET_CONTAINER_MetaData,
                                            _in:
                                                *const Struct_GNUNET_CONTAINER_MetaData)
     -> ();
    pub fn GNUNET_CONTAINER_meta_data_delete(md:
                                                 *mut Struct_GNUNET_CONTAINER_MetaData,
                                             _type: Enum_EXTRACTOR_MetaType,
                                             data: *const ::libc::c_char,
                                             data_size: size_t)
     -> ::libc::c_int;
    pub fn GNUNET_CONTAINER_meta_data_clear(md:
                                                *mut Struct_GNUNET_CONTAINER_MetaData)
     -> ();
    pub fn GNUNET_CONTAINER_meta_data_add_publication_date(md:
                                                               *mut Struct_GNUNET_CONTAINER_MetaData)
     -> ();
    pub fn GNUNET_CONTAINER_meta_data_iterate(md:
                                                  *const Struct_GNUNET_CONTAINER_MetaData,
                                              iter:
                                                  EXTRACTOR_MetaDataProcessor,
                                              iter_cls: *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn GNUNET_CONTAINER_meta_data_get_by_type(md:
                                                      *const Struct_GNUNET_CONTAINER_MetaData,
                                                  _type:
                                                      Enum_EXTRACTOR_MetaType)
     -> *mut ::libc::c_char;
    pub fn GNUNET_CONTAINER_meta_data_get_first_by_types(md:
                                                             *const Struct_GNUNET_CONTAINER_MetaData, ...)
     -> *mut ::libc::c_char;
    pub fn GNUNET_CONTAINER_meta_data_get_thumbnail(md:
                                                        *const Struct_GNUNET_CONTAINER_MetaData,
                                                    thumb:
                                                        *mut *mut ::libc::c_uchar)
     -> size_t;
    pub fn GNUNET_CONTAINER_meta_data_serialize(md:
                                                    *const Struct_GNUNET_CONTAINER_MetaData,
                                                target:
                                                    *mut *mut ::libc::c_char,
                                                max: size_t,
                                                opt:
                                                    Enum_GNUNET_CONTAINER_MetaDataSerializationOptions)
     -> ssize_t;
    pub fn GNUNET_CONTAINER_meta_data_get_serialized_size(md:
                                                              *const Struct_GNUNET_CONTAINER_MetaData)
     -> ssize_t;
    pub fn GNUNET_CONTAINER_meta_data_deserialize(input:
                                                      *const ::libc::c_char,
                                                  size: size_t)
     -> *mut Struct_GNUNET_CONTAINER_MetaData;
    pub fn GNUNET_CONTAINER_multihashmap_create(len: ::libc::c_uint,
                                                do_not_copy_keys:
                                                    ::libc::c_int)
     -> *mut Struct_GNUNET_CONTAINER_MultiHashMap;
    pub fn GNUNET_CONTAINER_multihashmap_destroy(map:
                                                     *mut Struct_GNUNET_CONTAINER_MultiHashMap)
     -> ();
    pub fn GNUNET_CONTAINER_multihashmap_get(map:
                                                 *const Struct_GNUNET_CONTAINER_MultiHashMap,
                                             key:
                                                 *const Struct_GNUNET_HashCode)
     -> *mut ::libc::c_void;
    pub fn GNUNET_CONTAINER_multihashmap_remove(map:
                                                    *mut Struct_GNUNET_CONTAINER_MultiHashMap,
                                                key:
                                                    *const Struct_GNUNET_HashCode,
                                                value: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn GNUNET_CONTAINER_multihashmap_remove_all(map:
                                                        *mut Struct_GNUNET_CONTAINER_MultiHashMap,
                                                    key:
                                                        *const Struct_GNUNET_HashCode)
     -> ::libc::c_int;
    pub fn GNUNET_CONTAINER_multihashmap_contains(map:
                                                      *const Struct_GNUNET_CONTAINER_MultiHashMap,
                                                  key:
                                                      *const Struct_GNUNET_HashCode)
     -> ::libc::c_int;
    pub fn GNUNET_CONTAINER_multihashmap_contains_value(map:
                                                            *const Struct_GNUNET_CONTAINER_MultiHashMap,
                                                        key:
                                                            *const Struct_GNUNET_HashCode,
                                                        value:
                                                            *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn GNUNET_CONTAINER_multihashmap_put(map:
                                                 *mut Struct_GNUNET_CONTAINER_MultiHashMap,
                                             key:
                                                 *const Struct_GNUNET_HashCode,
                                             value: *mut ::libc::c_void,
                                             opt:
                                                 Enum_GNUNET_CONTAINER_MultiHashMapOption)
     -> ::libc::c_int;
    pub fn GNUNET_CONTAINER_multihashmap_size(map:
                                                  *const Struct_GNUNET_CONTAINER_MultiHashMap)
     -> ::libc::c_uint;
    pub fn GNUNET_CONTAINER_multihashmap_iterate(map:
                                                     *const Struct_GNUNET_CONTAINER_MultiHashMap,
                                                 it:
                                                     GNUNET_CONTAINER_HashMapIterator,
                                                 it_cls: *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn GNUNET_CONTAINER_multihashmap_iterator_create(map:
                                                             *const Struct_GNUNET_CONTAINER_MultiHashMap)
     -> *mut Struct_GNUNET_CONTAINER_MultiHashMapIterator;
    pub fn GNUNET_CONTAINER_multihashmap_iterator_next(iter:
                                                           *mut Struct_GNUNET_CONTAINER_MultiHashMapIterator,
                                                       key:
                                                           *mut Struct_GNUNET_HashCode,
                                                       value:
                                                           *mut *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn GNUNET_CONTAINER_multihashmap_iterator_destroy(iter:
                                                              *mut Struct_GNUNET_CONTAINER_MultiHashMapIterator)
     -> ();
    pub fn GNUNET_CONTAINER_multihashmap_get_multiple(map:
                                                          *const Struct_GNUNET_CONTAINER_MultiHashMap,
                                                      key:
                                                          *const Struct_GNUNET_HashCode,
                                                      it:
                                                          GNUNET_CONTAINER_HashMapIterator,
                                                      it_cls:
                                                          *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn GNUNET_CONTAINER_multipeermap_create(len: ::libc::c_uint,
                                                do_not_copy_keys:
                                                    ::libc::c_int)
     -> *mut Struct_GNUNET_CONTAINER_MultiPeerMap;
    pub fn GNUNET_CONTAINER_multipeermap_destroy(map:
                                                     *mut Struct_GNUNET_CONTAINER_MultiPeerMap)
     -> ();
    pub fn GNUNET_CONTAINER_multipeermap_get(map:
                                                 *const Struct_GNUNET_CONTAINER_MultiPeerMap,
                                             key:
                                                 *const Struct_GNUNET_PeerIdentity)
     -> *mut ::libc::c_void;
    pub fn GNUNET_CONTAINER_multipeermap_remove(map:
                                                    *mut Struct_GNUNET_CONTAINER_MultiPeerMap,
                                                key:
                                                    *const Struct_GNUNET_PeerIdentity,
                                                value: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn GNUNET_CONTAINER_multipeermap_remove_all(map:
                                                        *mut Struct_GNUNET_CONTAINER_MultiPeerMap,
                                                    key:
                                                        *const Struct_GNUNET_PeerIdentity)
     -> ::libc::c_int;
    pub fn GNUNET_CONTAINER_multipeermap_contains(map:
                                                      *const Struct_GNUNET_CONTAINER_MultiPeerMap,
                                                  key:
                                                      *const Struct_GNUNET_PeerIdentity)
     -> ::libc::c_int;
    pub fn GNUNET_CONTAINER_multipeermap_contains_value(map:
                                                            *const Struct_GNUNET_CONTAINER_MultiPeerMap,
                                                        key:
                                                            *const Struct_GNUNET_PeerIdentity,
                                                        value:
                                                            *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn GNUNET_CONTAINER_multipeermap_put(map:
                                                 *mut Struct_GNUNET_CONTAINER_MultiPeerMap,
                                             key:
                                                 *const Struct_GNUNET_PeerIdentity,
                                             value: *mut ::libc::c_void,
                                             opt:
                                                 Enum_GNUNET_CONTAINER_MultiHashMapOption)
     -> ::libc::c_int;
    pub fn GNUNET_CONTAINER_multipeermap_size(map:
                                                  *const Struct_GNUNET_CONTAINER_MultiPeerMap)
     -> ::libc::c_uint;
    pub fn GNUNET_CONTAINER_multipeermap_iterate(map:
                                                     *const Struct_GNUNET_CONTAINER_MultiPeerMap,
                                                 it:
                                                     GNUNET_CONTAINER_PeerMapIterator,
                                                 it_cls: *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn GNUNET_CONTAINER_multipeermap_iterator_create(map:
                                                             *const Struct_GNUNET_CONTAINER_MultiPeerMap)
     -> *mut Struct_GNUNET_CONTAINER_MultiPeerMapIterator;
    pub fn GNUNET_CONTAINER_multipeermap_iterator_next(iter:
                                                           *mut Struct_GNUNET_CONTAINER_MultiPeerMapIterator,
                                                       key:
                                                           *mut Struct_GNUNET_PeerIdentity,
                                                       value:
                                                           *mut *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn GNUNET_CONTAINER_multipeermap_iterator_destroy(iter:
                                                              *mut Struct_GNUNET_CONTAINER_MultiPeerMapIterator)
     -> ();
    pub fn GNUNET_CONTAINER_multipeermap_get_multiple(map:
                                                          *const Struct_GNUNET_CONTAINER_MultiPeerMap,
                                                      key:
                                                          *const Struct_GNUNET_PeerIdentity,
                                                      it:
                                                          GNUNET_CONTAINER_PeerMapIterator,
                                                      it_cls:
                                                          *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn GNUNET_CONTAINER_multihashmap32_create(len: ::libc::c_uint)
     -> *mut Struct_GNUNET_CONTAINER_MultiHashMap32;
    pub fn GNUNET_CONTAINER_multihashmap32_destroy(map:
                                                       *mut Struct_GNUNET_CONTAINER_MultiHashMap32)
     -> ();
    pub fn GNUNET_CONTAINER_multihashmap32_size(map:
                                                    *const Struct_GNUNET_CONTAINER_MultiHashMap32)
     -> ::libc::c_uint;
    pub fn GNUNET_CONTAINER_multihashmap32_get(map:
                                                   *const Struct_GNUNET_CONTAINER_MultiHashMap32,
                                               key: uint32_t)
     -> *mut ::libc::c_void;
    pub fn GNUNET_CONTAINER_multihashmap32_iterate(map:
                                                       *const Struct_GNUNET_CONTAINER_MultiHashMap32,
                                                   it:
                                                       GNUNET_CONTAINER_HashMapIterator32,
                                                   it_cls:
                                                       *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn GNUNET_CONTAINER_multihashmap32_remove(map:
                                                      *mut Struct_GNUNET_CONTAINER_MultiHashMap32,
                                                  key: uint32_t,
                                                  value:
                                                      *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn GNUNET_CONTAINER_multihashmap32_remove_all(map:
                                                          *mut Struct_GNUNET_CONTAINER_MultiHashMap32,
                                                      key: uint32_t)
     -> ::libc::c_int;
    pub fn GNUNET_CONTAINER_multihashmap32_contains(map:
                                                        *const Struct_GNUNET_CONTAINER_MultiHashMap32,
                                                    key: uint32_t)
     -> ::libc::c_int;
    pub fn GNUNET_CONTAINER_multihashmap32_contains_value(map:
                                                              *const Struct_GNUNET_CONTAINER_MultiHashMap32,
                                                          key: uint32_t,
                                                          value:
                                                              *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn GNUNET_CONTAINER_multihashmap32_put(map:
                                                   *mut Struct_GNUNET_CONTAINER_MultiHashMap32,
                                               key: uint32_t,
                                               value: *mut ::libc::c_void,
                                               opt:
                                                   Enum_GNUNET_CONTAINER_MultiHashMapOption)
     -> ::libc::c_int;
    pub fn GNUNET_CONTAINER_multihashmap32_get_multiple(map:
                                                            *const Struct_GNUNET_CONTAINER_MultiHashMap32,
                                                        key: uint32_t,
                                                        it:
                                                            GNUNET_CONTAINER_HashMapIterator32,
                                                        it_cls:
                                                            *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn GNUNET_CONTAINER_multihashmap32_iterator_create(map:
                                                               *const Struct_GNUNET_CONTAINER_MultiHashMap32)
     -> *mut Struct_GNUNET_CONTAINER_MultiHashMap32Iterator;
    pub fn GNUNET_CONTAINER_multihashmap32_iterator_next(iter:
                                                             *mut Struct_GNUNET_CONTAINER_MultiHashMap32Iterator,
                                                         key: *mut uint32_t,
                                                         value:
                                                             *mut *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn GNUNET_CONTAINER_multihashmap32_iterator_destroy(iter:
                                                                *mut Struct_GNUNET_CONTAINER_MultiHashMapIterator)
     -> ();
    pub fn GNUNET_CONTAINER_heap_create(order:
                                            Enum_GNUNET_CONTAINER_HeapOrder)
     -> *mut Struct_GNUNET_CONTAINER_Heap;
    pub fn GNUNET_CONTAINER_heap_destroy(heap:
                                             *mut Struct_GNUNET_CONTAINER_Heap)
     -> ();
    pub fn GNUNET_CONTAINER_heap_peek(heap:
                                          *const Struct_GNUNET_CONTAINER_Heap)
     -> *mut ::libc::c_void;
    pub fn GNUNET_CONTAINER_heap_peek2(heap:
                                           *const Struct_GNUNET_CONTAINER_Heap,
                                       element: *mut *mut ::libc::c_void,
                                       cost:
                                           *mut GNUNET_CONTAINER_HeapCostType)
     -> ::libc::c_int;
    pub fn GNUNET_CONTAINER_heap_get_size(heap:
                                              *const Struct_GNUNET_CONTAINER_Heap)
     -> ::libc::c_uint;
    pub fn GNUNET_CONTAINER_heap_node_get_cost(node:
                                                   *const Struct_GNUNET_CONTAINER_HeapNode)
     -> GNUNET_CONTAINER_HeapCostType;
    pub fn GNUNET_CONTAINER_heap_iterate(heap:
                                             *const Struct_GNUNET_CONTAINER_Heap,
                                         iterator:
                                             GNUNET_CONTAINER_HeapIterator,
                                         iterator_cls: *mut ::libc::c_void)
     -> ();
    pub fn GNUNET_CONTAINER_heap_walk_get_next(heap:
                                                   *mut Struct_GNUNET_CONTAINER_Heap)
     -> *mut ::libc::c_void;
    pub fn GNUNET_CONTAINER_heap_insert(heap:
                                            *mut Struct_GNUNET_CONTAINER_Heap,
                                        element: *mut ::libc::c_void,
                                        cost: GNUNET_CONTAINER_HeapCostType)
     -> *mut Struct_GNUNET_CONTAINER_HeapNode;
    pub fn GNUNET_CONTAINER_heap_remove_root(heap:
                                                 *mut Struct_GNUNET_CONTAINER_Heap)
     -> *mut ::libc::c_void;
    pub fn GNUNET_CONTAINER_heap_remove_node(node:
                                                 *mut Struct_GNUNET_CONTAINER_HeapNode)
     -> *mut ::libc::c_void;
    pub fn GNUNET_CONTAINER_heap_update_cost(heap:
                                                 *mut Struct_GNUNET_CONTAINER_Heap,
                                             node:
                                                 *mut Struct_GNUNET_CONTAINER_HeapNode,
                                             new_cost:
                                                 GNUNET_CONTAINER_HeapCostType)
     -> ();
    pub fn GNUNET_BIO_read_open(_fn: *const ::libc::c_char)
     -> *mut Struct_GNUNET_BIO_ReadHandle;
    pub fn GNUNET_BIO_read_close(h: *mut Struct_GNUNET_BIO_ReadHandle,
                                 emsg: *mut *mut ::libc::c_char)
     -> ::libc::c_int;
    pub fn GNUNET_BIO_read(h: *mut Struct_GNUNET_BIO_ReadHandle,
                           what: *const ::libc::c_char,
                           result: *mut ::libc::c_void, len: size_t)
     -> ::libc::c_int;
    pub fn GNUNET_BIO_read_fn(h: *mut Struct_GNUNET_BIO_ReadHandle,
                              file: *const ::libc::c_char,
                              line: ::libc::c_int,
                              result: *mut ::libc::c_void, len: size_t)
     -> ::libc::c_int;
    pub fn GNUNET_BIO_read_string(h: *mut Struct_GNUNET_BIO_ReadHandle,
                                  what: *const ::libc::c_char,
                                  result: *mut *mut ::libc::c_char,
                                  max_length: size_t) -> ::libc::c_int;
    pub fn GNUNET_BIO_read_meta_data(h: *mut Struct_GNUNET_BIO_ReadHandle,
                                     what: *const ::libc::c_char,
                                     result:
                                         *mut *mut Struct_GNUNET_CONTAINER_MetaData)
     -> ::libc::c_int;
    pub fn GNUNET_BIO_read_int32__(h: *mut Struct_GNUNET_BIO_ReadHandle,
                                   file: *const ::libc::c_char,
                                   line: ::libc::c_int, i: *mut int32_t)
     -> ::libc::c_int;
    pub fn GNUNET_BIO_read_int64__(h: *mut Struct_GNUNET_BIO_ReadHandle,
                                   file: *const ::libc::c_char,
                                   line: ::libc::c_int, i: *mut int64_t)
     -> ::libc::c_int;
    pub fn GNUNET_BIO_write_open(_fn: *const ::libc::c_char)
     -> *mut Struct_GNUNET_BIO_WriteHandle;
    pub fn GNUNET_BIO_write_close(h: *mut Struct_GNUNET_BIO_WriteHandle)
     -> ::libc::c_int;
    pub fn GNUNET_BIO_write(h: *mut Struct_GNUNET_BIO_WriteHandle,
                            buffer: *const ::libc::c_void, n: size_t)
     -> ::libc::c_int;
    pub fn GNUNET_BIO_flush(h: *mut Struct_GNUNET_BIO_WriteHandle)
     -> ::libc::c_int;
    pub fn GNUNET_BIO_write_string(h: *mut Struct_GNUNET_BIO_WriteHandle,
                                   s: *const ::libc::c_char) -> ::libc::c_int;
    pub fn GNUNET_BIO_write_meta_data(h: *mut Struct_GNUNET_BIO_WriteHandle,
                                      m:
                                          *const Struct_GNUNET_CONTAINER_MetaData)
     -> ::libc::c_int;
    pub fn GNUNET_BIO_write_int32(h: *mut Struct_GNUNET_BIO_WriteHandle,
                                  i: int32_t) -> ::libc::c_int;
    pub fn GNUNET_BIO_write_int64(h: *mut Struct_GNUNET_BIO_WriteHandle,
                                  i: int64_t) -> ::libc::c_int;
    pub fn GNUNET_CONNECTION_persist_(connection:
                                          *mut Struct_GNUNET_CONNECTION_Handle)
     -> ();
    pub fn GNUNET_CONNECTION_disable_corking(connection:
                                                 *mut Struct_GNUNET_CONNECTION_Handle)
     -> ::libc::c_int;
    pub fn GNUNET_CONNECTION_connect_socket(s:
                                                *mut Struct_GNUNET_NETWORK_Handle,
                                            serv_addr: *const Struct_sockaddr,
                                            addrlen: socklen_t)
     -> *mut Struct_GNUNET_CONNECTION_Handle;
    pub fn GNUNET_CONNECTION_create_from_existing(osSocket:
                                                      *mut Struct_GNUNET_NETWORK_Handle)
     -> *mut Struct_GNUNET_CONNECTION_Handle;
    pub fn GNUNET_CONNECTION_create_from_accept(access:
                                                    GNUNET_CONNECTION_AccessCheck,
                                                access_cls:
                                                    *mut ::libc::c_void,
                                                lsock:
                                                    *mut Struct_GNUNET_NETWORK_Handle)
     -> *mut Struct_GNUNET_CONNECTION_Handle;
    pub fn GNUNET_CONNECTION_create_from_connect(cfg:
                                                     *const Struct_GNUNET_CONFIGURATION_Handle,
                                                 hostname:
                                                     *const ::libc::c_char,
                                                 port: uint16_t)
     -> *mut Struct_GNUNET_CONNECTION_Handle;
    pub fn GNUNET_CONNECTION_create_from_connect_to_unixpath(cfg:
                                                                 *const Struct_GNUNET_CONFIGURATION_Handle,
                                                             unixpath:
                                                                 *const ::libc::c_char)
     -> *mut Struct_GNUNET_CONNECTION_Handle;
    pub fn GNUNET_CONNECTION_create_from_sockaddr(af_family: ::libc::c_int,
                                                  serv_addr:
                                                      *const Struct_sockaddr,
                                                  addrlen: socklen_t)
     -> *mut Struct_GNUNET_CONNECTION_Handle;
    pub fn GNUNET_CONNECTION_check(connection:
                                       *mut Struct_GNUNET_CONNECTION_Handle)
     -> ::libc::c_int;
    pub fn GNUNET_CONNECTION_get_address(connection:
                                             *mut Struct_GNUNET_CONNECTION_Handle,
                                         addr: *mut *mut ::libc::c_void,
                                         addrlen: *mut size_t)
     -> ::libc::c_int;
    pub fn GNUNET_CONNECTION_destroy(connection:
                                         *mut Struct_GNUNET_CONNECTION_Handle)
     -> ();
    pub fn GNUNET_CONNECTION_receive(connection:
                                         *mut Struct_GNUNET_CONNECTION_Handle,
                                     max: size_t,
                                     timeout: Struct_GNUNET_TIME_Relative,
                                     receiver: GNUNET_CONNECTION_Receiver,
                                     receiver_cls: *mut ::libc::c_void) -> ();
    pub fn GNUNET_CONNECTION_receive_cancel(connection:
                                                *mut Struct_GNUNET_CONNECTION_Handle)
     -> *mut ::libc::c_void;
    pub fn GNUNET_CONNECTION_notify_transmit_ready(connection:
                                                       *mut Struct_GNUNET_CONNECTION_Handle,
                                                   size: size_t,
                                                   timeout:
                                                       Struct_GNUNET_TIME_Relative,
                                                   notify:
                                                       GNUNET_CONNECTION_TransmitReadyNotify,
                                                   notify_cls:
                                                       *mut ::libc::c_void)
     -> *mut Struct_GNUNET_CONNECTION_TransmitHandle;
    pub fn GNUNET_CONNECTION_notify_transmit_ready_cancel(th:
                                                              *mut Struct_GNUNET_CONNECTION_TransmitHandle)
     -> ();
    pub fn GNUNET_CLIENT_connect(service_name: *const ::libc::c_char,
                                 cfg:
                                     *const Struct_GNUNET_CONFIGURATION_Handle)
     -> *mut Struct_GNUNET_CLIENT_Connection;
    pub fn GNUNET_CLIENT_disconnect(client:
                                        *mut Struct_GNUNET_CLIENT_Connection)
     -> ();
    pub fn GNUNET_CLIENT_receive(client: *mut Struct_GNUNET_CLIENT_Connection,
                                 handler: GNUNET_CLIENT_MessageHandler,
                                 handler_cls: *mut ::libc::c_void,
                                 timeout: Struct_GNUNET_TIME_Relative) -> ();
    pub fn GNUNET_CLIENT_notify_transmit_ready(client:
                                                   *mut Struct_GNUNET_CLIENT_Connection,
                                               size: size_t,
                                               timeout:
                                                   Struct_GNUNET_TIME_Relative,
                                               auto_retry: ::libc::c_int,
                                               notify:
                                                   GNUNET_CONNECTION_TransmitReadyNotify,
                                               notify_cls:
                                                   *mut ::libc::c_void)
     -> *mut Struct_GNUNET_CLIENT_TransmitHandle;
    pub fn GNUNET_CLIENT_notify_transmit_ready_cancel(th:
                                                          *mut Struct_GNUNET_CLIENT_TransmitHandle)
     -> ();
    pub fn GNUNET_CLIENT_transmit_and_get_response(client:
                                                       *mut Struct_GNUNET_CLIENT_Connection,
                                                   hdr:
                                                       *const Struct_GNUNET_MessageHeader,
                                                   timeout:
                                                       Struct_GNUNET_TIME_Relative,
                                                   auto_retry: ::libc::c_int,
                                                   rn:
                                                       GNUNET_CLIENT_MessageHandler,
                                                   rn_cls:
                                                       *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn GNUNET_CLIENT_service_test(service: *const ::libc::c_char,
                                      cfg:
                                          *const Struct_GNUNET_CONFIGURATION_Handle,
                                      timeout: Struct_GNUNET_TIME_Relative,
                                      cb: GNUNET_CLIENT_TestResultCallback,
                                      cb_cls: *mut ::libc::c_void)
     -> *mut Struct_GNUNET_CLIENT_TestHandle;
    pub fn GNUNET_CLIENT_service_test_cancel(th:
                                                 *mut Struct_GNUNET_CLIENT_TestHandle)
     -> ();
    pub fn GNUNET_CLIENT_MANAGER_connect(cfg:
                                             *const Struct_GNUNET_CONFIGURATION_Handle,
                                         service_name: *const ::libc::c_char,
                                         handlers:
                                             *const Struct_GNUNET_CLIENT_MANAGER_MessageHandler)
     -> *mut Struct_GNUNET_CLIENT_MANAGER_Connection;
    pub fn GNUNET_CLIENT_MANAGER_disconnect(mgr:
                                                *mut Struct_GNUNET_CLIENT_MANAGER_Connection,
                                            transmit_queue: ::libc::c_int,
                                            disconnect_cb:
                                                GNUNET_ContinuationCallback,
                                            cls: *mut ::libc::c_void) -> ();
    pub fn GNUNET_CLIENT_MANAGER_reconnect(mgr:
                                               *mut Struct_GNUNET_CLIENT_MANAGER_Connection)
     -> ();
    pub fn GNUNET_CLIENT_MANAGER_transmit(mgr:
                                              *mut Struct_GNUNET_CLIENT_MANAGER_Connection,
                                          msg:
                                              *mut Struct_GNUNET_MessageHeader)
     -> ();
    pub fn GNUNET_CLIENT_MANAGER_transmit_now(mgr:
                                                  *mut Struct_GNUNET_CLIENT_MANAGER_Connection,
                                              msg:
                                                  *mut Struct_GNUNET_MessageHeader)
     -> ();
    pub fn GNUNET_CLIENT_MANAGER_drop_queue(mgr:
                                                *mut Struct_GNUNET_CLIENT_MANAGER_Connection)
     -> ();
    pub fn GNUNET_CLIENT_MANAGER_get_client(mgr:
                                                *mut Struct_GNUNET_CLIENT_MANAGER_Connection)
     -> *mut Struct_GNUNET_CLIENT_Connection;
    pub fn GNUNET_CLIENT_MANAGER_get_user_context_(mgr:
                                                       *mut Struct_GNUNET_CLIENT_MANAGER_Connection,
                                                   size: size_t)
     -> *mut ::libc::c_void;
    pub fn GNUNET_CLIENT_MANAGER_set_user_context_(mgr:
                                                       *mut Struct_GNUNET_CLIENT_MANAGER_Connection,
                                                   ctx: *mut ::libc::c_void,
                                                   size: size_t) -> ();
    pub fn GNUNET_GETOPT_run(binaryOptions: *const ::libc::c_char,
                             allOptions:
                                 *const Struct_GNUNET_GETOPT_CommandLineOption,
                             argc: ::libc::c_uint,
                             argv: *const *mut ::libc::c_char)
     -> ::libc::c_int;
    pub fn GNUNET_GETOPT_set_ulong(ctx:
                                       *mut Struct_GNUNET_GETOPT_CommandLineProcessorContext,
                                   scls: *mut ::libc::c_void,
                                   option: *const ::libc::c_char,
                                   value: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn GNUNET_GETOPT_set_relative_time(ctx:
                                               *mut Struct_GNUNET_GETOPT_CommandLineProcessorContext,
                                           scls: *mut ::libc::c_void,
                                           option: *const ::libc::c_char,
                                           value: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn GNUNET_GETOPT_set_uint(ctx:
                                      *mut Struct_GNUNET_GETOPT_CommandLineProcessorContext,
                                  scls: *mut ::libc::c_void,
                                  option: *const ::libc::c_char,
                                  value: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn GNUNET_GETOPT_set_one(ctx:
                                     *mut Struct_GNUNET_GETOPT_CommandLineProcessorContext,
                                 scls: *mut ::libc::c_void,
                                 option: *const ::libc::c_char,
                                 value: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn GNUNET_GETOPT_set_string(ctx:
                                        *mut Struct_GNUNET_GETOPT_CommandLineProcessorContext,
                                    scls: *mut ::libc::c_void,
                                    option: *const ::libc::c_char,
                                    value: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn GNUNET_GETOPT_set_filename(ctx:
                                          *mut Struct_GNUNET_GETOPT_CommandLineProcessorContext,
                                      scls: *mut ::libc::c_void,
                                      option: *const ::libc::c_char,
                                      value: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn GNUNET_GETOPT_increment_value(ctx:
                                             *mut Struct_GNUNET_GETOPT_CommandLineProcessorContext,
                                         scls: *mut ::libc::c_void,
                                         option: *const ::libc::c_char,
                                         value: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn GNUNET_GETOPT_format_help_(ctx:
                                          *mut Struct_GNUNET_GETOPT_CommandLineProcessorContext,
                                      scls: *mut ::libc::c_void,
                                      option: *const ::libc::c_char,
                                      value: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn GNUNET_GETOPT_print_version_(ctx:
                                            *mut Struct_GNUNET_GETOPT_CommandLineProcessorContext,
                                        scls: *mut ::libc::c_void,
                                        option: *const ::libc::c_char,
                                        value: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn GNUNET_SERVER_create_with_sockets(access:
                                                 GNUNET_CONNECTION_AccessCheck,
                                             access_cls: *mut ::libc::c_void,
                                             lsocks:
                                                 *mut *mut Struct_GNUNET_NETWORK_Handle,
                                             idle_timeout:
                                                 Struct_GNUNET_TIME_Relative,
                                             require_found: ::libc::c_int)
     -> *mut Struct_GNUNET_SERVER_Handle;
    pub fn GNUNET_SERVER_create(access: GNUNET_CONNECTION_AccessCheck,
                                access_cls: *mut ::libc::c_void,
                                server_addr: *const *mut Struct_sockaddr,
                                socklen: *const socklen_t,
                                idle_timeout: Struct_GNUNET_TIME_Relative,
                                require_found: ::libc::c_int)
     -> *mut Struct_GNUNET_SERVER_Handle;
    pub fn GNUNET_SERVER_suspend(server: *mut Struct_GNUNET_SERVER_Handle)
     -> ();
    pub fn GNUNET_SERVER_resume(server: *mut Struct_GNUNET_SERVER_Handle)
     -> ();
    pub fn GNUNET_SERVER_stop_listening(server:
                                            *mut Struct_GNUNET_SERVER_Handle)
     -> ();
    pub fn GNUNET_SERVER_destroy(server: *mut Struct_GNUNET_SERVER_Handle)
     -> ();
    pub fn GNUNET_SERVER_add_handlers(server:
                                          *mut Struct_GNUNET_SERVER_Handle,
                                      handlers:
                                          *const Struct_GNUNET_SERVER_MessageHandler)
     -> ();
    pub fn GNUNET_SERVER_notify_transmit_ready(client:
                                                   *mut Struct_GNUNET_SERVER_Client,
                                               size: size_t,
                                               timeout:
                                                   Struct_GNUNET_TIME_Relative,
                                               callback:
                                                   GNUNET_CONNECTION_TransmitReadyNotify,
                                               callback_cls:
                                                   *mut ::libc::c_void)
     -> *mut Struct_GNUNET_SERVER_TransmitHandle;
    pub fn GNUNET_SERVER_notify_transmit_ready_cancel(th:
                                                          *mut Struct_GNUNET_SERVER_TransmitHandle)
     -> ();
    pub fn GNUNET_SERVER_client_mark_monitor(client:
                                                 *mut Struct_GNUNET_SERVER_Client)
     -> ();
    pub fn GNUNET_SERVER_client_persist_(client:
                                             *mut Struct_GNUNET_SERVER_Client)
     -> ();
    pub fn GNUNET_SERVER_receive_done(client:
                                          *mut Struct_GNUNET_SERVER_Client,
                                      success: ::libc::c_int) -> ();
    pub fn GNUNET_SERVER_client_set_timeout(client:
                                                *mut Struct_GNUNET_SERVER_Client,
                                            timeout:
                                                Struct_GNUNET_TIME_Relative)
     -> ();
    pub fn GNUNET_SERVER_client_get_user_context_(client:
                                                      *mut Struct_GNUNET_SERVER_Client,
                                                  size: size_t)
     -> *mut ::libc::c_void;
    pub fn GNUNET_SERVER_client_set_user_context_(client:
                                                      *mut Struct_GNUNET_SERVER_Client,
                                                  ptr: *mut ::libc::c_void,
                                                  size: size_t) -> ();
    pub fn GNUNET_SERVER_disable_receive_done_warning(client:
                                                          *mut Struct_GNUNET_SERVER_Client)
     -> ();
    pub fn GNUNET_SERVER_inject(server: *mut Struct_GNUNET_SERVER_Handle,
                                sender: *mut Struct_GNUNET_SERVER_Client,
                                message: *const Struct_GNUNET_MessageHeader)
     -> ::libc::c_int;
    pub fn GNUNET_SERVER_connect_socket(server:
                                            *mut Struct_GNUNET_SERVER_Handle,
                                        connection:
                                            *mut Struct_GNUNET_CONNECTION_Handle)
     -> *mut Struct_GNUNET_SERVER_Client;
    pub fn GNUNET_SERVER_client_keep(client: *mut Struct_GNUNET_SERVER_Client)
     -> ();
    pub fn GNUNET_SERVER_client_drop(client: *mut Struct_GNUNET_SERVER_Client)
     -> ();
    pub fn GNUNET_SERVER_client_get_address(client:
                                                *mut Struct_GNUNET_SERVER_Client,
                                            addr: *mut *mut ::libc::c_void,
                                            addrlen: *mut size_t)
     -> ::libc::c_int;
    pub fn GNUNET_SERVER_disconnect_notify(server:
                                               *mut Struct_GNUNET_SERVER_Handle,
                                           callback:
                                               GNUNET_SERVER_DisconnectCallback,
                                           callback_cls: *mut ::libc::c_void)
     -> ();
    pub fn GNUNET_SERVER_connect_notify(server:
                                            *mut Struct_GNUNET_SERVER_Handle,
                                        callback:
                                            GNUNET_SERVER_ConnectCallback,
                                        callback_cls: *mut ::libc::c_void)
     -> ();
    pub fn GNUNET_SERVER_disconnect_notify_cancel(server:
                                                      *mut Struct_GNUNET_SERVER_Handle,
                                                  callback:
                                                      GNUNET_SERVER_DisconnectCallback,
                                                  callback_cls:
                                                      *mut ::libc::c_void)
     -> ();
    pub fn GNUNET_SERVER_connect_notify_cancel(server:
                                                   *mut Struct_GNUNET_SERVER_Handle,
                                               callback:
                                                   GNUNET_SERVER_ConnectCallback,
                                               callback_cls:
                                                   *mut ::libc::c_void) -> ();
    pub fn GNUNET_SERVER_client_disconnect(client:
                                               *mut Struct_GNUNET_SERVER_Client)
     -> ();
    pub fn GNUNET_SERVER_client_disable_corking(client:
                                                    *mut Struct_GNUNET_SERVER_Client)
     -> ::libc::c_int;
    pub fn GNUNET_SERVER_transmit_context_create(client:
                                                     *mut Struct_GNUNET_SERVER_Client)
     -> *mut Struct_GNUNET_SERVER_TransmitContext;
    pub fn GNUNET_SERVER_transmit_context_append_data(tc:
                                                          *mut Struct_GNUNET_SERVER_TransmitContext,
                                                      data:
                                                          *const ::libc::c_void,
                                                      length: size_t,
                                                      _type: uint16_t) -> ();
    pub fn GNUNET_SERVER_transmit_context_append_message(tc:
                                                             *mut Struct_GNUNET_SERVER_TransmitContext,
                                                         msg:
                                                             *const Struct_GNUNET_MessageHeader)
     -> ();
    pub fn GNUNET_SERVER_transmit_context_run(tc:
                                                  *mut Struct_GNUNET_SERVER_TransmitContext,
                                              timeout:
                                                  Struct_GNUNET_TIME_Relative)
     -> ();
    pub fn GNUNET_SERVER_transmit_context_destroy(tc:
                                                      *mut Struct_GNUNET_SERVER_TransmitContext,
                                                  success: ::libc::c_int)
     -> ();
    pub fn GNUNET_SERVER_notification_context_create(server:
                                                         *mut Struct_GNUNET_SERVER_Handle,
                                                     queue_length:
                                                         ::libc::c_uint)
     -> *mut Struct_GNUNET_SERVER_NotificationContext;
    pub fn GNUNET_SERVER_notification_context_destroy(nc:
                                                          *mut Struct_GNUNET_SERVER_NotificationContext)
     -> ();
    pub fn GNUNET_SERVER_notification_context_add(nc:
                                                      *mut Struct_GNUNET_SERVER_NotificationContext,
                                                  client:
                                                      *mut Struct_GNUNET_SERVER_Client)
     -> ();
    pub fn GNUNET_SERVER_notification_context_unicast(nc:
                                                          *mut Struct_GNUNET_SERVER_NotificationContext,
                                                      client:
                                                          *mut Struct_GNUNET_SERVER_Client,
                                                      msg:
                                                          *const Struct_GNUNET_MessageHeader,
                                                      can_drop: ::libc::c_int)
     -> ();
    pub fn GNUNET_SERVER_notification_context_broadcast(nc:
                                                            *mut Struct_GNUNET_SERVER_NotificationContext,
                                                        msg:
                                                            *const Struct_GNUNET_MessageHeader,
                                                        can_drop:
                                                            ::libc::c_int)
     -> ();
    pub fn GNUNET_SERVER_notification_context_get_size(nc:
                                                           *mut Struct_GNUNET_SERVER_NotificationContext)
     -> ::libc::c_uint;
    pub fn GNUNET_SERVER_mst_create(cb:
                                        GNUNET_SERVER_MessageTokenizerCallback,
                                    cb_cls: *mut ::libc::c_void)
     -> *mut Struct_GNUNET_SERVER_MessageStreamTokenizer;
    pub fn GNUNET_SERVER_mst_receive(mst:
                                         *mut Struct_GNUNET_SERVER_MessageStreamTokenizer,
                                     client_identity: *mut ::libc::c_void,
                                     buf: *const ::libc::c_char, size: size_t,
                                     purge: ::libc::c_int,
                                     one_shot: ::libc::c_int)
     -> ::libc::c_int;
    pub fn GNUNET_SERVER_mst_destroy(mst:
                                         *mut Struct_GNUNET_SERVER_MessageStreamTokenizer)
     -> ();
    pub fn GNUNET_SERVER_set_callbacks(server:
                                           *mut Struct_GNUNET_SERVER_Handle,
                                       create:
                                           GNUNET_SERVER_MstCreateCallback,
                                       destroy:
                                           GNUNET_SERVER_MstDestroyCallback,
                                       receive:
                                           GNUNET_SERVER_MstReceiveCallback,
                                       cls: *mut ::libc::c_void) -> ();
    pub fn GNUNET_HELPER_start(with_control_pipe: ::libc::c_int,
                               binary_name: *const ::libc::c_char,
                               binary_argv: *const *mut ::libc::c_char,
                               cb: GNUNET_SERVER_MessageTokenizerCallback,
                               exp_cb: GNUNET_HELPER_ExceptionCallback,
                               cb_cls: *mut ::libc::c_void)
     -> *mut Struct_GNUNET_HELPER_Handle;
    pub fn GNUNET_HELPER_kill(h: *mut Struct_GNUNET_HELPER_Handle,
                              soft_kill: ::libc::c_int) -> ::libc::c_int;
    pub fn GNUNET_HELPER_wait(h: *mut Struct_GNUNET_HELPER_Handle)
     -> ::libc::c_int;
    pub fn GNUNET_HELPER_destroy(h: *mut Struct_GNUNET_HELPER_Handle) -> ();
    pub fn GNUNET_HELPER_stop(h: *mut Struct_GNUNET_HELPER_Handle,
                              soft_kill: ::libc::c_int) -> ();
    pub fn GNUNET_HELPER_send(h: *mut Struct_GNUNET_HELPER_Handle,
                              msg: *const Struct_GNUNET_MessageHeader,
                              can_drop: ::libc::c_int,
                              cont: GNUNET_HELPER_Continuation,
                              cont_cls: *mut ::libc::c_void)
     -> *mut Struct_GNUNET_HELPER_SendHandle;
    pub fn GNUNET_HELPER_send_cancel(sh: *mut Struct_GNUNET_HELPER_SendHandle)
     -> ();
    pub fn GNUNET_MQ_extract_nested_mh_(mh:
                                            *const Struct_GNUNET_MessageHeader,
                                        base_size: uint16_t)
     -> *const Struct_GNUNET_MessageHeader;
    pub fn GNUNET_MQ_msg_nested_mh_(mhp:
                                        *mut *mut Struct_GNUNET_MessageHeader,
                                    base_size: uint16_t, _type: uint16_t,
                                    nested_mh:
                                        *const Struct_GNUNET_MessageHeader)
     -> *mut Struct_GNUNET_MQ_Envelope;
    pub fn GNUNET_MQ_msg_(mhp: *mut *mut Struct_GNUNET_MessageHeader,
                          size: uint16_t, _type: uint16_t)
     -> *mut Struct_GNUNET_MQ_Envelope;
    pub fn GNUNET_MQ_discard(mqm: *mut Struct_GNUNET_MQ_Envelope) -> ();
    pub fn GNUNET_MQ_send(mq: *mut Struct_GNUNET_MQ_Handle,
                          ev: *mut Struct_GNUNET_MQ_Envelope) -> ();
    pub fn GNUNET_MQ_send_cancel(ev: *mut Struct_GNUNET_MQ_Envelope) -> ();
    pub fn GNUNET_MQ_assoc_add(mq: *mut Struct_GNUNET_MQ_Handle,
                               assoc_data: *mut ::libc::c_void) -> uint32_t;
    pub fn GNUNET_MQ_assoc_get(mq: *mut Struct_GNUNET_MQ_Handle,
                               request_id: uint32_t) -> *mut ::libc::c_void;
    pub fn GNUNET_MQ_assoc_remove(mq: *mut Struct_GNUNET_MQ_Handle,
                                  request_id: uint32_t)
     -> *mut ::libc::c_void;
    pub fn GNUNET_MQ_queue_for_connection_client(connection:
                                                     *mut Struct_GNUNET_CLIENT_Connection,
                                                 handlers:
                                                     *const Struct_GNUNET_MQ_MessageHandler,
                                                 error_handler:
                                                     GNUNET_MQ_ErrorHandler,
                                                 cls: *mut ::libc::c_void)
     -> *mut Struct_GNUNET_MQ_Handle;
    pub fn GNUNET_MQ_queue_for_server_client(client:
                                                 *mut Struct_GNUNET_SERVER_Client)
     -> *mut Struct_GNUNET_MQ_Handle;
    pub fn GNUNET_MQ_queue_for_callbacks(send: GNUNET_MQ_SendImpl,
                                         destroy: GNUNET_MQ_DestroyImpl,
                                         cancel: GNUNET_MQ_CancelImpl,
                                         impl_state: *mut ::libc::c_void,
                                         handlers:
                                             *const Struct_GNUNET_MQ_MessageHandler,
                                         error_handler:
                                             GNUNET_MQ_ErrorHandler,
                                         cls: *mut ::libc::c_void)
     -> *mut Struct_GNUNET_MQ_Handle;
    pub fn GNUNET_MQ_replace_handlers(mq: *mut Struct_GNUNET_MQ_Handle,
                                      new_handlers:
                                          *const Struct_GNUNET_MQ_MessageHandler,
                                      cls: *mut ::libc::c_void) -> ();
    pub fn GNUNET_MQ_notify_sent(ev: *mut Struct_GNUNET_MQ_Envelope,
                                 cb: GNUNET_MQ_NotifyCallback,
                                 cls: *mut ::libc::c_void) -> ();
    pub fn GNUNET_MQ_destroy(mq: *mut Struct_GNUNET_MQ_Handle) -> ();
    pub fn GNUNET_MQ_inject_message(mq: *mut Struct_GNUNET_MQ_Handle,
                                    mh: *const Struct_GNUNET_MessageHeader)
     -> ();
    pub fn GNUNET_MQ_inject_error(mq: *mut Struct_GNUNET_MQ_Handle,
                                  error: Enum_GNUNET_MQ_Error) -> ();
    pub fn GNUNET_MQ_impl_send_continue(mq: *mut Struct_GNUNET_MQ_Handle)
     -> ();
    pub fn GNUNET_MQ_impl_current(mq: *mut Struct_GNUNET_MQ_Handle)
     -> *const Struct_GNUNET_MessageHeader;
    pub fn GNUNET_MQ_impl_state(mq: *mut Struct_GNUNET_MQ_Handle)
     -> *mut ::libc::c_void;
    pub fn GNUNET_OS_installation_get_path(dirkind:
                                               Enum_GNUNET_OS_InstallationPathKind)
     -> *mut ::libc::c_char;
    pub fn GNUNET_OS_get_libexec_binary_path(progname: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn GNUNET_OS_network_interfaces_list(_proc:
                                                 GNUNET_OS_NetworkInterfaceProcessor,
                                             proc_cls: *mut ::libc::c_void)
     -> ();
    pub fn GNUNET_OS_process_current() -> *mut Struct_GNUNET_OS_Process;
    pub fn GNUNET_OS_process_kill(_proc: *mut Struct_GNUNET_OS_Process,
                                  sig: ::libc::c_int) -> ::libc::c_int;
    pub fn GNUNET_OS_process_destroy(_proc: *mut Struct_GNUNET_OS_Process)
     -> ();
    pub fn GNUNET_OS_process_get_pid(_proc: *mut Struct_GNUNET_OS_Process)
     -> pid_t;
    pub fn GNUNET_OS_start_process_vap(pipe_control: ::libc::c_int,
                                       std_inheritance:
                                           Enum_GNUNET_OS_InheritStdioFlags,
                                       pipe_stdin:
                                           *mut Struct_GNUNET_DISK_PipeHandle,
                                       pipe_stdout:
                                           *mut Struct_GNUNET_DISK_PipeHandle,
                                       pipe_stderr:
                                           *mut Struct_GNUNET_DISK_PipeHandle,
                                       filename: *const ::libc::c_char,
                                       argv: *const *mut ::libc::c_char)
     -> *mut Struct_GNUNET_OS_Process;
    pub fn GNUNET_OS_start_process(pipe_control: ::libc::c_int,
                                   std_inheritance:
                                       Enum_GNUNET_OS_InheritStdioFlags,
                                   pipe_stdin:
                                       *mut Struct_GNUNET_DISK_PipeHandle,
                                   pipe_stdout:
                                       *mut Struct_GNUNET_DISK_PipeHandle,
                                   pipe_stderr:
                                       *mut Struct_GNUNET_DISK_PipeHandle,
                                   filename: *const ::libc::c_char, ...)
     -> *mut Struct_GNUNET_OS_Process;
    pub fn GNUNET_OS_start_process_va(pipe_control: ::libc::c_int,
                                      std_inheritance:
                                          Enum_GNUNET_OS_InheritStdioFlags,
                                      pipe_stdin:
                                          *mut Struct_GNUNET_DISK_PipeHandle,
                                      pipe_stdout:
                                          *mut Struct_GNUNET_DISK_PipeHandle,
                                      pipe_stderr:
                                          *mut Struct_GNUNET_DISK_PipeHandle,
                                      filename: *const ::libc::c_char,
                                      va: va_list)
     -> *mut Struct_GNUNET_OS_Process;
    pub fn GNUNET_OS_start_process_v(pipe_control: ::libc::c_int,
                                     std_inheritance:
                                         Enum_GNUNET_OS_InheritStdioFlags,
                                     lsocks: *const ::libc::c_int,
                                     filename: *const ::libc::c_char,
                                     argv: *const *mut ::libc::c_char)
     -> *mut Struct_GNUNET_OS_Process;
    pub fn GNUNET_OS_start_process_s(pipe_control: ::libc::c_int,
                                     std_inheritance: ::libc::c_uint,
                                     lsocks: *const ::libc::c_int,
                                     filename: *const ::libc::c_char, ...)
     -> *mut Struct_GNUNET_OS_Process;
    pub fn GNUNET_OS_command_stop(cmd: *mut Struct_GNUNET_OS_CommandHandle)
     -> ();
    pub fn GNUNET_OS_command_run(_proc: GNUNET_OS_LineProcessor,
                                 proc_cls: *mut ::libc::c_void,
                                 timeout: Struct_GNUNET_TIME_Relative,
                                 binary: *const ::libc::c_char, ...)
     -> *mut Struct_GNUNET_OS_CommandHandle;
    pub fn GNUNET_OS_process_status(_proc: *mut Struct_GNUNET_OS_Process,
                                    _type:
                                        *mut Enum_GNUNET_OS_ProcessStatusType,
                                    code: *mut ::libc::c_ulong)
     -> ::libc::c_int;
    pub fn GNUNET_OS_process_wait(_proc: *mut Struct_GNUNET_OS_Process)
     -> ::libc::c_int;
    pub fn GNUNET_OS_install_parent_control_handler(cls: *mut ::libc::c_void,
                                                    tc:
                                                        *const Struct_GNUNET_SCHEDULER_TaskContext)
     -> ();
    pub fn GNUNET_OS_check_helper_binary(binary: *const ::libc::c_char,
                                         check_suid: ::libc::c_int,
                                         params: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn GNUNET_PEER_search(pid: *const Struct_GNUNET_PeerIdentity)
     -> GNUNET_PEER_Id;
    pub fn GNUNET_PEER_intern(pid: *const Struct_GNUNET_PeerIdentity)
     -> GNUNET_PEER_Id;
    pub fn GNUNET_PEER_change_rc(id: GNUNET_PEER_Id, delta: ::libc::c_int)
     -> ();
    pub fn GNUNET_PEER_decrement_rcs(ids: *const GNUNET_PEER_Id,
                                     count: ::libc::c_uint) -> ();
    pub fn GNUNET_PEER_resolve(id: GNUNET_PEER_Id,
                               pid: *mut Struct_GNUNET_PeerIdentity) -> ();
    pub fn GNUNET_PEER_resolve2(id: GNUNET_PEER_Id)
     -> *const Struct_GNUNET_PeerIdentity;
    pub fn GNUNET_PLUGIN_test(library_name: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn GNUNET_PLUGIN_load(library_name: *const ::libc::c_char,
                              arg: *mut ::libc::c_void)
     -> *mut ::libc::c_void;
    pub fn GNUNET_PLUGIN_load_all(__xpg_basename: *const ::libc::c_char,
                                  arg: *mut ::libc::c_void,
                                  cb: GNUNET_PLUGIN_LoaderCallback,
                                  cb_cls: *mut ::libc::c_void) -> ();
    pub fn GNUNET_PLUGIN_unload(library_name: *const ::libc::c_char,
                                arg: *mut ::libc::c_void)
     -> *mut ::libc::c_void;
    pub fn GNUNET_PROGRAM_run2(argc: ::libc::c_int,
                               argv: *const *mut ::libc::c_char,
                               binaryName: *const ::libc::c_char,
                               binaryHelp: *const ::libc::c_char,
                               options:
                                   *const Struct_GNUNET_GETOPT_CommandLineOption,
                               task: GNUNET_PROGRAM_Main,
                               task_cls: *mut ::libc::c_void,
                               run_without_scheduler: ::libc::c_int)
     -> ::libc::c_int;
    pub fn GNUNET_PROGRAM_run(argc: ::libc::c_int,
                              argv: *const *mut ::libc::c_char,
                              binaryName: *const ::libc::c_char,
                              binaryHelp: *const ::libc::c_char,
                              options:
                                  *const Struct_GNUNET_GETOPT_CommandLineOption,
                              task: GNUNET_PROGRAM_Main,
                              task_cls: *mut ::libc::c_void) -> ::libc::c_int;
    pub fn GNUNET_SERVICE_get_server_addresses(service_name:
                                                   *const ::libc::c_char,
                                               cfg:
                                                   *const Struct_GNUNET_CONFIGURATION_Handle,
                                               addrs:
                                                   *mut *mut *mut Struct_sockaddr,
                                               addr_lens: *mut *mut socklen_t)
     -> ::libc::c_int;
    pub fn GNUNET_SERVICE_run(argc: ::libc::c_int,
                              argv: *const *mut ::libc::c_char,
                              service_name: *const ::libc::c_char,
                              options: Enum_GNUNET_SERVICE_Options,
                              task: GNUNET_SERVICE_Main,
                              task_cls: *mut ::libc::c_void) -> ::libc::c_int;
    pub fn GNUNET_SERVICE_start(service_name: *const ::libc::c_char,
                                cfg:
                                    *const Struct_GNUNET_CONFIGURATION_Handle,
                                options: Enum_GNUNET_SERVICE_Options)
     -> *mut Struct_GNUNET_SERVICE_Context;
    pub fn GNUNET_SERVICE_get_server(ctx: *mut Struct_GNUNET_SERVICE_Context)
     -> *mut Struct_GNUNET_SERVER_Handle;
    pub fn GNUNET_SERVICE_get_listen_sockets(ctx:
                                                 *mut Struct_GNUNET_SERVICE_Context)
     -> *const *mut Struct_GNUNET_NETWORK_Handle;
    pub fn GNUNET_SERVICE_stop(sctx: *mut Struct_GNUNET_SERVICE_Context)
     -> ();
    pub fn GNUNET_SIGNAL_handler_install(signal: ::libc::c_int,
                                         handler: GNUNET_SIGNAL_Handler)
     -> *mut Struct_GNUNET_SIGNAL_Context;
    pub fn GNUNET_SIGNAL_handler_uninstall(ctx:
                                               *mut Struct_GNUNET_SIGNAL_Context)
     -> ();
    pub fn GNUNET_SIGNAL_raise(sig: ::libc::c_int) -> ();
    pub fn GNUNET_STRINGS_fancy_size_to_bytes(fancy_size:
                                                  *const ::libc::c_char,
                                              size: *mut ::libc::c_ulonglong)
     -> ::libc::c_int;
    pub fn GNUNET_STRINGS_fancy_time_to_relative(fancy_time:
                                                     *const ::libc::c_char,
                                                 rtime:
                                                     *mut Struct_GNUNET_TIME_Relative)
     -> ::libc::c_int;
    pub fn GNUNET_STRINGS_fancy_time_to_absolute(fancy_time:
                                                     *const ::libc::c_char,
                                                 atime:
                                                     *mut Struct_GNUNET_TIME_Absolute)
     -> ::libc::c_int;
    pub fn GNUNET_STRINGS_byte_size_fancy(size: ::libc::c_ulonglong)
     -> *mut ::libc::c_char;
    pub fn GNUNET_STRINGS_conv(input: *const ::libc::c_char, len: size_t,
                               input_charset: *const ::libc::c_char,
                               output_charset: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn GNUNET_STRINGS_to_utf8(input: *const ::libc::c_char, len: size_t,
                                  charset: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn GNUNET_STRINGS_from_utf8(input: *const ::libc::c_char, len: size_t,
                                    charset: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn GNUNET_STRINGS_utf8_tolower(input: *const ::libc::c_char,
                                       output: *mut ::libc::c_char) -> ();
    pub fn GNUNET_STRINGS_utf8_toupper(input: *const ::libc::c_char,
                                       output: *mut ::libc::c_char) -> ();
    pub fn GNUNET_STRINGS_filename_expand(fil: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn GNUNET_STRINGS_buffer_fill(buffer: *mut ::libc::c_char,
                                      size: size_t,
                                      count: ::libc::c_uint, ...) -> size_t;
    pub fn GNUNET_STRINGS_buffer_tokenize(buffer: *const ::libc::c_char,
                                          size: size_t,
                                          count: ::libc::c_uint, ...)
     -> ::libc::c_uint;
    pub fn GNUNET_STRINGS_absolute_time_to_string(t:
                                                      Struct_GNUNET_TIME_Absolute)
     -> *const ::libc::c_char;
    pub fn GNUNET_STRINGS_relative_time_to_string(delta:
                                                      Struct_GNUNET_TIME_Relative,
                                                  do_round: ::libc::c_int)
     -> *const ::libc::c_char;
    pub fn GNUNET_STRINGS_get_short_name(filename: *const ::libc::c_char)
     -> *const ::libc::c_char;
    pub fn GNUNET_STRINGS_data_to_string(data: *const ::libc::c_void,
                                         size: size_t,
                                         out: *mut ::libc::c_char,
                                         out_size: size_t)
     -> *mut ::libc::c_char;
    pub fn GNUNET_STRINGS_string_to_data(enc: *const ::libc::c_char,
                                         enclen: size_t,
                                         out: *mut ::libc::c_void,
                                         out_size: size_t) -> ::libc::c_int;
    pub fn GNUNET_STRINGS_base64_encode(data: *const ::libc::c_char,
                                        len: size_t,
                                        output: *mut *mut ::libc::c_char)
     -> size_t;
    pub fn GNUNET_STRINGS_base64_decode(data: *const ::libc::c_char,
                                        len: size_t,
                                        output: *mut *mut ::libc::c_char)
     -> size_t;
    pub fn GNUNET_STRINGS_parse_uri(path: *const ::libc::c_char,
                                    scheme_part: *mut *mut ::libc::c_char,
                                    path_part: *mut *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn GNUNET_STRINGS_path_is_absolute(filename: *const ::libc::c_char,
                                           can_be_uri: ::libc::c_int,
                                           r_is_uri: *mut ::libc::c_int,
                                           r_uri_scheme:
                                               *mut *mut ::libc::c_char)
     -> ::libc::c_int;
    pub fn GNUNET_STRINGS_check_filename(filename: *const ::libc::c_char,
                                         checks:
                                             Enum_GNUNET_STRINGS_FilenameCheck)
     -> ::libc::c_int;
    pub fn GNUNET_STRINGS_to_address_ipv6(zt_addr: *const ::libc::c_char,
                                          addrlen: uint16_t,
                                          r_buf: *mut Struct_sockaddr_in6)
     -> ::libc::c_int;
    pub fn GNUNET_STRINGS_to_address_ipv4(zt_addr: *const ::libc::c_char,
                                          addrlen: uint16_t,
                                          r_buf: *mut Struct_sockaddr_in)
     -> ::libc::c_int;
    pub fn GNUNET_STRINGS_to_address_ip(addr: *const ::libc::c_char,
                                        addrlen: uint16_t,
                                        r_buf: *mut Struct_sockaddr_storage)
     -> ::libc::c_int;
    pub fn GNUNET_STRINGS_get_utf8_args(argc: ::libc::c_int,
                                        argv: *const *mut ::libc::c_char,
                                        u8argc: *mut ::libc::c_int,
                                        u8argv:
                                            *mut *const *mut ::libc::c_char)
     -> ::libc::c_int;
    pub fn GNUNET_STRINGS_parse_ipv4_policy(routeListX: *const ::libc::c_char)
     -> *mut Struct_GNUNET_STRINGS_IPv4NetworkPolicy;
    pub fn GNUNET_STRINGS_parse_ipv6_policy(routeListX: *const ::libc::c_char)
     -> *mut Struct_GNUNET_STRINGS_IPv6NetworkPolicy;
    pub fn GNUNET_TUN_initialize_ipv4_header(ip:
                                                 *mut Struct_GNUNET_TUN_IPv4Header,
                                             protocol: uint8_t,
                                             payload_length: uint16_t,
                                             src: *const Struct_in_addr,
                                             dst: *const Struct_in_addr)
     -> ();
    pub fn GNUNET_TUN_initialize_ipv6_header(ip:
                                                 *mut Struct_GNUNET_TUN_IPv6Header,
                                             protocol: uint8_t,
                                             payload_length: uint16_t,
                                             src: *const Struct_in6_addr,
                                             dst: *const Struct_in6_addr)
     -> ();
    pub fn GNUNET_TUN_calculate_tcp4_checksum(ip:
                                                  *const Struct_GNUNET_TUN_IPv4Header,
                                              tcp:
                                                  *mut Struct_GNUNET_TUN_TcpHeader,
                                              payload: *const ::libc::c_void,
                                              payload_length: uint16_t) -> ();
    pub fn GNUNET_TUN_calculate_tcp6_checksum(ip:
                                                  *const Struct_GNUNET_TUN_IPv6Header,
                                              tcp:
                                                  *mut Struct_GNUNET_TUN_TcpHeader,
                                              payload: *const ::libc::c_void,
                                              payload_length: uint16_t) -> ();
    pub fn GNUNET_TUN_calculate_udp4_checksum(ip:
                                                  *const Struct_GNUNET_TUN_IPv4Header,
                                              udp:
                                                  *mut Struct_GNUNET_TUN_UdpHeader,
                                              payload: *const ::libc::c_void,
                                              payload_length: uint16_t) -> ();
    pub fn GNUNET_TUN_calculate_udp6_checksum(ip:
                                                  *const Struct_GNUNET_TUN_IPv6Header,
                                              udp:
                                                  *mut Struct_GNUNET_TUN_UdpHeader,
                                              payload: *const ::libc::c_void,
                                              payload_length: uint16_t) -> ();
    pub fn GNUNET_TUN_calculate_icmp_checksum(icmp:
                                                  *mut Struct_GNUNET_TUN_IcmpHeader,
                                              payload: *const ::libc::c_void,
                                              payload_length: uint16_t) -> ();
    pub fn GNUNET_TUN_ipv4toregexsearch(ip: *const Struct_in_addr,
                                        port: uint16_t,
                                        rxstr: *mut ::libc::c_char) -> ();
    pub fn GNUNET_TUN_ipv6toregexsearch(ipv6: *const Struct_in6_addr,
                                        port: uint16_t,
                                        rxstr: *mut ::libc::c_char) -> ();
    pub fn GNUNET_TUN_ipv6policy2regex(policy: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn GNUNET_TUN_ipv4policy2regex(policy: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn GNUNET_TUN_service_name_to_hash(service_name:
                                               *const ::libc::c_char,
                                           hc: *mut Struct_GNUNET_HashCode)
     -> ();
    pub fn GNUNET_DNSPARSER_check_label(label: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn GNUNET_DNSPARSER_check_name(name: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn GNUNET_DNSPARSER_parse(udp_payload: *const ::libc::c_char,
                                  udp_payload_length: size_t)
     -> *mut Struct_GNUNET_DNSPARSER_Packet;
    pub fn GNUNET_DNSPARSER_free_packet(p:
                                            *mut Struct_GNUNET_DNSPARSER_Packet)
     -> ();
    pub fn GNUNET_DNSPARSER_pack(p: *const Struct_GNUNET_DNSPARSER_Packet,
                                 max: uint16_t, buf: *mut *mut ::libc::c_char,
                                 buf_length: *mut size_t) -> ::libc::c_int;
    pub fn GNUNET_DNSPARSER_builder_add_name(dst: *mut ::libc::c_char,
                                             dst_len: size_t,
                                             off: *mut size_t,
                                             name: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn GNUNET_DNSPARSER_builder_add_query(dst: *mut ::libc::c_char,
                                              dst_len: size_t,
                                              off: *mut size_t,
                                              query:
                                                  *const Struct_GNUNET_DNSPARSER_Query)
     -> ::libc::c_int;
    pub fn GNUNET_DNSPARSER_builder_add_mx(dst: *mut ::libc::c_char,
                                           dst_len: size_t, off: *mut size_t,
                                           mx:
                                               *const Struct_GNUNET_DNSPARSER_MxRecord)
     -> ::libc::c_int;
    pub fn GNUNET_DNSPARSER_builder_add_soa(dst: *mut ::libc::c_char,
                                            dst_len: size_t, off: *mut size_t,
                                            soa:
                                                *const Struct_GNUNET_DNSPARSER_SoaRecord)
     -> ::libc::c_int;
    pub fn GNUNET_DNSPARSER_builder_add_cert(dst: *mut ::libc::c_char,
                                             dst_len: size_t,
                                             off: *mut size_t,
                                             cert:
                                                 *const Struct_GNUNET_DNSPARSER_CertRecord)
     -> ::libc::c_int;
    pub fn GNUNET_DNSPARSER_builder_add_srv(dst: *mut ::libc::c_char,
                                            dst_len: size_t, off: *mut size_t,
                                            srv:
                                                *const Struct_GNUNET_DNSPARSER_SrvRecord)
     -> ::libc::c_int;
    pub fn GNUNET_DNSPARSER_parse_record(udp_payload: *const ::libc::c_char,
                                         udp_payload_length: size_t,
                                         off: *mut size_t,
                                         r:
                                             *mut Struct_GNUNET_DNSPARSER_Record)
     -> ::libc::c_int;
    pub fn GNUNET_DNSPARSER_parse_name(udp_payload: *const ::libc::c_char,
                                       udp_payload_length: size_t,
                                       off: *mut size_t)
     -> *mut ::libc::c_char;
    pub fn GNUNET_DNSPARSER_parse_query(udp_payload: *const ::libc::c_char,
                                        udp_payload_length: size_t,
                                        off: *mut size_t,
                                        q: *mut Struct_GNUNET_DNSPARSER_Query)
     -> ::libc::c_int;
    pub fn GNUNET_DNSPARSER_parse_soa(udp_payload: *const ::libc::c_char,
                                      udp_payload_length: size_t,
                                      off: *mut size_t)
     -> *mut Struct_GNUNET_DNSPARSER_SoaRecord;
    pub fn GNUNET_DNSPARSER_parse_cert(udp_payload: *const ::libc::c_char,
                                       udp_payload_length: size_t,
                                       off: *mut size_t)
     -> *mut Struct_GNUNET_DNSPARSER_CertRecord;
    pub fn GNUNET_DNSPARSER_parse_mx(udp_payload: *const ::libc::c_char,
                                     udp_payload_length: size_t,
                                     off: *mut size_t)
     -> *mut Struct_GNUNET_DNSPARSER_MxRecord;
    pub fn GNUNET_DNSPARSER_parse_srv(udp_payload: *const ::libc::c_char,
                                      udp_payload_length: size_t,
                                      off: *mut size_t)
     -> *mut Struct_GNUNET_DNSPARSER_SrvRecord;
    pub fn GNUNET_DNSPARSER_free_record(r:
                                            *mut Struct_GNUNET_DNSPARSER_Record)
     -> ();
    pub fn GNUNET_DNSPARSER_free_mx(mx: *mut Struct_GNUNET_DNSPARSER_MxRecord)
     -> ();
    pub fn GNUNET_DNSPARSER_free_srv(srv:
                                         *mut Struct_GNUNET_DNSPARSER_SrvRecord)
     -> ();
    pub fn GNUNET_DNSPARSER_free_soa(soa:
                                         *mut Struct_GNUNET_DNSPARSER_SoaRecord)
     -> ();
    pub fn GNUNET_DNSPARSER_free_cert(cert:
                                          *mut Struct_GNUNET_DNSPARSER_CertRecord)
     -> ();
    pub fn GNUNET_DNSPARSER_bin_to_hex(data: *const ::libc::c_void,
                                       data_size: size_t)
     -> *mut ::libc::c_char;
    pub fn GNUNET_DNSPARSER_hex_to_bin(hex: *const ::libc::c_char,
                                       data: *mut ::libc::c_void) -> size_t;
    pub fn GNUNET_BLOCK_mingle_hash(_in: *const Struct_GNUNET_HashCode,
                                    mingle_number: uint32_t,
                                    hc: *mut Struct_GNUNET_HashCode) -> ();
    pub fn GNUNET_BLOCK_context_create(cfg:
                                           *const Struct_GNUNET_CONFIGURATION_Handle)
     -> *mut Struct_GNUNET_BLOCK_Context;
    pub fn GNUNET_BLOCK_context_destroy(ctx: *mut Struct_GNUNET_BLOCK_Context)
     -> ();
    pub fn GNUNET_BLOCK_evaluate(ctx: *mut Struct_GNUNET_BLOCK_Context,
                                 _type: Enum_GNUNET_BLOCK_Type,
                                 query: *const Struct_GNUNET_HashCode,
                                 bf:
                                     *mut *mut Struct_GNUNET_CONTAINER_BloomFilter,
                                 bf_mutator: int32_t,
                                 xquery: *const ::libc::c_void,
                                 xquery_size: size_t,
                                 reply_block: *const ::libc::c_void,
                                 reply_block_size: size_t)
     -> Enum_GNUNET_BLOCK_EvaluationResult;
    pub fn GNUNET_BLOCK_get_key(ctx: *mut Struct_GNUNET_BLOCK_Context,
                                _type: Enum_GNUNET_BLOCK_Type,
                                block: *const ::libc::c_void,
                                block_size: size_t,
                                key: *mut Struct_GNUNET_HashCode)
     -> ::libc::c_int;
    pub fn GNUNET_BLOCK_construct_bloomfilter(bf_mutator: int32_t,
                                              seen_results:
                                                  *const Struct_GNUNET_HashCode,
                                              seen_results_count:
                                                  ::libc::c_uint)
     -> *mut Struct_GNUNET_CONTAINER_BloomFilter;
    pub fn GNUNET_GNSRECORD_value_to_string(_type: uint32_t,
                                            data: *const ::libc::c_void,
                                            data_size: size_t)
     -> *mut ::libc::c_char;
    pub fn GNUNET_GNSRECORD_string_to_value(_type: uint32_t,
                                            s: *const ::libc::c_char,
                                            data: *mut *mut ::libc::c_void,
                                            data_size: *mut size_t)
     -> ::libc::c_int;
    pub fn GNUNET_GNSRECORD_typename_to_number(dns_typename:
                                                   *const ::libc::c_char)
     -> uint32_t;
    pub fn GNUNET_GNSRECORD_number_to_typename(_type: uint32_t)
     -> *const ::libc::c_char;
    pub fn GNUNET_GNSRECORD_records_get_size(rd_count: ::libc::c_uint,
                                             rd:
                                                 *const Struct_GNUNET_GNSRECORD_Data)
     -> size_t;
    pub fn GNUNET_GNSRECORD_records_serialize(rd_count: ::libc::c_uint,
                                              rd:
                                                  *const Struct_GNUNET_GNSRECORD_Data,
                                              dest_size: size_t,
                                              dest: *mut ::libc::c_char)
     -> ssize_t;
    pub fn GNUNET_GNSRECORD_records_deserialize(len: size_t,
                                                src: *const ::libc::c_char,
                                                rd_count: ::libc::c_uint,
                                                dest:
                                                    *mut Struct_GNUNET_GNSRECORD_Data)
     -> ::libc::c_int;
    pub fn GNUNET_GNSRECORD_is_expired(rd:
                                           *const Struct_GNUNET_GNSRECORD_Data)
     -> ::libc::c_int;
    pub fn GNUNET_GNSRECORD_string_to_lowercase(src: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn GNUNET_GNSRECORD_z2s(z: *const Struct_GNUNET_CRYPTO_EcdsaPublicKey)
     -> *const ::libc::c_char;
    pub fn GNUNET_GNSRECORD_pkey_to_zkey(pkey:
                                             *const Struct_GNUNET_CRYPTO_EcdsaPublicKey)
     -> *const ::libc::c_char;
    pub fn GNUNET_GNSRECORD_zkey_to_pkey(zkey: *const ::libc::c_char,
                                         pkey:
                                             *mut Struct_GNUNET_CRYPTO_EcdsaPublicKey)
     -> ::libc::c_int;
    pub fn GNUNET_GNSRECORD_query_from_private_key(zone:
                                                       *const Struct_GNUNET_CRYPTO_EcdsaPrivateKey,
                                                   label:
                                                       *const ::libc::c_char,
                                                   query:
                                                       *mut Struct_GNUNET_HashCode)
     -> ();
    pub fn GNUNET_GNSRECORD_query_from_public_key(_pub:
                                                      *const Struct_GNUNET_CRYPTO_EcdsaPublicKey,
                                                  label:
                                                      *const ::libc::c_char,
                                                  query:
                                                      *mut Struct_GNUNET_HashCode)
     -> ();
    pub fn GNUNET_GNSRECORD_block_create(key:
                                             *const Struct_GNUNET_CRYPTO_EcdsaPrivateKey,
                                         expire: Struct_GNUNET_TIME_Absolute,
                                         label: *const ::libc::c_char,
                                         rd:
                                             *const Struct_GNUNET_GNSRECORD_Data,
                                         rd_count: ::libc::c_uint)
     -> *mut Struct_GNUNET_GNSRECORD_Block;
    pub fn GNUNET_GNSRECORD_block_verify(block:
                                             *const Struct_GNUNET_GNSRECORD_Block)
     -> ::libc::c_int;
    pub fn GNUNET_GNSRECORD_block_decrypt(block:
                                              *const Struct_GNUNET_GNSRECORD_Block,
                                          zone_key:
                                              *const Struct_GNUNET_CRYPTO_EcdsaPublicKey,
                                          label: *const ::libc::c_char,
                                          _proc:
                                              GNUNET_GNSRECORD_RecordCallback,
                                          proc_cls: *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn GNUNET_GNSRECORD_records_cmp(a:
                                            *const Struct_GNUNET_GNSRECORD_Data,
                                        b:
                                            *const Struct_GNUNET_GNSRECORD_Data)
     -> ::libc::c_int;
    pub fn GNUNET_GNSRECORD_record_get_expiration_time(rd_count:
                                                           ::libc::c_uint,
                                                       rd:
                                                           *const Struct_GNUNET_GNSRECORD_Data)
     -> Struct_GNUNET_TIME_Absolute;
    pub fn GNUNET_NAMESTORE_connect(cfg:
                                        *const Struct_GNUNET_CONFIGURATION_Handle)
     -> *mut Struct_GNUNET_NAMESTORE_Handle;
    pub fn GNUNET_NAMESTORE_disconnect(h: *mut Struct_GNUNET_NAMESTORE_Handle)
     -> ();
    pub fn GNUNET_NAMESTORE_records_store(h:
                                              *mut Struct_GNUNET_NAMESTORE_Handle,
                                          pkey:
                                              *const Struct_GNUNET_CRYPTO_EcdsaPrivateKey,
                                          label: *const ::libc::c_char,
                                          rd_count: ::libc::c_uint,
                                          rd:
                                              *const Struct_GNUNET_GNSRECORD_Data,
                                          cont:
                                              GNUNET_NAMESTORE_ContinuationWithStatus,
                                          cont_cls: *mut ::libc::c_void)
     -> *mut Struct_GNUNET_NAMESTORE_QueueEntry;
    pub fn GNUNET_NAMESTORE_set_nick(h: *mut Struct_GNUNET_NAMESTORE_Handle,
                                     pkey:
                                         *const Struct_GNUNET_CRYPTO_EcdsaPrivateKey,
                                     nick: *const ::libc::c_char,
                                     cont:
                                         GNUNET_NAMESTORE_ContinuationWithStatus,
                                     cont_cls: *mut ::libc::c_void)
     -> *mut Struct_GNUNET_NAMESTORE_QueueEntry;
    pub fn GNUNET_NAMESTORE_records_lookup(h:
                                               *mut Struct_GNUNET_NAMESTORE_Handle,
                                           pkey:
                                               *const Struct_GNUNET_CRYPTO_EcdsaPrivateKey,
                                           label: *const ::libc::c_char,
                                           rm: GNUNET_NAMESTORE_RecordMonitor,
                                           rm_cls: *mut ::libc::c_void)
     -> *mut Struct_GNUNET_NAMESTORE_QueueEntry;
    pub fn GNUNET_NAMESTORE_zone_to_name(h:
                                             *mut Struct_GNUNET_NAMESTORE_Handle,
                                         zone:
                                             *const Struct_GNUNET_CRYPTO_EcdsaPrivateKey,
                                         value_zone:
                                             *const Struct_GNUNET_CRYPTO_EcdsaPublicKey,
                                         _proc:
                                             GNUNET_NAMESTORE_RecordMonitor,
                                         proc_cls: *mut ::libc::c_void)
     -> *mut Struct_GNUNET_NAMESTORE_QueueEntry;
    pub fn GNUNET_NAMESTORE_cancel(qe:
                                       *mut Struct_GNUNET_NAMESTORE_QueueEntry)
     -> ();
    pub fn GNUNET_NAMESTORE_zone_iteration_start(h:
                                                     *mut Struct_GNUNET_NAMESTORE_Handle,
                                                 zone:
                                                     *const Struct_GNUNET_CRYPTO_EcdsaPrivateKey,
                                                 _proc:
                                                     GNUNET_NAMESTORE_RecordMonitor,
                                                 proc_cls:
                                                     *mut ::libc::c_void)
     -> *mut Struct_GNUNET_NAMESTORE_ZoneIterator;
    pub fn GNUNET_NAMESTORE_zone_iterator_next(it:
                                                   *mut Struct_GNUNET_NAMESTORE_ZoneIterator)
     -> ();
    pub fn GNUNET_NAMESTORE_zone_iteration_stop(it:
                                                    *mut Struct_GNUNET_NAMESTORE_ZoneIterator)
     -> ();
    pub fn GNUNET_NAMESTORE_zone_monitor_start(cfg:
                                                   *const Struct_GNUNET_CONFIGURATION_Handle,
                                               zone:
                                                   *const Struct_GNUNET_CRYPTO_EcdsaPrivateKey,
                                               iterate_first: ::libc::c_int,
                                               monitor:
                                                   GNUNET_NAMESTORE_RecordMonitor,
                                               sync_cb:
                                                   GNUNET_NAMESTORE_RecordsSynchronizedCallback,
                                               cls: *mut ::libc::c_void)
     -> *mut Struct_GNUNET_NAMESTORE_ZoneMonitor;
    pub fn GNUNET_NAMESTORE_zone_monitor_stop(zm:
                                                  *mut Struct_GNUNET_NAMESTORE_ZoneMonitor)
     -> ();
    pub fn GNUNET_GNS_connect(cfg: *const Struct_GNUNET_CONFIGURATION_Handle)
     -> *mut Struct_GNUNET_GNS_Handle;
    pub fn GNUNET_GNS_disconnect(handle: *mut Struct_GNUNET_GNS_Handle) -> ();
    pub fn GNUNET_GNS_lookup(handle: *mut Struct_GNUNET_GNS_Handle,
                             name: *const ::libc::c_char,
                             zone: *const Struct_GNUNET_CRYPTO_EcdsaPublicKey,
                             _type: uint32_t,
                             options: Enum_GNUNET_GNS_LocalOptions,
                             shorten_zone_key:
                                 *const Struct_GNUNET_CRYPTO_EcdsaPrivateKey,
                             _proc: GNUNET_GNS_LookupResultProcessor,
                             proc_cls: *mut ::libc::c_void)
     -> *mut Struct_GNUNET_GNS_LookupRequest;
    pub fn GNUNET_GNS_lookup_cancel(lr: *mut Struct_GNUNET_GNS_LookupRequest)
     -> ();
    pub fn GNUNET_IDENTITY_ego_get_private_key(ego:
                                                   *const Struct_GNUNET_IDENTITY_Ego)
     -> *const Struct_GNUNET_CRYPTO_EcdsaPrivateKey;
    pub fn GNUNET_IDENTITY_ego_get_anonymous()
     -> *const Struct_GNUNET_IDENTITY_Ego;
    pub fn GNUNET_IDENTITY_ego_get_public_key(ego:
                                                  *const Struct_GNUNET_IDENTITY_Ego,
                                              pk:
                                                  *mut Struct_GNUNET_CRYPTO_EcdsaPublicKey)
     -> ();
    pub fn GNUNET_IDENTITY_connect(cfg:
                                       *const Struct_GNUNET_CONFIGURATION_Handle,
                                   cb: GNUNET_IDENTITY_Callback,
                                   cb_cls: *mut ::libc::c_void)
     -> *mut Struct_GNUNET_IDENTITY_Handle;
    pub fn GNUNET_IDENTITY_get(id: *mut Struct_GNUNET_IDENTITY_Handle,
                               service_name: *const ::libc::c_char,
                               cb: GNUNET_IDENTITY_Callback,
                               cb_cls: *mut ::libc::c_void)
     -> *mut Struct_GNUNET_IDENTITY_Operation;
    pub fn GNUNET_IDENTITY_set(id: *mut Struct_GNUNET_IDENTITY_Handle,
                               service_name: *const ::libc::c_char,
                               ego: *mut Struct_GNUNET_IDENTITY_Ego,
                               cont: GNUNET_IDENTITY_Continuation,
                               cont_cls: *mut ::libc::c_void)
     -> *mut Struct_GNUNET_IDENTITY_Operation;
    pub fn GNUNET_IDENTITY_disconnect(h: *mut Struct_GNUNET_IDENTITY_Handle)
     -> ();
    pub fn GNUNET_IDENTITY_create(id: *mut Struct_GNUNET_IDENTITY_Handle,
                                  name: *const ::libc::c_char,
                                  cont: GNUNET_IDENTITY_Continuation,
                                  cont_cls: *mut ::libc::c_void)
     -> *mut Struct_GNUNET_IDENTITY_Operation;
    pub fn GNUNET_IDENTITY_rename(id: *mut Struct_GNUNET_IDENTITY_Handle,
                                  old_name: *const ::libc::c_char,
                                  new_name: *const ::libc::c_char,
                                  cb: GNUNET_IDENTITY_Continuation,
                                  cb_cls: *mut ::libc::c_void)
     -> *mut Struct_GNUNET_IDENTITY_Operation;
    pub fn GNUNET_IDENTITY_delete(id: *mut Struct_GNUNET_IDENTITY_Handle,
                                  name: *const ::libc::c_char,
                                  cb: GNUNET_IDENTITY_Continuation,
                                  cb_cls: *mut ::libc::c_void)
     -> *mut Struct_GNUNET_IDENTITY_Operation;
    pub fn GNUNET_IDENTITY_cancel(op: *mut Struct_GNUNET_IDENTITY_Operation)
     -> ();
    pub fn GNUNET_IDENTITY_ego_lookup(cfg:
                                          *const Struct_GNUNET_CONFIGURATION_Handle,
                                      name: *const ::libc::c_char,
                                      cb: GNUNET_IDENTITY_EgoCallback,
                                      cb_cls: *mut ::libc::c_void)
     -> *mut Struct_GNUNET_IDENTITY_EgoLookup;
    pub fn GNUNET_IDENTITY_ego_lookup_cancel(el:
                                                 *mut Struct_GNUNET_IDENTITY_EgoLookup)
     -> ();
}

pub const GNUNET_NO: ::libc::c_int = 0;
pub const GNUNET_OK: ::libc::c_int = 1;
pub const GNUNET_MESSAGE_TYPE_GNS_LOOKUP: u16 = 500;
pub const GNUNET_MESSAGE_TYPE_GNS_LOOKUP_RESULT: u16 = 501;
pub const GNUNET_MESSAGE_TYPE_IDENTITY_START: u16 = 624;
pub const GNUNET_MESSAGE_TYPE_IDENTITY_RESULT_CODE: u16 = 625;
pub const GNUNET_MESSAGE_TYPE_IDENTITY_UPDATE: u16 = 626;
pub const GNUNET_MESSAGE_TYPE_IDENTITY_GET_DEFAULT: u16 = 627;
pub const GNUNET_MESSAGE_TYPE_IDENTITY_SET_DEFAULT: u16 = 628;
pub const GNUNET_DNSPARSER_MAX_NAME_LENGTH: u16 = 253;

unsafe impl Send for Struct_GNUNET_GNSRECORD_Data {}

